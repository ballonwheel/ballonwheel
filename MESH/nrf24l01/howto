Here’s a simple **Arduino Nano** setup using **nRF24L01** modules — one acting as a **transmitter** and the other as a **receiver**. This example uses the **RF24** library by TMRh20, which is widely used and well-documented.

---

## ✅ **Wiring (both TX and RX)**

| nRF24L01 Pin | Arduino Nano Pin  |
| ------------ | ----------------- |
| VCC          | 3.3V (⚠️ not 5V!) |
| GND          | GND               |
| CE           | D9                |
| CSN (CS)     | D10               |
| SCK          | D13               |
| MOSI         | D11               |
| MISO         | D12               |

> ⚠️ Use a **100 µF capacitor** across VCC–GND near the nRF24L01 to prevent power dips.

---

## 📡 **Transmitter Code (TX)**

```cpp
#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>

RF24 radio(9, 10); // CE, CSN
const byte address[6] = "00001";

void setup() {
  Serial.begin(9600);
  radio.begin();
  radio.setPALevel(RF24_PA_LOW); // Power level: try HIGH if range is short
  radio.setChannel(108);         // Avoid WiFi channels (optional)
  radio.openWritingPipe(address);
  radio.stopListening(); // Set as transmitter
}

void loop() {
  const char text[] = "Hello NRF!";
  radio.write(&text, sizeof(text));
  Serial.println("Sent: Hello NRF!");
  delay(1000);
}
```

---

## 📥 **Receiver Code (RX)**

```cpp
#include <SPI.h>
#include <nRF24L01.h>
#include <RF24.h>

RF24 radio(9, 10); // CE, CSN
const byte address[6] = "00001";

void setup() {
  Serial.begin(9600);
  radio.begin();
  radio.setPALevel(RF24_PA_LOW);
  radio.setChannel(108);
  radio.openReadingPipe(0, address);
  radio.startListening(); // Set as receiver
}

void loop() {
  if (radio.available()) {
    char text[32] = {0};
    radio.read(&text, sizeof(text));
    Serial.print("Received: ");
    Serial.println(text);
  }
}
```

---

## 🔧 Installation

1. Install the **RF24 library**:

   * Arduino IDE → **Tools** → **Manage Libraries...**
   * Search for **"RF24" by TMRh20**, install it.

---

## 🧪 Troubleshooting Tips

* Use a **3.3V regulator** (like AMS1117) if your Nano’s 3.3V output is unstable.
* Use `RF24_PA_MIN` for stability during testing.
* Test modules close to each other first.
* Always use a decoupling capacitor near the VCC.

---

Let me know if you want examples for **bidirectional communication**, **sensors**, or integration with **MySensors** (MESH-like setup).


