
/* http://www.yolinux.com/TUTORIALS/LinuxTutorialPosixThreads.html*/ 

#if 0
Thread Man Pages:

    pthread_atfork - register handlers to be called at fork(2) time
    pthread_attr_destroy [pthread_attr_init] - thread creation attributes
    pthread_attr_getdetachstate [pthread_attr_init] - thread creation attributes
    pthread_attr_getguardsize - get the guardsize attribute in the attr object.
    pthread_attr_getinheritsched [pthread_attr_init] - thread creation attributes
    pthread_attr_getschedparam [pthread_attr_init] - thread creation attributes
    pthread_attr_getschedpolicy [pthread_attr_init] - thread creation attributes
    pthread_attr_getscope [pthread_attr_init] - thread creation attributes
    pthread_attr_getstack - get the thread creation stack attributes stackaddr and stacksize in the attr object.
    pthread_attr_getstackaddr - get the thread creation stackaddr attributes stackaddr attribute in the attr object.
    pthread_attr_getstacksize - get the thread creation stacksize attribute in the attr object.
    pthread_attr_init - thread creation attributes
    pthread_attr_setdetachstate [pthread_attr_init] - thread creation attributes
    pthread_attr_setguardsize - set the guardsize attribute in the attr object.
    pthread_attr_setinheritsched [pthread_attr_init] - thread creation attributes
    pthread_attr_setschedparam [pthread_attr_init] - thread creation attributes
    pthread_attr_setschedpolicy [pthread_attr_init] - thread creation attributes
    pthread_attr_setscope [pthread_attr_init] - thread creation attributes
    pthread_attr_setstack - set the thread creation stack attributes stackaddr and stacksize in the attr object.
    pthread_attr_setstackaddr - set the thread creation stackaddr attributes stackaddr attribute in the attr object.
    pthread_attr_setstacksize - set the thread creation stacksize attribute in the attr object.
    pthread_cancel - thread cancellation
    pthread_cleanup_pop [pthread_cleanup_push] - install and remove cleanup handlers
    pthread_cleanup_pop_restore_np [pthread_cleanup_push] - install and remove cleanup handlers
    pthread_cleanup_push - install and remove cleanup handlers
    pthread_cleanup_push_defer_np [pthread_cleanup_push] - install and remove cleanup handlers
    pthread_condattr_destroy [pthread_condattr_init] - condition creation attributes
    pthread_condattr_init - condition creation attributes
    pthread_cond_broadcast [pthread_cond_init] - operations on conditions
    pthread_cond_destroy [pthread_cond_init] - operations on conditions
    pthread_cond_init - operations on conditions
    pthread_cond_signal [pthread_cond_init] - operations on conditions
    pthread_cond_timedwait [pthread_cond_init] - operations on conditions
    pthread_cond_wait [pthread_cond_init] - operations on conditions
    pthread_create - create a new thread
    pthread_detach - put a running thread in the detached state
    pthread_equal - compare two thread identifiers
    pthread_exit - terminate the calling thread
    pthread_getschedparam [pthread_setschedparam] - control thread scheduling parameters
    pthread_getspecific [pthread_key_create] - management of thread-specific data
    pthread_join - wait for termination of another thread
    pthread_key_create - management of thread-specific data
    pthread_key_delete [pthread_key_create] - management of thread-specific data
    pthread_kill_other_threads_np - terminate all threads in program except calling thread
    pthread_kill [pthread_sigmask] - handling of signals in threads
    pthread_mutexattr_destroy [pthread_mutexattr_init] - mutex creation attributes
    pthread_mutexattr_getkind_np [pthread_mutexattr_init] - mutex creation attributes
    pthread_mutexattr_init - mutex creation attributes
    pthread_mutexattr_setkind_np [pthread_mutexattr_init] - mutex creation attributes
    pthread_mutex_destroy [pthread_mutex_init] - operations on mutexes
    pthread_mutex_init - operations on mutexes
    pthread_mutex_lock [pthread_mutex_init] - operations on mutexes
    pthread_mutex_trylock [pthread_mutex_init] - operations on mutexes
    pthread_mutex_unlock [pthread_mutex_init] - operations on mutexes
    pthread_once - once-only initialization
    pthread_self - return identifier of current thread
    pthread_setcancelstate [pthread_cancel] - thread cancellation
    pthread_setcanceltype [pthread_cancel] - thread cancellation
    pthread_setschedparam - control thread scheduling parameters
    pthread_setspecific [pthread_key_create] - management of thread-specific data
    pthread_sigmask - handling of signals in threads
    pthread_testcancel [pthread_cancel] - thread cancellation
#endif




/*******************************************************************************
 * thread create1 cpp
 ******************************************************************************/
#if 0
#include <iostream>
#include <pthread.h>
using namespace std;

#if defined(__cplusplus)
extern "C"
#endif



void *print_message(void*)
{
    cout << "Threading\n";
}



int main() 
{
     pthread_t t1;

     pthread_create(&t1, NULL, &print_message, NULL);
     cout << "Hello";

    void* result;
    pthread_join(t1,&result);

    return 0;
}
#endif

/*******************************************************************************
 * thread create2
 ******************************************************************************/
#if 0
#include <pthread.h>
#include <stdio.h>

/* this function is run by the second thread */
void *inc_x(void *x_void_ptr)
{
    /* increment x to 100 */
    int *x_ptr = (int *)x_void_ptr;
    while(++(*x_ptr) < 100);

    printf("x increment finished\n");

    /* the function must return something - NULL will do */
    return NULL;
}

int main()
{
    int x = 0, y = 0;

    /* show the initial values of x and y */
    printf("x: %d, y: %d\n", x, y);

    /* this variable is our reference to the second thread */
    pthread_t inc_x_thread;

    /* create a second thread which executes inc_x(&x) */
    if(pthread_create(&inc_x_thread, NULL, inc_x, &x)) {
        fprintf(stderr, "Error creating thread\n");
        return 1;
    }
    /* increment y to 100 in the first thread */
    while(++y < 100);

    printf("y increment finished\n");

    /* wait for the second thread to finish */
    if(pthread_join(inc_x_thread, NULL)) {

        fprintf(stderr, "Error joining thread\n");
        return 2;
    }

    /* show the results - x is now 100 thanks to the second thread */
    printf("x: %d, y: %d\n", x, y);

    return 0;
}
#endif

/*******************************************************************************
 * thread create3
 ******************************************************************************/
#if 0
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

void *print_message_function( void *ptr );

main()
{
     pthread_t thread1, thread2;
     const char *message1 = "Thread 1";
     const char *message2 = "Thread 2";
     int  iret1, iret2;

#if 1
    /* Create independent threads each of which will execute function */
     iret1 = pthread_create( &thread1, NULL, print_message_function, (void*) message1);

#else /* g++ pitfall (void*)&print_message_function */
     iret1 = pthread_create( &thread1, NULL, (void*)&print_message_function, (void*) message1);
main.c: In function ‘int main()’:
main.c:70:94: error: invalid conversion from ‘void*’ to ‘void* (*)(void*)’ [-fpermissive]
In file included from main.c:56:0:
/usr/include/pthread.h:225:12: error:   initializing argument 3 of ‘int pthread_create(pthread_t*, const pthread_attr_t*, void* (*)(void*), void*)’ [-fpermissive]
#endif

     if(iret1)
     {
         fprintf(stderr,"Error - pthread_create() return code: %d\n",iret1);
         exit(EXIT_FAILURE);
     }

     iret2 = pthread_create( &thread2, NULL, print_message_function, (void*) message2);
     if(iret2)
     {
         fprintf(stderr,"Error - pthread_create() return code: %d\n",iret2);
         exit(EXIT_FAILURE);
     }

     printf("pthread_create() for thread 1 returns: %d\n",iret1);
     printf("pthread_create() for thread 2 returns: %d\n",iret2);

     /* Wait till threads are complete before main continues. Unless we  */
     /* wait we run the risk of executing an exit which will terminate   */
     /* the process and all threads before the threads have completed.   */

     pthread_join( thread1, NULL);
     pthread_join( thread2, NULL); 

     exit(EXIT_SUCCESS);
}

void *print_message_function( void *ptr )
{
     char *message;
     message = (char *) ptr;
     printf("%s \n", message);
}
#endif



/*******************************************************************************
 * mutex

    pthread_mutex_lock() - acquire a lock on the specified mutex variable. If the mutex is already locked by another thread, this call will block the calling thread until the mutex is unlocked.
    pthread_mutex_unlock() - unlock a mutex variable. An error is returned if mutex is already unlocked or owned by another thread.
    pthread_mutex_trylock() - attempt to lock a mutex or will return error code if busy. Useful for preventing deadlock conditions.

 ******************************************************************************/
#if 0
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

void *functionC();
pthread_mutex_t mutex1 = PTHREAD_MUTEX_INITIALIZER;
int  counter = 0;

main()
{
   int rc1, rc2;
   pthread_t thread1, thread2;

   /* Create independent threads each of which will execute functionC */

   if( (rc1=pthread_create( &thread1, NULL, &functionC, NULL)) )
   {
      printf("Thread creation failed: %d\n", rc1);
   }

   if( (rc2=pthread_create( &thread2, NULL, &functionC, NULL)) )
   {
      printf("Thread creation failed: %d\n", rc2);
   }

   /* Wait till threads are complete before main continues. Unless we  */
   /* wait we run the risk of executing an exit which will terminate   */
   /* the process and all threads before the threads have completed.   */

   pthread_join( thread1, NULL);
   pthread_join( thread2, NULL); 

   exit(EXIT_SUCCESS);
}

void *functionC()
{
   pthread_mutex_lock( &mutex1 );
   counter++;
   printf("Counter value: %d\n",counter);
   pthread_mutex_unlock( &mutex1 );
}
#endif


/*******************************************************************************
 * Joins: A join is performed when one wants to wait for a thread to finish. 
   A thread calling routine may launch multiple threads then wait for them to finish to get the results. 
   One waits for the completion of the threads with a join.
   
    pthread_create() - create a new thread
    pthread_join() - wait for termination of another thread
    pthread_self() - return identifier of current thread

 ******************************************************************************/
#if 0
#include <stdio.h>
#include <pthread.h>

#define NTHREADS 10
void *thread_function(void *);
pthread_mutex_t mutex1 = PTHREAD_MUTEX_INITIALIZER;
int  counter = 0;

main()
{
   pthread_t thread_id[NTHREADS];
   int i, j;

   for(i=0; i < NTHREADS; i++)
   {
      pthread_create( &thread_id[i], NULL, thread_function, NULL );
   }

   for(j=0; j < NTHREADS; j++)
   {
      pthread_join( thread_id[j], NULL); 
   }
  
   /* Now that all threads are complete I can print the final result.     */
   /* Without the join I could be printing a value before all the threads */
   /* have been completed.                                                */

   printf("Final counter value: %d\n", counter);
}

void *thread_function(void *dummyPtr)
{
   printf("Thread number %ld\n", pthread_self());
   pthread_mutex_lock( &mutex1 );
   counter++;
   pthread_mutex_unlock( &mutex1 );
}
#endif


/*******************************************************************************
Condition Variables:

A condition variable is a variable of type pthread_cond_t and is used with the appropriate functions for waiting and later, process continuation. The condition variable mechanism allows threads to suspend execution and relinquish the processor until some condition is true. A condition variable must always be associated with a mutex to avoid a race condition created by one thread preparing to wait and another thread which may signal the condition before the first thread actually waits on it resulting in a deadlock. The thread will be perpetually waiting for a signal that is never sent. Any mutex can be used, there is no explicit link between the mutex and the condition variable.

Man pages of functions used in conjunction with the condition variable:

    Creating/Destroying:
        pthread_cond_init
        pthread_cond_t cond = PTHREAD_COND_INITIALIZER;
        pthread_cond_destroy
    Waiting on condition:
        pthread_cond_wait - unlocks the mutex and waits for the condition variable cond to be signaled.
        pthread_cond_timedwait - place limit on how long it will block.
    Waking thread based on condition:
        pthread_cond_signal - restarts one of the threads that are waiting on the condition variable cond.
        pthread_cond_broadcast - wake up all threads blocked by the specified condition variable.
 
Note that functionCount1() was halted while count was between the values COUNT_HALT1 and COUNT_HALT2. The only thing that has been ensures is that functionCount2 will increment the count between the values COUNT_HALT1 and COUNT_HALT2. Everything else is random.

The logic conditions (the "if" and "while" statements) must be chosen to insure that the "signal" is executed if the "wait" is ever processed. Poor software logic can also lead to a deadlock condition.

Note: Race conditions abound with this example because count is used as the condition and can't be locked in the while statement without causing deadlock.         
        
 ******************************************************************************/
#if 0
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

pthread_mutex_t count_mutex     = PTHREAD_MUTEX_INITIALIZER;
pthread_cond_t  condition_var   = PTHREAD_COND_INITIALIZER;

void *functionCount1();
void *functionCount2();
int  count = 0;
#define COUNT_DONE  10
#define COUNT_HALT1  3
#define COUNT_HALT2  6

main()
{
   pthread_t thread1, thread2;

   pthread_create( &thread1, NULL, &functionCount1, NULL);
   pthread_create( &thread2, NULL, &functionCount2, NULL);

   pthread_join( thread1, NULL);
   pthread_join( thread2, NULL);

   printf("Final count: %d\n",count);

   exit(EXIT_SUCCESS);
}

// Write numbers 1-3 and 8-10 as permitted by functionCount2()

void *functionCount1()
{
int i;
   for(i = 0; 1; i++)
   {
      // Lock mutex and then wait for signal to relase mutex
      pthread_mutex_lock( &count_mutex );

       printf("thread1 var %i\n", i);

      // Wait while functionCount2() operates on count
      // mutex unlocked if condition varialbe in functionCount2() signaled.
      pthread_cond_wait( &condition_var, &count_mutex );
      count++;
      printf("Counter value functionCount1: %d\n",count);

      pthread_mutex_unlock( &count_mutex );

      if(count >= COUNT_DONE) return(NULL);
    }
}

// Write numbers 4-7

void *functionCount2()
{
int i;
    for(i = 0; 1; i++)
    {
       pthread_mutex_lock( &count_mutex ); 
       /* ezt nem ertem, mert: 
       pthread_mutex_lock() - acquire a lock on the specified mutex variable. 
       If the mutex is already locked by another thread, 
       this call will block the calling thread until the mutex is unlocked.  
       
       a pthread_con_wait->mutex feloldja a lock-ra vonatkozo varakozast unlocked-ra
       pfffff: ott a for vegen az unlock, ezert most tok veletlenszeru, hogy mikor kapja el a thread1 az a count_mutex unlockot
       
       
       */

       printf("thread2 forog %i\n", i);


       if( count < COUNT_HALT1 || count > COUNT_HALT2 )
       {
          // Condition of if statement has been met. 
          // Signal to free waiting thread by freeing the mutex.
          // Note: functionCount1() is now permitted to modify "count".
          pthread_cond_signal( &condition_var );
       }
       else
       {
          count++;
          printf("Counter value functionCount2: %d\n",count);
       }

       pthread_mutex_unlock( &count_mutex );

       if(count >= COUNT_DONE) return(NULL);
    }

}
#endif


/*******************************************************************************
Thread Scheduling:

When this option is enabled, each thread may have its own scheduling properties. Scheduling attributes may be specified:

    during thread creation
    by dynamically by changing the attributes of a thread already created
    by defining the effect of a mutex on the thread's scheduling when creating a mutex
    by dynamically changing the scheduling of a thread during synchronization operations.

The threads library provides default values that are sufficient for most cases. 
 ******************************************************************************/



/*******************************************************************************
Thread Pitfalls:

    Race conditions: While the code may appear on the screen in the order you wish the code to execute, threads are scheduled by the operating system and are executed at random. It cannot be assumed that threads are executed in the order they are created. They may also execute at different speeds. When threads are executing (racing to complete) they may give unexpected results (race condition). Mutexes and joins must be utilized to achieve a predictable execution order and outcome.

    Thread safe code: The threaded routines must call functions which are "thread safe". This means that there are no static or global variables which other threads may clobber or read assuming single threaded operation. If static or global variables are used then mutexes must be applied or the functions must be re-written to avoid the use of these variables. In C, local variables are dynamically allocated on the stack. Therefore, any function that does not use static data or other shared resources is thread-safe. Thread-unsafe functions may be used by only one thread at a time in a program and the uniqueness of the thread must be ensured. Many non-reentrant functions return a pointer to static data. This can be avoided by returning dynamically allocated data or using caller-provided storage. An example of a non-thread safe function is strtok which is also not re-entrant. The "thread safe" version is the re-entrant version strtok_r.

    Mutex Deadlock: This condition occurs when a mutex is applied but then not "unlocked". This causes program execution to halt indefinitely. It can also be caused by poor application of mutexes or joins. Be careful when applying two or more mutexes to a section of code. If the first pthread_mutex_lock is applied and the second pthread_mutex_lock fails due to another thread applying a mutex, the first mutex may eventually lock all other threads from accessing data including the thread which holds the second mutex. The threads may wait indefinitely for the resource to become free causing a deadlock. 
    
    Condition Variable Deadlock: The logic conditions (the "if" and "while" statements) must be chosen to insure that the "signal" is executed if the "wait" is ever processed. 
 ******************************************************************************/
#if 0
Mutex Deadlock:  It is best to test and if failure occurs, free the resources and stall before retrying.
..
pthread_mutex_lock(&mutex_1);
while ( pthread_mutex_trylock(&mutex_2) )  /* Test if already locked   */
{
   pthread_mutex_unlock(&mutex_1);  /* Free resource to avoid deadlock */
   ...
   /* stall here   */
   ...
   pthread_mutex_lock(&mutex_1);
}
count++;
pthread_mutex_unlock(&mutex_1);
pthread_mutex_unlock(&mutex_2);
...
#endif
     
#if 0
Mutex Deadlock: The order of applying the mutex is also important. The following code segment illustrates a potential for deadlock: 
void *function1()
{
   ...
   pthread_mutex_lock(&lock1);           // Execution step 1
   pthread_mutex_lock(&lock2);           // Execution step 3 DEADLOCK!!!
   ...
   ...
   pthread_mutex_lock(&lock2);
   pthread_mutex_lock(&lock1);
   ...
} 

void *function2()
{
   ...
   pthread_mutex_lock(&lock2);           // Execution step 2
   pthread_mutex_lock(&lock1);
   ...
   ...
   pthread_mutex_lock(&lock1);
   pthread_mutex_lock(&lock2);
   ...
} 

main()
{
   ...
   pthread_create(&thread1, NULL, function1, NULL);
   pthread_create(&thread2, NULL, function2, NULL);
   ...
}
#endif     







