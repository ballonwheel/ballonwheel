

ez az "stm32_b_g431b_ESC1" projekt egy proba from scretch HAL hasznalataval.
ADCzzen be vmit
nem fordul, hianyzik neki az stdint.h meg valszeg az ADC def-ek....nem fogl ezzel a projekttel most..


chatGPT3.5
1, 
To compile STM32G4 code on a Debian-based command-line interface (CLI) on a Raspberry Pi, 
you can use the GNU ARM Embedded Toolchain, also known as GCC ARM. Here's how you can set it up and compile your code:

    Install the ARM Toolchain:
    Run the following command in your terminal to install the ARM toolchain:

    bash

sudo apt-get update
sudo apt-get install gcc-arm-none-eabi

2, Write your STM32G4 Code:
Write your STM32G4 code in a C file (e.g., main.c). Make sure to include necessary STM32G4 libraries and header files.

lasd main.c

ez is kell bele:
void Error_Handler(void)
{
    // Stay here and optionally flash an LED or output error info
    while(1);
}



3, Compile the Code:
You can compile your code using the ARM GCC compiler. Navigate to the directory containing your code and run:

bash

arm-none-eabi-gcc -mcpu=cortex-m4 -mthumb -Wall -o main.elf main.c

Adjust the compiler flags (-mcpu, -mthumb, -Wall) and output filename (main.elf) as needed.


lasd a makefile-t


4, install stm cube g4 - HAL miatt:
cd /home/imre
mkdir stm32
cd stm32
git clone --recursive https://github.com/STMicroelectronics/STM32CubeG4.git
git pull
git submodule update --init --recursive

vagy inkabb igy:
 # motor control swDevKit needs cubeg4 v1.5.2
 # cloned into ../../stm32 and symlinked
 # imre@raspberrypiZ2w3:~/stm32 $ git clone --recursive  --depth 1 --branch v1.5.2 https://github.com/STMicroelectronics/STM32CubeG4.git



verzio csekk:
imre@raspberrypiZ2w3:~/ballonwheel/stm32_b_g431b_ESC1 $ cat /home/imre/stm32/STM32CubeG4/Release_Notes.html 
STM32CubeMX V5.2.0




5, a template fajlt atnevezni, 
lehet a projekt konyvtarban is es modositani
mv /home/imre/stm32/STM32CubeG4/Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_conf_template.h stm32g4xx_hal_conf.h


imre@raspberrypiZ2w3:~/ballonwheel/stm32_b_g431b_ESC1 $ nano /home/imre/stm32/STM32CubeG4/Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_conf.h 


#define HAL_MODULE_ENABLED
#define HAL_ADC_MODULE_ENABLED
//#define HAL_COMP_MODULE_ENABLED
//#define HAL_CORDIC_MODULE_ENABLED
#define HAL_CORTEX_MODULE_ENABLED
//#define HAL_CRC_MODULE_ENABLED
//#define HAL_CRYP_MODULE_ENABLED
//#define HAL_DAC_MODULE_ENABLED
#define HAL_DMA_MODULE_ENABLED
//#define HAL_EXTI_MODULE_ENABLED
//#define HAL_FDCAN_MODULE_ENABLED
#define HAL_FLASH_MODULE_ENABLED
//#define HAL_FMAC_MODULE_ENABLED
#define HAL_GPIO_MODULE_ENABLED
//#define HAL_HRTIM_MODULE_ENABLED
//#define HAL_IRDA_MODULE_ENABLED
//#define HAL_IWDG_MODULE_ENABLED
//#define HAL_I2C_MODULE_ENABLED
//#define HAL_I2S_MODULE_ENABLED
//#define HAL_LPTIM_MODULE_ENABLED
//#define HAL_NAND_MODULE_ENABLED
//#define HAL_NOR_MODULE_ENABLED
//#define HAL_OPAMP_MODULE_ENABLED
//#define HAL_PCD_MODULE_ENABLED
#define HAL_PWR_MODULE_ENABLED
//#define HAL_QSPI_MODULE_ENABLED
#define HAL_RCC_MODULE_ENABLED
//#define HAL_RNG_MODULE_ENABLED
//#define HAL_RTC_MODULE_ENABLED
//#define HAL_SAI_MODULE_ENABLED
//#define HAL_SMARTCARD_MODULE_ENABLED
//#define HAL_SMBUS_MODULE_ENABLED
//#define HAL_SPI_MODULE_ENABLED
//#define HAL_SRAM_MODULE_ENABLED
#define HAL_TIM_MODULE_ENABLED
//#define HAL_UART_MODULE_ENABLED
//#define HAL_USART_MODULE_ENABLED
//#define HAL_WWDG_MODULE_ENABLED




6, CMSIS is kell -- makefile-ba forditashoz
-I/home/imre/stm32/STM32CubeG4/Drivers/CMSIS/Device/ST/STM32G4xx/Include

es a cmsis- c fajl is kell

HAL_SRCS = $(STM32_CUBE_G4_PATH)/Drivers/STM32G4xx_HAL_Driver/Src/*.c
CMSIS_SRCS = $(STM32_CUBE_G4_PATH)/Drivers/CMSIS/Device/ST/STM32G4xx/Source/Templates/system_stm32g4xx.c




7, edit cmsis
imre@raspberrypiZ2w3:~/ballonwheel/stm32_b_g431b_ESC1 $ nano /home/imre/stm32/STM32CubeG4/Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g4xx.h 
 

#if !defined (STM32G431xx) && !defined (STM32G441xx) && !defined (STM32G471xx) && \
    !defined (STM32G473xx) && !defined (STM32G474xx) && !defined (STM32G484xx) && \
    !defined (STM32GBK1CB) && !defined (STM32G491xx) && !defined (STM32G4A1xx)
  #define STM32G431xx    /*!< STM32G431xx Devices */
  /* #define STM32G441xx */   /*!< STM32G441xx Devices */
  /* #define STM32G471xx */   /*!< STM32G471xx Devices */
  /* #define STM32G473xx */   /*!< STM32G473xx Devices */
  /* #define STM32G483xx */   /*!< STM32G483xx Devices */
  /* #define STM32G474xx */   /*!< STM32G474xx Devices */
  /* #define STM32G484xx */   /*!< STM32G484xx Devices */
  /* #define STM32G491xx */   /*!< STM32G491xx Devices */
  /* #define STM32G4A1xx */   /*!< STM32G4A1xx Devices */
  /* #define STM32GBK1CB */   /*!< STM32GBK1CB Devices */
#endif






8, Convert to Binary: 
ez bekerult a makefile-ba
After compilation, you can convert the ELF file to a binary file suitable for flashing to your STM32G4 microcontroller. Use the objcopy utility:

bash

    arm-none-eabi-objcopy -O binary main.elf main.bin

    Flash the Binary:
    Finally, you can use tools like ST-Link, OpenOCD, or any other flash programming tool to flash the generated binary (main.bin) to your STM32G4 microcontroller.

Ensure you have the necessary permissions to access the programming tool and the STM32 microcontroller.

By following these steps, you can compile your STM32G4 code on a Debian CLI on your Raspberry Pi using the ARM GCC toolchain.





 sudo apt-get install stlink-tools
https://github.com/stlink-org/stlink
Support for STM32G4 (#822)
Release v1.6.1
Release date: 2020-06-01
 sudo apt-get install stlink-tools
Selecting previously unselected package stlink-tools.
Preparing to unpack .../stlink-tools_1.6.1+ds-3_arm64.deb ...

imre@raspberrypiZ2w3:~/ballonwheel/stm32_b_g431b_ESC1 $ sudo st-info --probe
Found 1 stlink programmers
 serial:     303637334646353435303534383937303837313834363135
 hla-serial: "\x30\x36\x37\x33\x46\x46\x35\x34\x35\x30\x35\x34\x38\x39\x37\x30\x38\x37\x31\x38\x34\x36\x31\x35"
 flash:      131072 (pagesize: 2048)
 sram:       32768
 chipid:     0x0468
 descr:      G4 Category-2


imre@raspberrypiZ2w3:~/ballonwheel/stm32_b_g431b_ESC1 $ sudo st-flash --debug read option_bytes_dump.bin 0x1FFF7800 4
.
.
imre@raspberrypiZ2w3:~/ballonwheel/stm32_b_g431b_ESC1 $ sudo hexdump option_bytes_dump.bin 
0000000 f8aa fbef                              
0000004


jojo, de hova write-oljam a codot?
mindenhol 0x80000000 van
https://www.st.com/resource/en/user_manual/um2237-stm32cubeprogrammer-software-description-stmicroelectronics.pdf
33.oldal, de kulon nem irja
On many STM32 families, the boot address in the internal flash is 0x8000000. This address is remapped to address 0x00000000 by boot mode mechanism
https://community.st.com/t5/stm32-mcus/faq-stm32-boot-process/ta-p/49358





9, stm motor control lib










