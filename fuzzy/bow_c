




Nagyon jó!
A **"golyó a keréken"** típusú rendszert **fuzzy szabályozóval** is remekül lehet irányítani.
A fuzzy előnye itt az, hogy nem kell pontos matematikai modellt írni, hanem **nyelvi szabályokkal** irányítjuk ("ha a golyó jobbra gurul, döntsd balra" stb.).

**Így nézne ki nagy vonalakban a fuzzy szabályozó modell:**

---

**Állapotváltozók (bemenetek a fuzzy rendszerbe):**

* $e = x_{\text{cél}} - x_{\text{aktuális}}$ : a golyó helyzetének hibája (hol van most a golyó a célhoz képest).
* $\dot{e}$ : a hiba deriváltja (milyen gyorsan változik a helyzeti hiba, vagyis a sebesség).

**Kimenet (fuzzy szabályozó kimenete):**

* $u$ : a kerék elforgatásának mértéke (pl. motorvezérlés).

---

**Fuzzy halmazok (példa):**

* **Hibára (e):** {Negative Large (NL), Negative Small (NS), Zero (Z), Positive Small (PS), Positive Large (PL)}
* **Sebességre ($\dot{e}$):** ugyanígy: {NL, NS, Z, PS, PL}
* **Vezérlésre (u):** {Turn Strong Left, Turn Left, No Action, Turn Right, Turn Strong Right}

---

**Példa fuzzy szabályok:**

* **IF** hiba = Positive Large **AND** sebesség = Positive Small **THEN** Turn Strong Left
* **IF** hiba = Zero **AND** sebesség = Zero **THEN** No Action
* **IF** hiba = Negative Small **AND** sebesség = Negative Large **THEN** Turn Right
* stb.

(Összesen 5x5 = 25 szabály szokott kelleni ilyen egyszerű példáknál.)

---

**Áramlás:**

1. Megméred az aktuális golyó pozícióját és mozgását.
2. Fuzzifikálod (melyik halmazba esnek a mért értékek).
3. Lefuttatod a szabályokat (melyik szabály mennyire aktiválódik).
4. Összeolvasztod (defuzzifikáció) az eredményeket egy konkrét motorparancsá.

---

**Ha szeretnéd**, konkrét példával is kidolgozom neked, akár:

* Egy kis táblázatot a szabálybázishoz,

* Egy egyszerű grafikonos modellezést,

* Vagy akár MATLAB/Simulink blokkot is (nagyon népszerű fuzzyval).

**Kérdés:**
Szeretnéd, hogy konkrétan csináljak egy példát? Mondjuk: egy teljes 5x5 szabálytáblát?
(csak 1 perc és csinálok!)










Nagyszerű!
Akkor csinálok egy **konkrét példát** egy **5×5-ös fuzzy szabálytáblával** a *"golyó a keréken"* problémára.

---

### Állapotváltozók:

* **Hiba (e):**

  * NL = Nagy Negatív
  * NS = Kis Negatív
  * Z = Nulla
  * PS = Kis Pozitív
  * PL = Nagy Pozitív

* **Sebesség ($\dot{e}$):**
  (ugyanazok a kategóriák)

* **Kimenet (vezérlés, u):**

  * SL = Erős Balra Fordítás
  * L = Balra Fordítás
  * N = Semleges (nem csinál semmit)
  * R = Jobbra Fordítás
  * SR = Erős Jobbra Fordítás

---

### Fuzzy szabálytábla:

|               | NL (sebeség) | NS | Z | PS | PL |
| ------------- | ------------ | -- | - | -- | -- |
| **NL (hiba)** | SL           | SL | L | N  | N  |
| **NS**        | SL           | L  | L | N  | R  |
| **Z**         | L            | L  | N | R  | R  |
| **PS**        | N            | R  | R | SR | SR |
| **PL**        | N            | N  | R | SR | SR |

---

### Hogyan értelmezd:

* Ha **hiba nagy negatív** és **sebesség nagy negatív**, akkor **erősen balra** kell fordítani (hogy visszahozd a golyót középre).
* Ha **hiba nulla** és **sebesség nulla**, akkor **semmit sem kell csinálni**.
* Ha **hiba nagy pozitív** és **sebesség pozitív**, akkor **erősen jobbra** kell fordítani (hogy visszatartsd a golyót).

---

### Nagyon egyszerű nyelvi példák:

* **Ha a golyó messze balra van és még gyorsul is balra → erősen jobbra kell dönteni a kereket.**
* **Ha a golyó kicsit balra van és megállt → csak finoman kell visszahúzni.**
* **Ha középen van → hagyd úgy.**

---

**Következő lépés lehet:**

* Megrajzolni a fuzzy tagfüggvényeket (háromszög vagy trapéz alakú halmazokat),
* Megcsinálni a fuzzifikációt/defuzzifikációt (pl. centroid módszerrel).

---

Ha akarod, még:

* Lerajzolom a teljes fuzzy rendszer blokkvázlatát,

* Vagy akár adok egy kis pszeudokódot is, hogy hogyan lehet ezt programozni!

**Szeretnéd, hogy tovább menjünk egy kis blokkdiagrammal is?**
(szépen, áttekinthetően)






















Nagyon jó, megyünk tovább!
Akkor csinálok neked **C nyelvű példát** a "golyó a keréken" fuzzy szabályozóra.

Egyszerű, érthető kódrészlet lesz — most a lényegre koncentrálunk:

* fuzzifikáció (nagyon egyszerűsítve),
* szabályok,
* defuzzifikáció.

---

### Íme a **fuzzy szabályozó C nyelven**:

```c
#include <stdio.h>

// Fuzzy halmaz kategóriák
typedef enum {NL, NS, Z, PS, PL} FuzzySet;

// Fuzzifikációs határértékek
#define LARGE_ERROR 1.0
#define SMALL_ERROR 0.3
#define ZERO_TOLERANCE 0.05

// Egyszerű függvény: bemenetből fuzzy kategóriát csinál
FuzzySet fuzzify(double x) {
    if (x < -LARGE_ERROR) return NL;
    else if (x < -SMALL_ERROR) return NS;
    else if (x > LARGE_ERROR) return PL;
    else if (x > SMALL_ERROR) return PS;
    else return Z;
}

// Fuzzy szabálybázis (kimeneti mátrix)
const int rule_table[5][5] = {
    { -2, -2, -1,  0,  0 },   // Hiba: NL
    { -2, -1, -1,  0,  1 },   // NS
    { -1, -1,  0,  1,  1 },   // Z
    {  0,  1,  1,  2,  2 },   // PS
    {  0,  0,  1,  2,  2 }    // PL
};

// Defuzzifikáció: szabályból konkrét kimeneti érték (pl. motor vezérlés)
double defuzzify(int fuzzy_output) {
    switch (fuzzy_output) {
        case -2: return -1.0;  // Erős balra
        case -1: return -0.5;  // Balra
        case  0: return  0.0;  // Semleges
        case  1: return  0.5;  // Jobbra
        case  2: return  1.0;  // Erős jobbra
        default: return 0.0;
    }
}

// Fuzzy szabályozó főfüggvény
double fuzzy_controller(double position_error, double velocity_error) {
    FuzzySet e = fuzzify(position_error);
    FuzzySet de = fuzzify(velocity_error);

    int fuzzy_output = rule_table[e][de];

    return defuzzify(fuzzy_output);
}

// Tesztelés
int main() {
    double pos_err = 0.8;   // aktuális hiba (pozitív irányba)
    double vel_err = -0.1;  // aktuális sebesség hiba (negatív irányba)

    double control_signal = fuzzy_controller(pos_err, vel_err);

    printf("Control output: %.2f\n", control_signal);

    return 0;
}
```

---

### Rövid magyarázat:

* **fuzzify()**: kategorizálja a bemeneteket (pozícióhiba, sebességhiba),
* **rule\_table\[]\[]**: a korábban megbeszélt szabályok mátrixa (egyszerű számokkal),
* **defuzzify()**: szabály-kimenetből egy numerikus vezérlő parancs lesz (pl. motor forgatási irány és erősség),
* **fuzzy\_controller()**: a komplett fuzzy logika,
* **main()**: egyszerű teszt példa, megmutatja az eredményt.

---

**Ha szeretnéd**, tovább tudom fejleszteni:

* valós idejű szabályzáshoz (pl. szenzorból bemenet, motorra kimenet),
* bonyolultabb fuzzifikációval (nem csak 1-1 határ, hanem fokozatos átmenetekkel),
* PID tuninggal kombinálva.

---

**Kérdés:**
Szeretnéd, hogy tovább lépjünk például egy *valódi motorvezérlés szimulációra* ezzel a fuzzy szabályozóval?
(csak szólni kell!)















