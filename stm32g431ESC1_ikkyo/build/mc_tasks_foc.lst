ARM GAS  /tmp/ccwX0oqx.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"mc_tasks_foc.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.FOC_Clear,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.weak	FOC_Clear
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	FOC_Clear:
  28              	.LVL0:
  29              	.LFB1469:
  30              		.file 1 "Src/mc_tasks_foc.c"
   1:Src/mc_tasks_foc.c **** 
   2:Src/mc_tasks_foc.c **** /**
   3:Src/mc_tasks_foc.c ****   ******************************************************************************
   4:Src/mc_tasks_foc.c ****   * @file    mc_tasks.c
   5:Src/mc_tasks_foc.c ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/mc_tasks_foc.c ****   * @brief   This file implements tasks definition
   7:Src/mc_tasks_foc.c ****   *
   8:Src/mc_tasks_foc.c ****   ******************************************************************************
   9:Src/mc_tasks_foc.c ****   * @attention
  10:Src/mc_tasks_foc.c ****   *
  11:Src/mc_tasks_foc.c ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  12:Src/mc_tasks_foc.c ****   * All rights reserved.</center></h2>
  13:Src/mc_tasks_foc.c ****   *
  14:Src/mc_tasks_foc.c ****   * This software component is licensed by ST under Ultimate Liberty license
  15:Src/mc_tasks_foc.c ****   * SLA0044, the "License"; You may not use this file except in compliance with
  16:Src/mc_tasks_foc.c ****   * the License. You may obtain a copy of the License at:
  17:Src/mc_tasks_foc.c ****   *                             www.st.com/SLA0044
  18:Src/mc_tasks_foc.c ****   *
  19:Src/mc_tasks_foc.c ****   ******************************************************************************
  20:Src/mc_tasks_foc.c ****   */
  21:Src/mc_tasks_foc.c **** 
  22:Src/mc_tasks_foc.c **** /* Includes ------------------------------------------------------------------*/
  23:Src/mc_tasks_foc.c **** //cstat -MISRAC2012-Rule-21.1
  24:Src/mc_tasks_foc.c **** #include "main.h"
  25:Src/mc_tasks_foc.c **** //cstat +MISRAC2012-Rule-21.1
  26:Src/mc_tasks_foc.c **** #include "mc_type.h"
  27:Src/mc_tasks_foc.c **** #include "mc_math.h"
  28:Src/mc_tasks_foc.c **** #include "motorcontrol.h"
ARM GAS  /tmp/ccwX0oqx.s 			page 2


  29:Src/mc_tasks_foc.c **** #include "regular_conversion_manager.h"
  30:Src/mc_tasks_foc.c **** #include "mc_interface.h"
  31:Src/mc_tasks_foc.c **** #include "digital_output.h"
  32:Src/mc_tasks_foc.c **** #include "pwm_common.h"
  33:Src/mc_tasks_foc.c **** #include "mc_tasks.h"
  34:Src/mc_tasks_foc.c **** #include "parameters_conversion.h"
  35:Src/mc_tasks_foc.c **** #include "mcp_config.h"
  36:Src/mc_tasks_foc.c **** #include "mc_app_hooks.h"
  37:Src/mc_tasks_foc.c **** 
  38:Src/mc_tasks_foc.c **** /* USER CODE BEGIN Includes */
  39:Src/mc_tasks_foc.c **** 
  40:Src/mc_tasks_foc.c **** /* USER CODE END Includes */
  41:Src/mc_tasks_foc.c **** 
  42:Src/mc_tasks_foc.c **** /* USER CODE BEGIN Private define */
  43:Src/mc_tasks_foc.c **** /* Private define ------------------------------------------------------------*/
  44:Src/mc_tasks_foc.c **** 
  45:Src/mc_tasks_foc.c **** /* USER CODE END Private define */
  46:Src/mc_tasks_foc.c **** 
  47:Src/mc_tasks_foc.c **** /* Private variables----------------------------------------------------------*/
  48:Src/mc_tasks_foc.c **** 
  49:Src/mc_tasks_foc.c **** static volatile uint16_t hBootCapDelayCounterM1 = ((uint16_t)0);
  50:Src/mc_tasks_foc.c **** static volatile uint16_t hStopPermanencyCounterM1 = ((uint16_t)0);
  51:Src/mc_tasks_foc.c **** 
  52:Src/mc_tasks_foc.c **** #define M1_CHARGE_BOOT_CAP_TICKS          (((uint16_t)SYS_TICK_FREQUENCY * (uint16_t)10) / 1000U)
  53:Src/mc_tasks_foc.c **** #define M1_CHARGE_BOOT_CAP_DUTY_CYCLES ((uint32_t)0.000\
  54:Src/mc_tasks_foc.c ****                                       * ((uint32_t)PWM_PERIOD_CYCLES / 2U))
  55:Src/mc_tasks_foc.c **** #define M2_CHARGE_BOOT_CAP_TICKS         (((uint16_t)SYS_TICK_FREQUENCY * (uint16_t)10) / 1000U)
  56:Src/mc_tasks_foc.c **** #define M2_CHARGE_BOOT_CAP_DUTY_CYCLES ((uint32_t)0\
  57:Src/mc_tasks_foc.c ****                                       * ((uint32_t)PWM_PERIOD_CYCLES2 / 2U))
  58:Src/mc_tasks_foc.c **** 
  59:Src/mc_tasks_foc.c **** /* USER CODE BEGIN Private Variables */
  60:Src/mc_tasks_foc.c **** 
  61:Src/mc_tasks_foc.c **** /* USER CODE END Private Variables */
  62:Src/mc_tasks_foc.c **** 
  63:Src/mc_tasks_foc.c **** /* Private functions ---------------------------------------------------------*/
  64:Src/mc_tasks_foc.c **** void TSK_MediumFrequencyTaskM1(void);
  65:Src/mc_tasks_foc.c **** void FOC_InitAdditionalMethods(uint8_t bMotor);
  66:Src/mc_tasks_foc.c **** void FOC_CalcCurrRef(uint8_t bMotor);
  67:Src/mc_tasks_foc.c **** void TSK_MF_StopProcessing(uint8_t motor);
  68:Src/mc_tasks_foc.c **** 
  69:Src/mc_tasks_foc.c **** MCI_Handle_t *GetMCI(uint8_t bMotor);
  70:Src/mc_tasks_foc.c **** static uint16_t FOC_CurrControllerM1(void);
  71:Src/mc_tasks_foc.c **** 
  72:Src/mc_tasks_foc.c **** void TSK_SafetyTask_PWMOFF(uint8_t motor);
  73:Src/mc_tasks_foc.c **** 
  74:Src/mc_tasks_foc.c **** /* USER CODE BEGIN Private Functions */
  75:Src/mc_tasks_foc.c **** 
  76:Src/mc_tasks_foc.c **** /* USER CODE END Private Functions */
  77:Src/mc_tasks_foc.c **** /**
  78:Src/mc_tasks_foc.c ****   * @brief  It initializes the whole MC core according to user defined
  79:Src/mc_tasks_foc.c ****   *         parameters.
  80:Src/mc_tasks_foc.c ****   */
  81:Src/mc_tasks_foc.c **** __weak void FOC_Init(void)
  82:Src/mc_tasks_foc.c **** {
  83:Src/mc_tasks_foc.c **** 
  84:Src/mc_tasks_foc.c ****   /* USER CODE BEGIN MCboot 0 */
  85:Src/mc_tasks_foc.c **** 
ARM GAS  /tmp/ccwX0oqx.s 			page 3


  86:Src/mc_tasks_foc.c ****   /* USER CODE END MCboot 0 */
  87:Src/mc_tasks_foc.c **** 
  88:Src/mc_tasks_foc.c ****     /**********************************************************/
  89:Src/mc_tasks_foc.c ****     /*    PWM and current sensing component initialization    */
  90:Src/mc_tasks_foc.c ****     /**********************************************************/
  91:Src/mc_tasks_foc.c ****     pwmcHandle[M1] = &PWM_Handle_M1._Super;
  92:Src/mc_tasks_foc.c ****     R3_2_Init(&PWM_Handle_M1);
  93:Src/mc_tasks_foc.c **** 
  94:Src/mc_tasks_foc.c ****     /* USER CODE BEGIN MCboot 1 */
  95:Src/mc_tasks_foc.c **** 
  96:Src/mc_tasks_foc.c ****     /* USER CODE END MCboot 1 */
  97:Src/mc_tasks_foc.c **** 
  98:Src/mc_tasks_foc.c ****     /**************************************/
  99:Src/mc_tasks_foc.c ****     /*    Start timers synchronously      */
 100:Src/mc_tasks_foc.c ****     /**************************************/
 101:Src/mc_tasks_foc.c ****     startTimers();
 102:Src/mc_tasks_foc.c **** 
 103:Src/mc_tasks_foc.c ****     /******************************************************/
 104:Src/mc_tasks_foc.c ****     /*   PID component initialization: speed regulation   */
 105:Src/mc_tasks_foc.c ****     /******************************************************/
 106:Src/mc_tasks_foc.c ****     PID_HandleInit(&PIDSpeedHandle_M1);
 107:Src/mc_tasks_foc.c **** 
 108:Src/mc_tasks_foc.c ****     /******************************************************/
 109:Src/mc_tasks_foc.c ****     /*   Main speed sensor component initialization       */
 110:Src/mc_tasks_foc.c ****     /******************************************************/
 111:Src/mc_tasks_foc.c ****     STO_PLL_Init (&STO_PLL_M1);
 112:Src/mc_tasks_foc.c **** 
 113:Src/mc_tasks_foc.c ****     /******************************************************/
 114:Src/mc_tasks_foc.c ****     /*   Speed & torque component initialization          */
 115:Src/mc_tasks_foc.c ****     /******************************************************/
 116:Src/mc_tasks_foc.c ****     STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 117:Src/mc_tasks_foc.c **** 
 118:Src/mc_tasks_foc.c ****     /**************************************/
 119:Src/mc_tasks_foc.c ****     /*   Rev-up component initialization  */
 120:Src/mc_tasks_foc.c ****     /**************************************/
 121:Src/mc_tasks_foc.c ****     RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 122:Src/mc_tasks_foc.c **** 
 123:Src/mc_tasks_foc.c ****     /********************************************************/
 124:Src/mc_tasks_foc.c ****     /*   PID component initialization: current regulation   */
 125:Src/mc_tasks_foc.c ****     /********************************************************/
 126:Src/mc_tasks_foc.c ****     PID_HandleInit(&PIDIqHandle_M1);
 127:Src/mc_tasks_foc.c ****     PID_HandleInit(&PIDIdHandle_M1);
 128:Src/mc_tasks_foc.c **** 
 129:Src/mc_tasks_foc.c ****     /*************************************************/
 130:Src/mc_tasks_foc.c ****     /*   Power measurement component initialization  */
 131:Src/mc_tasks_foc.c ****     /*************************************************/
 132:Src/mc_tasks_foc.c ****     pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 133:Src/mc_tasks_foc.c ****     pMPM[M1]->pFOCVars = &FOCVars[M1];
 134:Src/mc_tasks_foc.c **** 
 135:Src/mc_tasks_foc.c ****     pREMNG[M1] = &RampExtMngrHFParamsM1;
 136:Src/mc_tasks_foc.c ****     REMNG_Init(pREMNG[M1]);
 137:Src/mc_tasks_foc.c **** 
 138:Src/mc_tasks_foc.c ****     FOC_Clear(M1);
 139:Src/mc_tasks_foc.c ****     FOCVars[M1].bDriveInput = EXTERNAL;
 140:Src/mc_tasks_foc.c ****     FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 141:Src/mc_tasks_foc.c ****     FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 142:Src/mc_tasks_foc.c **** 
ARM GAS  /tmp/ccwX0oqx.s 			page 4


 143:Src/mc_tasks_foc.c ****     MCI_ExecSpeedRamp(&Mci[M1],
 144:Src/mc_tasks_foc.c ****     STC_GetMecSpeedRefUnitDefault(pSTC[M1]),0); /* First command to STC */
 145:Src/mc_tasks_foc.c **** 
 146:Src/mc_tasks_foc.c ****     /* USER CODE BEGIN MCboot 2 */
 147:Src/mc_tasks_foc.c **** 
 148:Src/mc_tasks_foc.c ****     /* USER CODE END MCboot 2 */
 149:Src/mc_tasks_foc.c **** }
 150:Src/mc_tasks_foc.c **** 
 151:Src/mc_tasks_foc.c **** /**
 152:Src/mc_tasks_foc.c ****  * @brief Performs stop process and update the state machine.This function
 153:Src/mc_tasks_foc.c ****  *        shall be called only during medium frequency task.
 154:Src/mc_tasks_foc.c ****  */
 155:Src/mc_tasks_foc.c **** void TSK_MF_StopProcessing(uint8_t motor)
 156:Src/mc_tasks_foc.c **** {
 157:Src/mc_tasks_foc.c ****     R3_2_SwitchOffPWM(pwmcHandle[motor]);
 158:Src/mc_tasks_foc.c **** 
 159:Src/mc_tasks_foc.c ****   FOC_Clear(motor);
 160:Src/mc_tasks_foc.c **** 
 161:Src/mc_tasks_foc.c ****   TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 162:Src/mc_tasks_foc.c ****   Mci[motor].State = STOP;
 163:Src/mc_tasks_foc.c **** }
 164:Src/mc_tasks_foc.c **** 
 165:Src/mc_tasks_foc.c **** /**
 166:Src/mc_tasks_foc.c ****   * @brief Executes medium frequency periodic Motor Control tasks
 167:Src/mc_tasks_foc.c ****   *
 168:Src/mc_tasks_foc.c ****   * This function performs some of the control duties on Motor 1 according to the
 169:Src/mc_tasks_foc.c ****   * present state of its state machine. In particular, duties requiring a periodic
 170:Src/mc_tasks_foc.c ****   * execution at a medium frequency rate (such as the speed controller for instance)
 171:Src/mc_tasks_foc.c ****   * are executed here.
 172:Src/mc_tasks_foc.c ****   */
 173:Src/mc_tasks_foc.c **** __weak void TSK_MediumFrequencyTaskM1(void)
 174:Src/mc_tasks_foc.c **** {
 175:Src/mc_tasks_foc.c ****   /* USER CODE BEGIN MediumFrequencyTask M1 0 */
 176:Src/mc_tasks_foc.c **** 
 177:Src/mc_tasks_foc.c ****   /* USER CODE END MediumFrequencyTask M1 0 */
 178:Src/mc_tasks_foc.c **** 
 179:Src/mc_tasks_foc.c ****   int16_t wAux = 0;
 180:Src/mc_tasks_foc.c ****   bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 181:Src/mc_tasks_foc.c ****   PQD_CalcElMotorPower(pMPM[M1]);
 182:Src/mc_tasks_foc.c **** 
 183:Src/mc_tasks_foc.c ****   if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 184:Src/mc_tasks_foc.c ****   {
 185:Src/mc_tasks_foc.c ****     if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 186:Src/mc_tasks_foc.c ****     {
 187:Src/mc_tasks_foc.c ****       switch (Mci[M1].State)
 188:Src/mc_tasks_foc.c ****       {
 189:Src/mc_tasks_foc.c **** 
 190:Src/mc_tasks_foc.c ****         case IDLE:
 191:Src/mc_tasks_foc.c ****         {
 192:Src/mc_tasks_foc.c ****           if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand
 193:Src/mc_tasks_foc.c ****           {
 194:Src/mc_tasks_foc.c ****               RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 195:Src/mc_tasks_foc.c ****             if (pwmcHandle[M1]->offsetCalibStatus == false)
 196:Src/mc_tasks_foc.c ****             {
 197:Src/mc_tasks_foc.c ****               (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 198:Src/mc_tasks_foc.c ****               Mci[M1].State = OFFSET_CALIB;
 199:Src/mc_tasks_foc.c ****             }
ARM GAS  /tmp/ccwX0oqx.s 			page 5


 200:Src/mc_tasks_foc.c ****             else
 201:Src/mc_tasks_foc.c ****             {
 202:Src/mc_tasks_foc.c ****               /* Calibration already done. Enables only TIM channels */
 203:Src/mc_tasks_foc.c ****               pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 204:Src/mc_tasks_foc.c ****               (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 205:Src/mc_tasks_foc.c ****               R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 206:Src/mc_tasks_foc.c ****               TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 207:Src/mc_tasks_foc.c ****               Mci[M1].State = CHARGE_BOOT_CAP;
 208:Src/mc_tasks_foc.c ****             }
 209:Src/mc_tasks_foc.c ****           }
 210:Src/mc_tasks_foc.c ****           else
 211:Src/mc_tasks_foc.c ****           {
 212:Src/mc_tasks_foc.c ****             /* Nothing to be done, FW stays in IDLE state */
 213:Src/mc_tasks_foc.c ****           }
 214:Src/mc_tasks_foc.c ****           break;
 215:Src/mc_tasks_foc.c ****         }
 216:Src/mc_tasks_foc.c **** 
 217:Src/mc_tasks_foc.c ****         case OFFSET_CALIB:
 218:Src/mc_tasks_foc.c ****         {
 219:Src/mc_tasks_foc.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 220:Src/mc_tasks_foc.c ****           {
 221:Src/mc_tasks_foc.c ****             TSK_MF_StopProcessing(M1);
 222:Src/mc_tasks_foc.c ****           }
 223:Src/mc_tasks_foc.c ****           else
 224:Src/mc_tasks_foc.c ****           {
 225:Src/mc_tasks_foc.c ****             if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 226:Src/mc_tasks_foc.c ****             {
 227:Src/mc_tasks_foc.c ****               if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 228:Src/mc_tasks_foc.c ****               {
 229:Src/mc_tasks_foc.c ****                 FOC_Clear(M1);
 230:Src/mc_tasks_foc.c ****                 Mci[M1].DirectCommand = MCI_NO_COMMAND;
 231:Src/mc_tasks_foc.c ****                 Mci[M1].State = IDLE;
 232:Src/mc_tasks_foc.c ****               }
 233:Src/mc_tasks_foc.c ****               else
 234:Src/mc_tasks_foc.c ****               {
 235:Src/mc_tasks_foc.c ****                 R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 236:Src/mc_tasks_foc.c ****                 TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 237:Src/mc_tasks_foc.c ****                 Mci[M1].State = CHARGE_BOOT_CAP;
 238:Src/mc_tasks_foc.c ****               }
 239:Src/mc_tasks_foc.c ****             }
 240:Src/mc_tasks_foc.c ****             else
 241:Src/mc_tasks_foc.c ****             {
 242:Src/mc_tasks_foc.c ****               /* Nothing to be done, FW waits for offset calibration to finish */
 243:Src/mc_tasks_foc.c ****             }
 244:Src/mc_tasks_foc.c ****           }
 245:Src/mc_tasks_foc.c ****           break;
 246:Src/mc_tasks_foc.c ****         }
 247:Src/mc_tasks_foc.c **** 
 248:Src/mc_tasks_foc.c ****         case CHARGE_BOOT_CAP:
 249:Src/mc_tasks_foc.c ****         {
 250:Src/mc_tasks_foc.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 251:Src/mc_tasks_foc.c ****           {
 252:Src/mc_tasks_foc.c ****             TSK_MF_StopProcessing(M1);
 253:Src/mc_tasks_foc.c ****           }
 254:Src/mc_tasks_foc.c ****           else
 255:Src/mc_tasks_foc.c ****           {
 256:Src/mc_tasks_foc.c ****             if (TSK_ChargeBootCapDelayHasElapsedM1())
ARM GAS  /tmp/ccwX0oqx.s 			page 6


 257:Src/mc_tasks_foc.c ****             {
 258:Src/mc_tasks_foc.c ****               R3_2_SwitchOffPWM(pwmcHandle[M1]);
 259:Src/mc_tasks_foc.c ****               FOCVars[M1].bDriveInput = EXTERNAL;
 260:Src/mc_tasks_foc.c ****               STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 261:Src/mc_tasks_foc.c **** 
 262:Src/mc_tasks_foc.c ****               STO_PLL_Clear(&STO_PLL_M1);
 263:Src/mc_tasks_foc.c **** 
 264:Src/mc_tasks_foc.c ****               FOC_Clear( M1 );
 265:Src/mc_tasks_foc.c **** 
 266:Src/mc_tasks_foc.c ****                 Mci[M1].State = START;
 267:Src/mc_tasks_foc.c ****               PWMC_SwitchOnPWM(pwmcHandle[M1]);
 268:Src/mc_tasks_foc.c ****             }
 269:Src/mc_tasks_foc.c ****             else
 270:Src/mc_tasks_foc.c ****             {
 271:Src/mc_tasks_foc.c ****               /* Nothing to be done, FW waits for bootstrap capacitor to charge */
 272:Src/mc_tasks_foc.c ****             }
 273:Src/mc_tasks_foc.c ****           }
 274:Src/mc_tasks_foc.c ****           break;
 275:Src/mc_tasks_foc.c ****         }
 276:Src/mc_tasks_foc.c **** 
 277:Src/mc_tasks_foc.c ****         case START:
 278:Src/mc_tasks_foc.c ****         {
 279:Src/mc_tasks_foc.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 280:Src/mc_tasks_foc.c ****           {
 281:Src/mc_tasks_foc.c ****             TSK_MF_StopProcessing(M1);
 282:Src/mc_tasks_foc.c ****           }
 283:Src/mc_tasks_foc.c ****           else
 284:Src/mc_tasks_foc.c ****           {
 285:Src/mc_tasks_foc.c ****             /* Mechanical speed as imposed by the Virtual Speed Sensor during the Rev Up phase. */
 286:Src/mc_tasks_foc.c ****             int16_t hForcedMecSpeedUnit;
 287:Src/mc_tasks_foc.c ****             qd_t IqdRef;
 288:Src/mc_tasks_foc.c ****             bool ObserverConverged;
 289:Src/mc_tasks_foc.c **** 
 290:Src/mc_tasks_foc.c ****             /* Execute the Rev Up procedure */
 291:Src/mc_tasks_foc.c ****             if(! RUC_Exec(&RevUpControlM1))
 292:Src/mc_tasks_foc.c ****             {
 293:Src/mc_tasks_foc.c ****             /* The time allowed for the startup sequence has expired */
 294:Src/mc_tasks_foc.c ****               MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 295:Src/mc_tasks_foc.c ****             }
 296:Src/mc_tasks_foc.c ****             else
 297:Src/mc_tasks_foc.c ****             {
 298:Src/mc_tasks_foc.c ****               /* Execute the torque open loop current start-up ramp:
 299:Src/mc_tasks_foc.c ****                * Compute the Iq reference current as configured in the Rev Up sequence */
 300:Src/mc_tasks_foc.c ****               IqdRef.q = STC_CalcTorqueReference(pSTC[M1]);
 301:Src/mc_tasks_foc.c ****               IqdRef.d = FOCVars[M1].UserIdref;
 302:Src/mc_tasks_foc.c ****               /* Iqd reference current used by the High Frequency Loop to generate the PWM output *
 303:Src/mc_tasks_foc.c ****               FOCVars[M1].Iqdref = IqdRef;
 304:Src/mc_tasks_foc.c ****            }
 305:Src/mc_tasks_foc.c **** 
 306:Src/mc_tasks_foc.c ****             (void)VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 307:Src/mc_tasks_foc.c **** 
 308:Src/mc_tasks_foc.c ****             /* Check that startup stage where the observer has to be used has been reached */
 309:Src/mc_tasks_foc.c ****             if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 310:Src/mc_tasks_foc.c ****             {
 311:Src/mc_tasks_foc.c ****               ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 312:Src/mc_tasks_foc.c ****               STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 313:Src/mc_tasks_foc.c **** 
ARM GAS  /tmp/ccwX0oqx.s 			page 7


 314:Src/mc_tasks_foc.c ****               (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 315:Src/mc_tasks_foc.c ****             }
 316:Src/mc_tasks_foc.c ****             else
 317:Src/mc_tasks_foc.c ****             {
 318:Src/mc_tasks_foc.c ****               ObserverConverged = false;
 319:Src/mc_tasks_foc.c ****             }
 320:Src/mc_tasks_foc.c ****             if (ObserverConverged)
 321:Src/mc_tasks_foc.c ****             {
 322:Src/mc_tasks_foc.c ****               qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Sup
 323:Src/mc_tasks_foc.c **** 
 324:Src/mc_tasks_foc.c ****               /* Start switch over ramp. This ramp will transition from the revup to the closed loo
 325:Src/mc_tasks_foc.c ****               REMNG_Init(pREMNG[M1]);
 326:Src/mc_tasks_foc.c ****               (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 327:Src/mc_tasks_foc.c ****               (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 328:Src/mc_tasks_foc.c **** 
 329:Src/mc_tasks_foc.c ****               Mci[M1].State = SWITCH_OVER;
 330:Src/mc_tasks_foc.c ****             }
 331:Src/mc_tasks_foc.c ****           }
 332:Src/mc_tasks_foc.c ****           break;
 333:Src/mc_tasks_foc.c ****         }
 334:Src/mc_tasks_foc.c **** 
 335:Src/mc_tasks_foc.c ****         case SWITCH_OVER:
 336:Src/mc_tasks_foc.c ****         {
 337:Src/mc_tasks_foc.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 338:Src/mc_tasks_foc.c ****           {
 339:Src/mc_tasks_foc.c ****             TSK_MF_StopProcessing(M1);
 340:Src/mc_tasks_foc.c ****           }
 341:Src/mc_tasks_foc.c ****           else
 342:Src/mc_tasks_foc.c ****           {
 343:Src/mc_tasks_foc.c ****             bool LoopClosed;
 344:Src/mc_tasks_foc.c ****             int16_t hForcedMecSpeedUnit;
 345:Src/mc_tasks_foc.c **** 
 346:Src/mc_tasks_foc.c ****             if (! RUC_Exec(&RevUpControlM1))
 347:Src/mc_tasks_foc.c ****             {
 348:Src/mc_tasks_foc.c ****               /* The time allowed for the startup sequence has expired */
 349:Src/mc_tasks_foc.c ****               MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 350:Src/mc_tasks_foc.c ****             }
 351:Src/mc_tasks_foc.c ****             else
 352:Src/mc_tasks_foc.c ****             {
 353:Src/mc_tasks_foc.c ****               /* Compute the virtual speed and positions of the rotor.
 354:Src/mc_tasks_foc.c ****                  The function returns true if the virtual speed is in the reliability range */
 355:Src/mc_tasks_foc.c ****               LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 356:Src/mc_tasks_foc.c ****               /* Check if the transition ramp has completed. */
 357:Src/mc_tasks_foc.c ****               bool tempBool;
 358:Src/mc_tasks_foc.c ****               tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 359:Src/mc_tasks_foc.c ****               LoopClosed = LoopClosed || tempBool;
 360:Src/mc_tasks_foc.c **** 
 361:Src/mc_tasks_foc.c ****               /* If any of the above conditions is true, the loop is considered closed.
 362:Src/mc_tasks_foc.c ****                  The state machine transitions to the RUN state */
 363:Src/mc_tasks_foc.c ****               if (true ==  LoopClosed)
 364:Src/mc_tasks_foc.c ****               {
 365:Src/mc_tasks_foc.c **** #if PID_SPEED_INTEGRAL_INIT_DIV == 0
 366:Src/mc_tasks_foc.c ****                 PID_SetIntegralTerm(&PIDSpeedHandle_M1, 0);
 367:Src/mc_tasks_foc.c **** #else
 368:Src/mc_tasks_foc.c ****                 PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 369:Src/mc_tasks_foc.c ****                                     (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PI
 370:Src/mc_tasks_foc.c ****                                     / PID_SPEED_INTEGRAL_INIT_DIV));
ARM GAS  /tmp/ccwX0oqx.s 			page 8


 371:Src/mc_tasks_foc.c **** #endif
 372:Src/mc_tasks_foc.c ****                 /* USER CODE BEGIN MediumFrequencyTask M1 1 */
 373:Src/mc_tasks_foc.c **** 
 374:Src/mc_tasks_foc.c ****                 /* USER CODE END MediumFrequencyTask M1 1 */
 375:Src/mc_tasks_foc.c ****                 STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /* Observer has converged */
 376:Src/mc_tasks_foc.c ****                 FOC_InitAdditionalMethods(M1);
 377:Src/mc_tasks_foc.c ****                 FOC_CalcCurrRef(M1);
 378:Src/mc_tasks_foc.c ****                 STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to cur
 379:Src/mc_tasks_foc.c ****                 MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the sp
 380:Src/mc_tasks_foc.c ****                 Mci[M1].State = RUN;
 381:Src/mc_tasks_foc.c ****               }
 382:Src/mc_tasks_foc.c ****             }
 383:Src/mc_tasks_foc.c ****           }
 384:Src/mc_tasks_foc.c ****           break;
 385:Src/mc_tasks_foc.c ****         }
 386:Src/mc_tasks_foc.c **** 
 387:Src/mc_tasks_foc.c ****         case RUN:
 388:Src/mc_tasks_foc.c ****         {
 389:Src/mc_tasks_foc.c ****           if (MCI_STOP == Mci[M1].DirectCommand)
 390:Src/mc_tasks_foc.c ****           {
 391:Src/mc_tasks_foc.c ****             TSK_MF_StopProcessing(M1);
 392:Src/mc_tasks_foc.c ****           }
 393:Src/mc_tasks_foc.c ****           else
 394:Src/mc_tasks_foc.c ****           {
 395:Src/mc_tasks_foc.c ****             /* USER CODE BEGIN MediumFrequencyTask M1 2 */
 396:Src/mc_tasks_foc.c **** 
 397:Src/mc_tasks_foc.c ****             /* USER CODE END MediumFrequencyTask M1 2 */
 398:Src/mc_tasks_foc.c **** 
 399:Src/mc_tasks_foc.c ****             MCI_ExecBufferedCommands(&Mci[M1]);
 400:Src/mc_tasks_foc.c **** 
 401:Src/mc_tasks_foc.c ****               FOC_CalcCurrRef(M1);
 402:Src/mc_tasks_foc.c ****               if(!IsSpeedReliable)
 403:Src/mc_tasks_foc.c ****               {
 404:Src/mc_tasks_foc.c ****                 MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 405:Src/mc_tasks_foc.c ****               }
 406:Src/mc_tasks_foc.c ****               else
 407:Src/mc_tasks_foc.c ****               {
 408:Src/mc_tasks_foc.c ****                 /* Nothing to do */
 409:Src/mc_tasks_foc.c ****               }
 410:Src/mc_tasks_foc.c ****           }
 411:Src/mc_tasks_foc.c ****           break;
 412:Src/mc_tasks_foc.c ****         }
 413:Src/mc_tasks_foc.c **** 
 414:Src/mc_tasks_foc.c ****         case STOP:
 415:Src/mc_tasks_foc.c ****         {
 416:Src/mc_tasks_foc.c ****           if (TSK_StopPermanencyTimeHasElapsedM1())
 417:Src/mc_tasks_foc.c ****           {
 418:Src/mc_tasks_foc.c **** 
 419:Src/mc_tasks_foc.c ****             STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);    /* Sensor-less */
 420:Src/mc_tasks_foc.c ****             VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 421:Src/mc_tasks_foc.c ****             /* USER CODE BEGIN MediumFrequencyTask M1 5 */
 422:Src/mc_tasks_foc.c **** 
 423:Src/mc_tasks_foc.c ****             /* USER CODE END MediumFrequencyTask M1 5 */
 424:Src/mc_tasks_foc.c ****             Mci[M1].DirectCommand = MCI_NO_COMMAND;
 425:Src/mc_tasks_foc.c ****             Mci[M1].State = IDLE;
 426:Src/mc_tasks_foc.c ****           }
 427:Src/mc_tasks_foc.c ****           else
ARM GAS  /tmp/ccwX0oqx.s 			page 9


 428:Src/mc_tasks_foc.c ****           {
 429:Src/mc_tasks_foc.c ****             /* Nothing to do, FW waits for to stop */
 430:Src/mc_tasks_foc.c ****           }
 431:Src/mc_tasks_foc.c ****           break;
 432:Src/mc_tasks_foc.c ****         }
 433:Src/mc_tasks_foc.c **** 
 434:Src/mc_tasks_foc.c ****         case FAULT_OVER:
 435:Src/mc_tasks_foc.c ****         {
 436:Src/mc_tasks_foc.c ****           if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 437:Src/mc_tasks_foc.c ****           {
 438:Src/mc_tasks_foc.c ****             Mci[M1].DirectCommand = MCI_NO_COMMAND;
 439:Src/mc_tasks_foc.c ****             Mci[M1].State = IDLE;
 440:Src/mc_tasks_foc.c ****           }
 441:Src/mc_tasks_foc.c ****           else
 442:Src/mc_tasks_foc.c ****           {
 443:Src/mc_tasks_foc.c ****             /* Nothing to do, FW stays in FAULT_OVER state until acknowledgement */
 444:Src/mc_tasks_foc.c ****           }
 445:Src/mc_tasks_foc.c ****           break;
 446:Src/mc_tasks_foc.c ****         }
 447:Src/mc_tasks_foc.c **** 
 448:Src/mc_tasks_foc.c ****         case FAULT_NOW:
 449:Src/mc_tasks_foc.c ****         {
 450:Src/mc_tasks_foc.c ****           Mci[M1].State = FAULT_OVER;
 451:Src/mc_tasks_foc.c ****           break;
 452:Src/mc_tasks_foc.c ****         }
 453:Src/mc_tasks_foc.c **** 
 454:Src/mc_tasks_foc.c ****         default:
 455:Src/mc_tasks_foc.c ****           break;
 456:Src/mc_tasks_foc.c ****        }
 457:Src/mc_tasks_foc.c ****     }
 458:Src/mc_tasks_foc.c ****     else
 459:Src/mc_tasks_foc.c ****     {
 460:Src/mc_tasks_foc.c ****       Mci[M1].State = FAULT_OVER;
 461:Src/mc_tasks_foc.c ****     }
 462:Src/mc_tasks_foc.c ****   }
 463:Src/mc_tasks_foc.c ****   else
 464:Src/mc_tasks_foc.c ****   {
 465:Src/mc_tasks_foc.c ****     Mci[M1].State = FAULT_NOW;
 466:Src/mc_tasks_foc.c ****   }
 467:Src/mc_tasks_foc.c ****   /* USER CODE BEGIN MediumFrequencyTask M1 6 */
 468:Src/mc_tasks_foc.c **** 
 469:Src/mc_tasks_foc.c ****   /* USER CODE END MediumFrequencyTask M1 6 */
 470:Src/mc_tasks_foc.c **** }
 471:Src/mc_tasks_foc.c **** 
 472:Src/mc_tasks_foc.c **** /**
 473:Src/mc_tasks_foc.c ****   * @brief  It re-initializes the current and voltage variables. Moreover
 474:Src/mc_tasks_foc.c ****   *         it clears qd currents PI controllers, voltage sensor and SpeednTorque
 475:Src/mc_tasks_foc.c ****   *         controller. It must be called before each motor restart.
 476:Src/mc_tasks_foc.c ****   *         It does not clear speed sensor.
 477:Src/mc_tasks_foc.c ****   * @param  bMotor related motor it can be M1 or M2.
 478:Src/mc_tasks_foc.c ****   */
 479:Src/mc_tasks_foc.c **** __weak void FOC_Clear(uint8_t bMotor)
 480:Src/mc_tasks_foc.c **** {
  31              		.loc 1 480 1 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccwX0oqx.s 			page 10


 481:Src/mc_tasks_foc.c ****   /* USER CODE BEGIN FOC_Clear 0 */
 482:Src/mc_tasks_foc.c **** 
 483:Src/mc_tasks_foc.c ****   /* USER CODE END FOC_Clear 0 */
 484:Src/mc_tasks_foc.c **** 
 485:Src/mc_tasks_foc.c ****   ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  35              		.loc 1 485 3 view .LVU1
 486:Src/mc_tasks_foc.c ****   qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  36              		.loc 1 486 3 view .LVU2
 487:Src/mc_tasks_foc.c ****   alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};
  37              		.loc 1 487 3 view .LVU3
 488:Src/mc_tasks_foc.c **** 
 489:Src/mc_tasks_foc.c ****   FOCVars[bMotor].Iab = NULL_ab;
  38              		.loc 1 489 3 view .LVU4
 480:Src/mc_tasks_foc.c ****   /* USER CODE BEGIN FOC_Clear 0 */
  39              		.loc 1 480 1 is_stmt 0 view .LVU5
  40 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
  41              	.LCFI0:
  42              		.cfi_def_cfa_offset 24
  43              		.cfi_offset 3, -24
  44              		.cfi_offset 4, -20
  45              		.cfi_offset 5, -16
  46              		.cfi_offset 6, -12
  47              		.cfi_offset 7, -8
  48              		.cfi_offset 14, -4
  49 0002 00EBC003 		add	r3, r0, r0, lsl #3
  50              		.loc 1 489 23 view .LVU6
  51 0006 184A     		ldr	r2, .L4
  52 0008 00EB4303 		add	r3, r0, r3, lsl #1
  53 000c 5B00     		lsls	r3, r3, #1
  54 000e 0024     		movs	r4, #0
  55 0010 9F18     		adds	r7, r3, r2
 490:Src/mc_tasks_foc.c ****   FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
  56              		.loc 1 490 3 is_stmt 1 view .LVU7
 491:Src/mc_tasks_foc.c ****   FOCVars[bMotor].Iqd = NULL_qd;
  57              		.loc 1 491 23 is_stmt 0 view .LVU8
  58 0012 03F10C06 		add	r6, r3, #12
 489:Src/mc_tasks_foc.c ****   FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
  59              		.loc 1 489 23 view .LVU9
  60 0016 9C50     		str	r4, [r3, r2]	@ unaligned
 480:Src/mc_tasks_foc.c ****   /* USER CODE BEGIN FOC_Clear 0 */
  61              		.loc 1 480 1 view .LVU10
  62 0018 0546     		mov	r5, r0
 492:Src/mc_tasks_foc.c ****     FOCVars[bMotor].Iqdref = NULL_qd;
 493:Src/mc_tasks_foc.c ****   FOCVars[bMotor].hTeref = (int16_t)0;
 494:Src/mc_tasks_foc.c ****   FOCVars[bMotor].Vqd = NULL_qd;
  63              		.loc 1 494 23 view .LVU11
  64 001a 03F11601 		add	r1, r3, #22
 493:Src/mc_tasks_foc.c ****   FOCVars[bMotor].Vqd = NULL_qd;
  65              		.loc 1 493 26 view .LVU12
  66 001e 2623     		movs	r3, #38
 489:Src/mc_tasks_foc.c ****   FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
  67              		.loc 1 489 23 view .LVU13
  68 0020 7C60     		str	r4, [r7, #4]	@ unaligned
 491:Src/mc_tasks_foc.c ****     FOCVars[bMotor].Iqdref = NULL_qd;
  69              		.loc 1 491 3 is_stmt 1 view .LVU14
 493:Src/mc_tasks_foc.c ****   FOCVars[bMotor].Vqd = NULL_qd;
  70              		.loc 1 493 26 is_stmt 0 view .LVU15
ARM GAS  /tmp/ccwX0oqx.s 			page 11


  71 0022 03FB0523 		mla	r3, r3, r5, r2
 491:Src/mc_tasks_foc.c ****     FOCVars[bMotor].Iqdref = NULL_qd;
  72              		.loc 1 491 23 view .LVU16
  73 0026 B450     		str	r4, [r6, r2]	@ unaligned
  74 0028 B718     		adds	r7, r6, r2
 492:Src/mc_tasks_foc.c ****   FOCVars[bMotor].hTeref = (int16_t)0;
  75              		.loc 1 492 5 is_stmt 1 view .LVU17
 495:Src/mc_tasks_foc.c ****   FOCVars[bMotor].Valphabeta = NULL_alphabeta;
 496:Src/mc_tasks_foc.c ****   FOCVars[bMotor].hElAngle = (int16_t)0;
 497:Src/mc_tasks_foc.c **** 
 498:Src/mc_tasks_foc.c ****   PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
  76              		.loc 1 498 3 is_stmt 0 view .LVU18
  77 002a 1048     		ldr	r0, .L4+4
  78              	.LVL1:
 491:Src/mc_tasks_foc.c ****     FOCVars[bMotor].Iqdref = NULL_qd;
  79              		.loc 1 491 23 view .LVU19
  80 002c 7C60     		str	r4, [r7, #4]	@ unaligned
 493:Src/mc_tasks_foc.c ****   FOCVars[bMotor].Vqd = NULL_qd;
  81              		.loc 1 493 3 is_stmt 1 view .LVU20
 494:Src/mc_tasks_foc.c ****   FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  82              		.loc 1 494 23 is_stmt 0 view .LVU21
  83 002e 8E18     		adds	r6, r1, r2
 493:Src/mc_tasks_foc.c ****   FOCVars[bMotor].Vqd = NULL_qd;
  84              		.loc 1 493 26 view .LVU22
  85 0030 DC83     		strh	r4, [r3, #30]	@ movhi
 494:Src/mc_tasks_foc.c ****   FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  86              		.loc 1 494 3 is_stmt 1 view .LVU23
 495:Src/mc_tasks_foc.c ****   FOCVars[bMotor].hElAngle = (int16_t)0;
  87              		.loc 1 495 3 view .LVU24
  88              		.loc 1 498 3 is_stmt 0 view .LVU25
  89 0032 50F82500 		ldr	r0, [r0, r5, lsl #2]
 494:Src/mc_tasks_foc.c ****   FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  90              		.loc 1 494 23 view .LVU26
  91 0036 8C50     		str	r4, [r1, r2]	@ unaligned
  92              		.loc 1 498 3 view .LVU27
  93 0038 2146     		mov	r1, r4
 494:Src/mc_tasks_foc.c ****   FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  94              		.loc 1 494 23 view .LVU28
  95 003a 7460     		str	r4, [r6, #4]	@ unaligned
 496:Src/mc_tasks_foc.c **** 
  96              		.loc 1 496 3 is_stmt 1 view .LVU29
 496:Src/mc_tasks_foc.c **** 
  97              		.loc 1 496 28 is_stmt 0 view .LVU30
  98 003c 1C84     		strh	r4, [r3, #32]	@ movhi
  99              		.loc 1 498 3 is_stmt 1 view .LVU31
 100 003e FFF7FEFF 		bl	PID_SetIntegralTerm
 101              	.LVL2:
 499:Src/mc_tasks_foc.c ****   PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 102              		.loc 1 499 3 view .LVU32
 103 0042 0B4B     		ldr	r3, .L4+8
 104 0044 2146     		mov	r1, r4
 105 0046 53F82500 		ldr	r0, [r3, r5, lsl #2]
 106 004a FFF7FEFF 		bl	PID_SetIntegralTerm
 107              	.LVL3:
 500:Src/mc_tasks_foc.c **** 
 501:Src/mc_tasks_foc.c ****   STC_Clear(pSTC[bMotor]);
 108              		.loc 1 501 3 view .LVU33
ARM GAS  /tmp/ccwX0oqx.s 			page 12


 109 004e 094B     		ldr	r3, .L4+12
 110 0050 53F82500 		ldr	r0, [r3, r5, lsl #2]
 111 0054 FFF7FEFF 		bl	STC_Clear
 112              	.LVL4:
 502:Src/mc_tasks_foc.c **** 
 503:Src/mc_tasks_foc.c ****   PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 113              		.loc 1 503 3 view .LVU34
 114 0058 074B     		ldr	r3, .L4+16
 115 005a 53F82500 		ldr	r0, [r3, r5, lsl #2]
 504:Src/mc_tasks_foc.c **** 
 505:Src/mc_tasks_foc.c ****   /* USER CODE BEGIN FOC_Clear 1 */
 506:Src/mc_tasks_foc.c **** 
 507:Src/mc_tasks_foc.c ****   /* USER CODE END FOC_Clear 1 */
 508:Src/mc_tasks_foc.c **** }
 116              		.loc 1 508 1 is_stmt 0 view .LVU35
 117 005e BDE8F840 		pop	{r3, r4, r5, r6, r7, lr}
 118              	.LCFI1:
 119              		.cfi_restore 14
 120              		.cfi_restore 7
 121              		.cfi_restore 6
 122              		.cfi_restore 5
 123              		.cfi_restore 4
 124              		.cfi_restore 3
 125              		.cfi_def_cfa_offset 0
 503:Src/mc_tasks_foc.c **** 
 126              		.loc 1 503 3 view .LVU36
 127 0062 FFF7FEBF 		b	PWMC_SwitchOffPWM
 128              	.LVL5:
 129              	.L5:
 130 0066 00BF     		.align	2
 131              	.L4:
 132 0068 00000000 		.word	FOCVars
 133 006c 00000000 		.word	pPIDIq
 134 0070 00000000 		.word	pPIDId
 135 0074 00000000 		.word	pSTC
 136 0078 00000000 		.word	pwmcHandle
 137              		.cfi_endproc
 138              	.LFE1469:
 140              		.section	.text.FOC_Init,"ax",%progbits
 141              		.align	1
 142              		.p2align 2,,3
 143              		.weak	FOC_Init
 144              		.syntax unified
 145              		.thumb
 146              		.thumb_func
 147              		.fpu fpv4-sp-d16
 149              	FOC_Init:
 150              	.LFB1466:
  82:Src/mc_tasks_foc.c **** 
 151              		.loc 1 82 1 is_stmt 1 view -0
 152              		.cfi_startproc
 153              		@ args = 0, pretend = 0, frame = 8
 154              		@ frame_needed = 0, uses_anonymous_args = 0
  91:Src/mc_tasks_foc.c ****     R3_2_Init(&PWM_Handle_M1);
 155              		.loc 1 91 5 view .LVU38
  82:Src/mc_tasks_foc.c **** 
 156              		.loc 1 82 1 is_stmt 0 view .LVU39
ARM GAS  /tmp/ccwX0oqx.s 			page 13


 157 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 158              	.LCFI2:
 159              		.cfi_def_cfa_offset 24
 160              		.cfi_offset 4, -24
 161              		.cfi_offset 5, -20
 162              		.cfi_offset 6, -16
 163              		.cfi_offset 7, -12
 164              		.cfi_offset 8, -8
 165              		.cfi_offset 14, -4
  91:Src/mc_tasks_foc.c ****     R3_2_Init(&PWM_Handle_M1);
 166              		.loc 1 91 20 view .LVU40
 167 0004 274E     		ldr	r6, .L8
 106:Src/mc_tasks_foc.c **** 
 168              		.loc 1 106 5 view .LVU41
 169 0006 284F     		ldr	r7, .L8+4
  91:Src/mc_tasks_foc.c ****     R3_2_Init(&PWM_Handle_M1);
 170              		.loc 1 91 20 view .LVU42
 171 0008 2848     		ldr	r0, .L8+8
 111:Src/mc_tasks_foc.c **** 
 172              		.loc 1 111 5 view .LVU43
 173 000a DFF8D480 		ldr	r8, .L8+60
 116:Src/mc_tasks_foc.c **** 
 174              		.loc 1 116 5 view .LVU44
 175 000e 284D     		ldr	r5, .L8+12
  91:Src/mc_tasks_foc.c ****     R3_2_Init(&PWM_Handle_M1);
 176              		.loc 1 91 20 view .LVU45
 177 0010 3060     		str	r0, [r6]
  92:Src/mc_tasks_foc.c **** 
 178              		.loc 1 92 5 is_stmt 1 view .LVU46
  82:Src/mc_tasks_foc.c **** 
 179              		.loc 1 82 1 is_stmt 0 view .LVU47
 180 0012 84B0     		sub	sp, sp, #16
 181              	.LCFI3:
 182              		.cfi_def_cfa_offset 40
  92:Src/mc_tasks_foc.c **** 
 183              		.loc 1 92 5 view .LVU48
 184 0014 FFF7FEFF 		bl	R3_2_Init
 185              	.LVL6:
 101:Src/mc_tasks_foc.c **** 
 186              		.loc 1 101 5 is_stmt 1 view .LVU49
 187 0018 FFF7FEFF 		bl	startTimers
 188              	.LVL7:
 106:Src/mc_tasks_foc.c **** 
 189              		.loc 1 106 5 view .LVU50
 190 001c 3846     		mov	r0, r7
 191 001e FFF7FEFF 		bl	PID_HandleInit
 192              	.LVL8:
 111:Src/mc_tasks_foc.c **** 
 193              		.loc 1 111 5 view .LVU51
 194 0022 4046     		mov	r0, r8
 195 0024 FFF7FEFF 		bl	STO_PLL_Init
 196              	.LVL9:
 116:Src/mc_tasks_foc.c **** 
 197              		.loc 1 116 5 view .LVU52
 198 0028 4246     		mov	r2, r8
 199 002a 3946     		mov	r1, r7
 200 002c 2868     		ldr	r0, [r5]
ARM GAS  /tmp/ccwX0oqx.s 			page 14


 133:Src/mc_tasks_foc.c **** 
 201              		.loc 1 133 24 is_stmt 0 view .LVU53
 202 002e 214C     		ldr	r4, .L8+16
 116:Src/mc_tasks_foc.c **** 
 203              		.loc 1 116 5 view .LVU54
 204 0030 FFF7FEFF 		bl	STC_Init
 205              	.LVL10:
 121:Src/mc_tasks_foc.c **** 
 206              		.loc 1 121 5 is_stmt 1 view .LVU55
 207 0034 3368     		ldr	r3, [r6]
 208 0036 2968     		ldr	r1, [r5]
 209 0038 1F4A     		ldr	r2, .L8+20
 210 003a 0093     		str	r3, [sp]
 211 003c 1F48     		ldr	r0, .L8+24
 212 003e 204B     		ldr	r3, .L8+28
 213 0040 FFF7FEFF 		bl	RUC_Init
 214              	.LVL11:
 126:Src/mc_tasks_foc.c ****     PID_HandleInit(&PIDIdHandle_M1);
 215              		.loc 1 126 5 view .LVU56
 216 0044 1F48     		ldr	r0, .L8+32
 217 0046 FFF7FEFF 		bl	PID_HandleInit
 218              	.LVL12:
 127:Src/mc_tasks_foc.c **** 
 219              		.loc 1 127 5 view .LVU57
 220 004a 1F48     		ldr	r0, .L8+36
 221 004c FFF7FEFF 		bl	PID_HandleInit
 222              	.LVL13:
 132:Src/mc_tasks_foc.c ****     pMPM[M1]->pFOCVars = &FOCVars[M1];
 223              		.loc 1 132 5 view .LVU58
 132:Src/mc_tasks_foc.c ****     pMPM[M1]->pFOCVars = &FOCVars[M1];
 224              		.loc 1 132 9 is_stmt 0 view .LVU59
 225 0050 1E4A     		ldr	r2, .L8+40
 135:Src/mc_tasks_foc.c ****     REMNG_Init(pREMNG[M1]);
 226              		.loc 1 135 16 view .LVU60
 227 0052 1F4B     		ldr	r3, .L8+44
 132:Src/mc_tasks_foc.c ****     pMPM[M1]->pFOCVars = &FOCVars[M1];
 228              		.loc 1 132 9 view .LVU61
 229 0054 1268     		ldr	r2, [r2]
 132:Src/mc_tasks_foc.c ****     pMPM[M1]->pFOCVars = &FOCVars[M1];
 230              		.loc 1 132 20 view .LVU62
 231 0056 1F48     		ldr	r0, .L8+48
 135:Src/mc_tasks_foc.c ****     REMNG_Init(pREMNG[M1]);
 232              		.loc 1 135 16 view .LVU63
 233 0058 1F49     		ldr	r1, .L8+52
 133:Src/mc_tasks_foc.c **** 
 234              		.loc 1 133 24 view .LVU64
 235 005a C2E90240 		strd	r4, r0, [r2, #8]
 135:Src/mc_tasks_foc.c ****     REMNG_Init(pREMNG[M1]);
 236              		.loc 1 135 5 is_stmt 1 view .LVU65
 136:Src/mc_tasks_foc.c **** 
 237              		.loc 1 136 5 is_stmt 0 view .LVU66
 238 005e 1846     		mov	r0, r3
 135:Src/mc_tasks_foc.c ****     REMNG_Init(pREMNG[M1]);
 239              		.loc 1 135 16 view .LVU67
 240 0060 0B60     		str	r3, [r1]
 136:Src/mc_tasks_foc.c **** 
 241              		.loc 1 136 5 is_stmt 1 view .LVU68
ARM GAS  /tmp/ccwX0oqx.s 			page 15


 242 0062 FFF7FEFF 		bl	REMNG_Init
 243              	.LVL14:
 138:Src/mc_tasks_foc.c ****     FOCVars[M1].bDriveInput = EXTERNAL;
 244              		.loc 1 138 5 view .LVU69
 245 0066 0020     		movs	r0, #0
 246 0068 FFF7FEFF 		bl	FOC_Clear
 247              	.LVL15:
 139:Src/mc_tasks_foc.c ****     FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 248              		.loc 1 139 5 view .LVU70
 139:Src/mc_tasks_foc.c ****     FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 249              		.loc 1 139 29 is_stmt 0 view .LVU71
 250 006c 0123     		movs	r3, #1
 140:Src/mc_tasks_foc.c ****     FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 251              		.loc 1 140 26 view .LVU72
 252 006e 2868     		ldr	r0, [r5]
 139:Src/mc_tasks_foc.c ****     FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 253              		.loc 1 139 29 view .LVU73
 254 0070 84F82430 		strb	r3, [r4, #36]
 140:Src/mc_tasks_foc.c ****     FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 255              		.loc 1 140 5 is_stmt 1 view .LVU74
 140:Src/mc_tasks_foc.c ****     FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 256              		.loc 1 140 26 is_stmt 0 view .LVU75
 257 0074 FFF7FEFF 		bl	STC_GetDefaultIqdref
 258              	.LVL16:
 259 0078 C0F30F42 		ubfx	r2, r0, #16, #16
 260 007c 0346     		mov	r3, r0
 141:Src/mc_tasks_foc.c **** 
 261              		.loc 1 141 29 view .LVU76
 262 007e 2868     		ldr	r0, [r5]
 140:Src/mc_tasks_foc.c ****     FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 263              		.loc 1 140 26 view .LVU77
 264 0080 6282     		strh	r2, [r4, #18]	@ movhi
 141:Src/mc_tasks_foc.c **** 
 265              		.loc 1 141 5 is_stmt 1 view .LVU78
 140:Src/mc_tasks_foc.c ****     FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 266              		.loc 1 140 26 is_stmt 0 view .LVU79
 267 0082 2382     		strh	r3, [r4, #16]	@ movhi
 141:Src/mc_tasks_foc.c **** 
 268              		.loc 1 141 29 view .LVU80
 269 0084 FFF7FEFF 		bl	STC_GetDefaultIqdref
 270              	.LVL17:
 141:Src/mc_tasks_foc.c **** 
 271              		.loc 1 141 27 view .LVU81
 272 0088 C0F30F43 		ubfx	r3, r0, #16, #16
 143:Src/mc_tasks_foc.c ****     STC_GetMecSpeedRefUnitDefault(pSTC[M1]),0); /* First command to STC */
 273              		.loc 1 143 5 view .LVU82
 274 008c 2868     		ldr	r0, [r5]
 141:Src/mc_tasks_foc.c **** 
 275              		.loc 1 141 27 view .LVU83
 276 008e A382     		strh	r3, [r4, #20]	@ movhi
 143:Src/mc_tasks_foc.c ****     STC_GetMecSpeedRefUnitDefault(pSTC[M1]),0); /* First command to STC */
 277              		.loc 1 143 5 is_stmt 1 view .LVU84
 278 0090 FFF7FEFF 		bl	STC_GetMecSpeedRefUnitDefault
 279              	.LVL18:
 280 0094 0146     		mov	r1, r0
 281 0096 1148     		ldr	r0, .L8+56
 282 0098 0022     		movs	r2, #0
ARM GAS  /tmp/ccwX0oqx.s 			page 16


 149:Src/mc_tasks_foc.c **** 
 283              		.loc 1 149 1 is_stmt 0 view .LVU85
 284 009a 04B0     		add	sp, sp, #16
 285              	.LCFI4:
 286              		.cfi_def_cfa_offset 24
 287              		@ sp needed
 288 009c BDE8F041 		pop	{r4, r5, r6, r7, r8, lr}
 289              	.LCFI5:
 290              		.cfi_restore 14
 291              		.cfi_restore 8
 292              		.cfi_restore 7
 293              		.cfi_restore 6
 294              		.cfi_restore 5
 295              		.cfi_restore 4
 296              		.cfi_def_cfa_offset 0
 143:Src/mc_tasks_foc.c ****     STC_GetMecSpeedRefUnitDefault(pSTC[M1]),0); /* First command to STC */
 297              		.loc 1 143 5 view .LVU86
 298 00a0 FFF7FEBF 		b	MCI_ExecSpeedRamp
 299              	.LVL19:
 300              	.L9:
 301              		.align	2
 302              	.L8:
 303 00a4 00000000 		.word	pwmcHandle
 304 00a8 00000000 		.word	PIDSpeedHandle_M1
 305 00ac 00000000 		.word	PWM_Handle_M1
 306 00b0 00000000 		.word	pSTC
 307 00b4 00000000 		.word	FOCVars
 308 00b8 00000000 		.word	VirtualSpeedSensorM1
 309 00bc 00000000 		.word	RevUpControlM1
 310 00c0 00000000 		.word	STO_M1
 311 00c4 00000000 		.word	PIDIqHandle_M1
 312 00c8 00000000 		.word	PIDIdHandle_M1
 313 00cc 00000000 		.word	pMPM
 314 00d0 00000000 		.word	RampExtMngrHFParamsM1
 315 00d4 00000000 		.word	BusVoltageSensor_M1
 316 00d8 00000000 		.word	pREMNG
 317 00dc 00000000 		.word	Mci
 318 00e0 00000000 		.word	STO_PLL_M1
 319              		.cfi_endproc
 320              	.LFE1466:
 322              		.section	.text.TSK_MF_StopProcessing,"ax",%progbits
 323              		.align	1
 324              		.p2align 2,,3
 325              		.global	TSK_MF_StopProcessing
 326              		.syntax unified
 327              		.thumb
 328              		.thumb_func
 329              		.fpu fpv4-sp-d16
 331              	TSK_MF_StopProcessing:
 332              	.LVL20:
 333              	.LFB1467:
 156:Src/mc_tasks_foc.c ****     R3_2_SwitchOffPWM(pwmcHandle[motor]);
 334              		.loc 1 156 1 is_stmt 1 view -0
 335              		.cfi_startproc
 336              		@ args = 0, pretend = 0, frame = 0
 337              		@ frame_needed = 0, uses_anonymous_args = 0
 157:Src/mc_tasks_foc.c **** 
ARM GAS  /tmp/ccwX0oqx.s 			page 17


 338              		.loc 1 157 5 view .LVU88
 339 0000 0A4B     		ldr	r3, .L12
 156:Src/mc_tasks_foc.c ****     R3_2_SwitchOffPWM(pwmcHandle[motor]);
 340              		.loc 1 156 1 is_stmt 0 view .LVU89
 341 0002 10B5     		push	{r4, lr}
 342              	.LCFI6:
 343              		.cfi_def_cfa_offset 8
 344              		.cfi_offset 4, -8
 345              		.cfi_offset 14, -4
 156:Src/mc_tasks_foc.c ****     R3_2_SwitchOffPWM(pwmcHandle[motor]);
 346              		.loc 1 156 1 view .LVU90
 347 0004 0446     		mov	r4, r0
 157:Src/mc_tasks_foc.c **** 
 348              		.loc 1 157 5 view .LVU91
 349 0006 53F82000 		ldr	r0, [r3, r0, lsl #2]
 350              	.LVL21:
 157:Src/mc_tasks_foc.c **** 
 351              		.loc 1 157 5 view .LVU92
 352 000a FFF7FEFF 		bl	R3_2_SwitchOffPWM
 353              	.LVL22:
 159:Src/mc_tasks_foc.c **** 
 354              		.loc 1 159 3 is_stmt 1 view .LVU93
 355 000e 2046     		mov	r0, r4
 356 0010 FFF7FEFF 		bl	FOC_Clear
 357              	.LVL23:
 161:Src/mc_tasks_foc.c ****   Mci[motor].State = STOP;
 358              		.loc 1 161 3 view .LVU94
 359 0014 4FF44870 		mov	r0, #800
 360 0018 FFF7FEFF 		bl	TSK_SetStopPermanencyTimeM1
 361              	.LVL24:
 162:Src/mc_tasks_foc.c **** }
 362              		.loc 1 162 3 view .LVU95
 162:Src/mc_tasks_foc.c **** }
 363              		.loc 1 162 20 is_stmt 0 view .LVU96
 364 001c 044B     		ldr	r3, .L12+4
 365 001e 04EB8404 		add	r4, r4, r4, lsl #2
 366 0022 03EBC404 		add	r4, r3, r4, lsl #3
 367 0026 0823     		movs	r3, #8
 368 0028 E377     		strb	r3, [r4, #31]
 163:Src/mc_tasks_foc.c **** 
 369              		.loc 1 163 1 view .LVU97
 370 002a 10BD     		pop	{r4, pc}
 371              	.L13:
 372              		.align	2
 373              	.L12:
 374 002c 00000000 		.word	pwmcHandle
 375 0030 00000000 		.word	Mci
 376              		.cfi_endproc
 377              	.LFE1467:
 379              		.section	.text.FOC_InitAdditionalMethods,"ax",%progbits
 380              		.align	1
 381              		.p2align 2,,3
 382              		.weak	FOC_InitAdditionalMethods
 383              		.syntax unified
 384              		.thumb
 385              		.thumb_func
 386              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccwX0oqx.s 			page 18


 388              	FOC_InitAdditionalMethods:
 389              	.LVL25:
 390              	.LFB1470:
 509:Src/mc_tasks_foc.c **** 
 510:Src/mc_tasks_foc.c **** /**
 511:Src/mc_tasks_foc.c ****   * @brief  Use this method to initialize additional methods (if any) in
 512:Src/mc_tasks_foc.c ****   *         START_TO_RUN state.
 513:Src/mc_tasks_foc.c ****   * @param  bMotor related motor it can be M1 or M2.
 514:Src/mc_tasks_foc.c ****   */
 515:Src/mc_tasks_foc.c **** __weak void FOC_InitAdditionalMethods(uint8_t bMotor) //cstat !RED-func-no-effect
 516:Src/mc_tasks_foc.c **** {
 391              		.loc 1 516 1 is_stmt 1 view -0
 392              		.cfi_startproc
 393              		@ args = 0, pretend = 0, frame = 0
 394              		@ frame_needed = 0, uses_anonymous_args = 0
 395              		@ link register save eliminated.
 517:Src/mc_tasks_foc.c ****     if (M_NONE == bMotor)
 396              		.loc 1 517 5 view .LVU99
 518:Src/mc_tasks_foc.c ****     {
 519:Src/mc_tasks_foc.c ****       /* Nothing to do */
 520:Src/mc_tasks_foc.c ****     }
 521:Src/mc_tasks_foc.c ****     else
 522:Src/mc_tasks_foc.c ****     {
 523:Src/mc_tasks_foc.c ****   /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */
 524:Src/mc_tasks_foc.c **** 
 525:Src/mc_tasks_foc.c ****   /* USER CODE END FOC_InitAdditionalMethods 0 */
 526:Src/mc_tasks_foc.c ****     }
 397              		.loc 1 526 5 view .LVU100
 527:Src/mc_tasks_foc.c **** }
 398              		.loc 1 527 1 is_stmt 0 view .LVU101
 399 0000 7047     		bx	lr
 400              		.cfi_endproc
 401              	.LFE1470:
 403 0002 00BF     		.section	.text.FOC_CalcCurrRef,"ax",%progbits
 404              		.align	1
 405              		.p2align 2,,3
 406              		.weak	FOC_CalcCurrRef
 407              		.syntax unified
 408              		.thumb
 409              		.thumb_func
 410              		.fpu fpv4-sp-d16
 412              	FOC_CalcCurrRef:
 413              	.LVL26:
 414              	.LFB1471:
 528:Src/mc_tasks_foc.c **** 
 529:Src/mc_tasks_foc.c **** /**
 530:Src/mc_tasks_foc.c ****   * @brief  It computes the new values of Iqdref (current references on qd
 531:Src/mc_tasks_foc.c ****   *         reference frame) based on the required electrical torque information
 532:Src/mc_tasks_foc.c ****   *         provided by oTSC object (internally clocked).
 533:Src/mc_tasks_foc.c ****   *         If implemented in the derived class it executes flux weakening and/or
 534:Src/mc_tasks_foc.c ****   *         MTPA algorithm(s). It must be called with the periodicity specified
 535:Src/mc_tasks_foc.c ****   *         in oTSC parameters.
 536:Src/mc_tasks_foc.c ****   * @param  bMotor related motor it can be M1 or M2.
 537:Src/mc_tasks_foc.c ****   */
 538:Src/mc_tasks_foc.c **** __weak void FOC_CalcCurrRef(uint8_t bMotor)
 539:Src/mc_tasks_foc.c **** {
 415              		.loc 1 539 1 is_stmt 1 view -0
ARM GAS  /tmp/ccwX0oqx.s 			page 19


 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 0
 418              		@ frame_needed = 0, uses_anonymous_args = 0
 540:Src/mc_tasks_foc.c ****   qd_t IqdTmp;
 419              		.loc 1 540 3 view .LVU103
 541:Src/mc_tasks_foc.c **** 
 542:Src/mc_tasks_foc.c ****   /* Enter critical section */
 543:Src/mc_tasks_foc.c ****   /* Disable interrupts to avoid any interruption during Iqd reference latching */
 544:Src/mc_tasks_foc.c ****   /* to avoid MF task writing them while HF task reading them */
 545:Src/mc_tasks_foc.c ****   __disable_irq();
 420              		.loc 1 545 3 view .LVU104
 421              	.LBB34:
 422              	.LBI34:
 423              		.file 2 "Drivers/CMSIS/Include/cmsis_gcc.h"
   1:Drivers/CMSIS/Include/cmsis_gcc.h **** /**************************************************************************//**
   2:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @file     cmsis_gcc.h
   3:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @brief    CMSIS compiler GCC header file
   4:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @version  V5.2.0
   5:Drivers/CMSIS/Include/cmsis_gcc.h ****  * @date     08. May 2019
   6:Drivers/CMSIS/Include/cmsis_gcc.h ****  ******************************************************************************/
   7:Drivers/CMSIS/Include/cmsis_gcc.h **** /*
   8:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Copyright (c) 2009-2019 Arm Limited. All rights reserved.
   9:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  10:Drivers/CMSIS/Include/cmsis_gcc.h ****  * SPDX-License-Identifier: Apache-2.0
  11:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  12:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Licensed under the Apache License, Version 2.0 (the License); you may
  13:Drivers/CMSIS/Include/cmsis_gcc.h ****  * not use this file except in compliance with the License.
  14:Drivers/CMSIS/Include/cmsis_gcc.h ****  * You may obtain a copy of the License at
  15:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  16:Drivers/CMSIS/Include/cmsis_gcc.h ****  * www.apache.org/licenses/LICENSE-2.0
  17:Drivers/CMSIS/Include/cmsis_gcc.h ****  *
  18:Drivers/CMSIS/Include/cmsis_gcc.h ****  * Unless required by applicable law or agreed to in writing, software
  19:Drivers/CMSIS/Include/cmsis_gcc.h ****  * distributed under the License is distributed on an AS IS BASIS, WITHOUT
  20:Drivers/CMSIS/Include/cmsis_gcc.h ****  * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  21:Drivers/CMSIS/Include/cmsis_gcc.h ****  * See the License for the specific language governing permissions and
  22:Drivers/CMSIS/Include/cmsis_gcc.h ****  * limitations under the License.
  23:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
  24:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  25:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __CMSIS_GCC_H
  26:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __CMSIS_GCC_H
  27:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  28:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ignore some GCC warnings */
  29:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic push
  30:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wsign-conversion"
  31:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wconversion"
  32:Drivers/CMSIS/Include/cmsis_gcc.h **** #pragma GCC diagnostic ignored "-Wunused-parameter"
  33:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  34:Drivers/CMSIS/Include/cmsis_gcc.h **** /* Fallback for __has_builtin */
  35:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __has_builtin
  36:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __has_builtin(x) (0)
  37:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  38:Drivers/CMSIS/Include/cmsis_gcc.h **** 
  39:Drivers/CMSIS/Include/cmsis_gcc.h **** /* CMSIS compiler specific defines */
  40:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ASM
  41:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ASM                                  __asm
  42:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  43:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __INLINE
ARM GAS  /tmp/ccwX0oqx.s 			page 20


  44:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __INLINE                               inline
  45:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  46:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_INLINE
  47:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_INLINE                        static inline
  48:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  49:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __STATIC_FORCEINLINE                 
  50:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __STATIC_FORCEINLINE                   __attribute__((always_inline)) static inline
  51:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif                                           
  52:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __NO_RETURN
  53:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __NO_RETURN                            __attribute__((__noreturn__))
  54:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  55:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __USED
  56:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __USED                                 __attribute__((used))
  57:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  58:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __WEAK
  59:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __WEAK                                 __attribute__((weak))
  60:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  61:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED
  62:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED                               __attribute__((packed, aligned(1)))
  63:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  64:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_STRUCT
  65:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_STRUCT                        struct __attribute__((packed, aligned(1)))
  66:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  67:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __PACKED_UNION
  68:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __PACKED_UNION                         union __attribute__((packed, aligned(1)))
  69:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  70:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32        /* deprecated */
  71:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  72:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  73:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  74:Drivers/CMSIS/Include/cmsis_gcc.h ****   struct __attribute__((packed)) T_UINT32 { uint32_t v; };
  75:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  76:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32(x)                  (((struct T_UINT32 *)(x))->v)
  77:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  78:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_WRITE
  79:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  80:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  81:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  82:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_WRITE { uint16_t v; };
  83:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  84:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_WRITE(addr, val)    (void)((((struct T_UINT16_WRITE *)(void *)(addr))-
  85:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  86:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT16_READ
  87:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  88:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  89:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  90:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT16_READ { uint16_t v; };
  91:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
  92:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT16_READ(addr)          (((const struct T_UINT16_READ *)(const void *)(add
  93:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
  94:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_WRITE
  95:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
  96:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
  97:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
  98:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_WRITE { uint32_t v; };
  99:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 100:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_WRITE(addr, val)    (void)((((struct T_UINT32_WRITE *)(void *)(addr))-
ARM GAS  /tmp/ccwX0oqx.s 			page 21


 101:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 102:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __UNALIGNED_UINT32_READ
 103:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic push
 104:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wpacked"
 105:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic ignored "-Wattributes"
 106:Drivers/CMSIS/Include/cmsis_gcc.h ****   __PACKED_STRUCT T_UINT32_READ { uint32_t v; };
 107:Drivers/CMSIS/Include/cmsis_gcc.h ****   #pragma GCC diagnostic pop
 108:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __UNALIGNED_UINT32_READ(addr)          (((const struct T_UINT32_READ *)(const void *)(add
 109:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 110:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __ALIGNED
 111:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __ALIGNED(x)                           __attribute__((aligned(x)))
 112:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 113:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __RESTRICT
 114:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __RESTRICT                             __restrict
 115:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 116:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef   __COMPILER_BARRIER
 117:Drivers/CMSIS/Include/cmsis_gcc.h ****   #define __COMPILER_BARRIER()                   __ASM volatile("":::"memory")
 118:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 119:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 120:Drivers/CMSIS/Include/cmsis_gcc.h **** /* #########################  Startup and Lowlevel Init  ######################## */
 121:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 122:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __PROGRAM_START
 123:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 124:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 125:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Initializes data and bss sections
 126:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details This default implementations initialized all data and additional bss
 127:Drivers/CMSIS/Include/cmsis_gcc.h ****            sections relying on .copy.table and .zero.table specified properly
 128:Drivers/CMSIS/Include/cmsis_gcc.h ****            in the used linker script.
 129:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 130:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 131:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE __NO_RETURN void __cmsis_start(void)
 132:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 133:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern void _start(void) __NO_RETURN;
 134:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 135:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 136:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t const* src;
 137:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 138:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 139:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __copy_table_t;
 140:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 141:Drivers/CMSIS/Include/cmsis_gcc.h ****   typedef struct {
 142:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t* dest;
 143:Drivers/CMSIS/Include/cmsis_gcc.h ****     uint32_t  wlen;
 144:Drivers/CMSIS/Include/cmsis_gcc.h ****   } __zero_table_t;
 145:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 146:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_start__;
 147:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __copy_table_t __copy_table_end__;
 148:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_start__;
 149:Drivers/CMSIS/Include/cmsis_gcc.h ****   extern const __zero_table_t __zero_table_end__;
 150:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 151:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__copy_table_t const* pTable = &__copy_table_start__; pTable < &__copy_table_end__; ++pTable
 152:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 153:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = pTable->src[i];
 154:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 155:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 156:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 157:Drivers/CMSIS/Include/cmsis_gcc.h ****   for (__zero_table_t const* pTable = &__zero_table_start__; pTable < &__zero_table_end__; ++pTable
ARM GAS  /tmp/ccwX0oqx.s 			page 22


 158:Drivers/CMSIS/Include/cmsis_gcc.h ****     for(uint32_t i=0u; i<pTable->wlen; ++i) {
 159:Drivers/CMSIS/Include/cmsis_gcc.h ****       pTable->dest[i] = 0u;
 160:Drivers/CMSIS/Include/cmsis_gcc.h ****     }
 161:Drivers/CMSIS/Include/cmsis_gcc.h ****   }
 162:Drivers/CMSIS/Include/cmsis_gcc.h ****  
 163:Drivers/CMSIS/Include/cmsis_gcc.h ****   _start();
 164:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 165:Drivers/CMSIS/Include/cmsis_gcc.h ****   
 166:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __PROGRAM_START           __cmsis_start
 167:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 168:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 169:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __INITIAL_SP
 170:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __INITIAL_SP              __StackTop
 171:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 172:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 173:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __STACK_LIMIT
 174:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __STACK_LIMIT             __StackLimit
 175:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 176:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 177:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE
 178:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE            __Vectors
 179:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 180:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 181:Drivers/CMSIS/Include/cmsis_gcc.h **** #ifndef __VECTOR_TABLE_ATTRIBUTE
 182:Drivers/CMSIS/Include/cmsis_gcc.h **** #define __VECTOR_TABLE_ATTRIBUTE  __attribute((used, section(".vectors")))
 183:Drivers/CMSIS/Include/cmsis_gcc.h **** #endif
 184:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 185:Drivers/CMSIS/Include/cmsis_gcc.h **** /* ###########################  Core Function Access  ########################### */
 186:Drivers/CMSIS/Include/cmsis_gcc.h **** /** \ingroup  CMSIS_Core_FunctionInterface
 187:Drivers/CMSIS/Include/cmsis_gcc.h ****     \defgroup CMSIS_Core_RegAccFunctions CMSIS Core Register Access Functions
 188:Drivers/CMSIS/Include/cmsis_gcc.h ****   @{
 189:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 190:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 191:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 192:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Enable IRQ Interrupts
 193:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Enables IRQ interrupts by clearing the I-bit in the CPSR.
 194:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 195:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __enable_irq(void)
 197:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 198:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsie i" : : : "memory");
 199:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 200:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 201:Drivers/CMSIS/Include/cmsis_gcc.h **** 
 202:Drivers/CMSIS/Include/cmsis_gcc.h **** /**
 203:Drivers/CMSIS/Include/cmsis_gcc.h ****   \brief   Disable IRQ Interrupts
 204:Drivers/CMSIS/Include/cmsis_gcc.h ****   \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 205:Drivers/CMSIS/Include/cmsis_gcc.h ****            Can only be executed in Privileged modes.
 206:Drivers/CMSIS/Include/cmsis_gcc.h ****  */
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** __STATIC_FORCEINLINE void __disable_irq(void)
 424              		.loc 2 207 27 view .LVU105
 425              	.LBB35:
 208:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 209:Drivers/CMSIS/Include/cmsis_gcc.h ****   __ASM volatile ("cpsid i" : : : "memory");
 426              		.loc 2 209 3 view .LVU106
 427              	.LBE35:
 428              	.LBE34:
ARM GAS  /tmp/ccwX0oqx.s 			page 23


 539:Src/mc_tasks_foc.c ****   qd_t IqdTmp;
 429              		.loc 1 539 1 is_stmt 0 view .LVU107
 430 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 431              	.LCFI7:
 432              		.cfi_def_cfa_offset 24
 433              		.cfi_offset 4, -24
 434              		.cfi_offset 5, -20
 435              		.cfi_offset 6, -16
 436              		.cfi_offset 7, -12
 437              		.cfi_offset 8, -8
 438              		.cfi_offset 14, -4
 439              	.LBB37:
 440              	.LBB36:
 441              		.loc 2 209 3 view .LVU108
 442              		.syntax unified
 443              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 444 0004 72B6     		cpsid i
 445              	@ 0 "" 2
 446              		.thumb
 447              		.syntax unified
 448              	.LBE36:
 449              	.LBE37:
 546:Src/mc_tasks_foc.c ****   IqdTmp = FOCVars[bMotor].Iqdref;
 450              		.loc 1 546 3 is_stmt 1 view .LVU109
 451              		.loc 1 546 10 is_stmt 0 view .LVU110
 452 0006 0F4E     		ldr	r6, .L19
 453 0008 2623     		movs	r3, #38
 454 000a 1024     		movs	r4, #16
 455 000c 13FB0044 		smlabb	r4, r3, r0, r4
 456 0010 A719     		adds	r7, r4, r6
 457 0012 A25F     		ldrsh	r2, [r4, r6]
 458              	.LVL27:
 459              		.loc 1 546 10 view .LVU111
 460 0014 B7F90280 		ldrsh	r8, [r7, #2]
 461              	.LVL28:
 547:Src/mc_tasks_foc.c **** 
 548:Src/mc_tasks_foc.c ****   /* Exit critical section */
 549:Src/mc_tasks_foc.c ****   __enable_irq();
 462              		.loc 1 549 3 is_stmt 1 view .LVU112
 463              	.LBB38:
 464              	.LBI38:
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 465              		.loc 2 196 27 view .LVU113
 466              	.LBB39:
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 467              		.loc 2 198 3 view .LVU114
 468              		.syntax unified
 469              	@ 198 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 470 0018 62B6     		cpsie i
 471              	@ 0 "" 2
 472              		.thumb
 473              		.syntax unified
 474              	.LBE39:
 475              	.LBE38:
 550:Src/mc_tasks_foc.c **** 
 551:Src/mc_tasks_foc.c ****   /* USER CODE BEGIN FOC_CalcCurrRef 0 */
 552:Src/mc_tasks_foc.c **** 
ARM GAS  /tmp/ccwX0oqx.s 			page 24


 553:Src/mc_tasks_foc.c ****   /* USER CODE END FOC_CalcCurrRef 0 */
 554:Src/mc_tasks_foc.c ****   if (INTERNAL == FOCVars[bMotor].bDriveInput)
 476              		.loc 1 554 3 view .LVU115
 477              		.loc 1 554 34 is_stmt 0 view .LVU116
 478 001a 03FB0065 		mla	r5, r3, r0, r6
 479              		.loc 1 554 6 view .LVU117
 480 001e 95F82430 		ldrb	r3, [r5, #36]	@ zero_extendqisi2
 481 0022 33B1     		cbz	r3, .L18
 482              	.LVL29:
 483              	.L16:
 555:Src/mc_tasks_foc.c ****   {
 556:Src/mc_tasks_foc.c ****     FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 557:Src/mc_tasks_foc.c ****     IqdTmp.q = FOCVars[bMotor].hTeref;
 558:Src/mc_tasks_foc.c **** 
 559:Src/mc_tasks_foc.c ****   }
 560:Src/mc_tasks_foc.c ****   else
 561:Src/mc_tasks_foc.c ****   {
 562:Src/mc_tasks_foc.c ****     /* Nothing to do */
 563:Src/mc_tasks_foc.c ****   }
 484              		.loc 1 563 3 is_stmt 1 view .LVU118
 564:Src/mc_tasks_foc.c **** 
 565:Src/mc_tasks_foc.c ****   /* Enter critical section */
 566:Src/mc_tasks_foc.c ****   /* Disable interrupts to avoid any interruption during Iqd reference restoring */
 567:Src/mc_tasks_foc.c ****   __disable_irq();
 485              		.loc 1 567 3 view .LVU119
 486              	.LBB40:
 487              	.LBI40:
 207:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 488              		.loc 2 207 27 view .LVU120
 489              	.LBB41:
 490              		.loc 2 209 3 view .LVU121
 491              		.syntax unified
 492              	@ 209 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
 493 0024 72B6     		cpsid i
 494              	@ 0 "" 2
 495              		.thumb
 496              		.syntax unified
 497              	.LBE41:
 498              	.LBE40:
 568:Src/mc_tasks_foc.c ****   FOCVars[bMotor].Iqdref = IqdTmp;
 499              		.loc 1 568 3 view .LVU122
 500              		.loc 1 568 26 is_stmt 0 view .LVU123
 501 0026 A253     		strh	r2, [r4, r6]	@ movhi
 502 0028 A7F80280 		strh	r8, [r7, #2]	@ movhi
 569:Src/mc_tasks_foc.c **** 
 570:Src/mc_tasks_foc.c ****   /* Exit critical section */
 571:Src/mc_tasks_foc.c ****   __enable_irq();
 503              		.loc 1 571 3 is_stmt 1 view .LVU124
 504              	.LBB42:
 505              	.LBI42:
 196:Drivers/CMSIS/Include/cmsis_gcc.h **** {
 506              		.loc 2 196 27 view .LVU125
 507              	.LBB43:
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 508              		.loc 2 198 3 view .LVU126
 509              		.syntax unified
 510              	@ 198 "Drivers/CMSIS/Include/cmsis_gcc.h" 1
ARM GAS  /tmp/ccwX0oqx.s 			page 25


 511 002c 62B6     		cpsie i
 512              	@ 0 "" 2
 513              	.LVL30:
 198:Drivers/CMSIS/Include/cmsis_gcc.h **** }
 514              		.loc 2 198 3 is_stmt 0 view .LVU127
 515              		.thumb
 516              		.syntax unified
 517              	.LBE43:
 518              	.LBE42:
 572:Src/mc_tasks_foc.c ****   /* USER CODE BEGIN FOC_CalcCurrRef 1 */
 573:Src/mc_tasks_foc.c **** 
 574:Src/mc_tasks_foc.c ****   /* USER CODE END FOC_CalcCurrRef 1 */
 575:Src/mc_tasks_foc.c **** }
 519              		.loc 1 575 1 view .LVU128
 520 002e BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 521              	.LVL31:
 522              	.L18:
 556:Src/mc_tasks_foc.c ****     IqdTmp.q = FOCVars[bMotor].hTeref;
 523              		.loc 1 556 5 is_stmt 1 view .LVU129
 556:Src/mc_tasks_foc.c ****     IqdTmp.q = FOCVars[bMotor].hTeref;
 524              		.loc 1 556 30 is_stmt 0 view .LVU130
 525 0032 054B     		ldr	r3, .L19+4
 526 0034 53F82000 		ldr	r0, [r3, r0, lsl #2]
 527              	.LVL32:
 556:Src/mc_tasks_foc.c ****     IqdTmp.q = FOCVars[bMotor].hTeref;
 528              		.loc 1 556 30 view .LVU131
 529 0038 FFF7FEFF 		bl	STC_CalcTorqueReference
 530              	.LVL33:
 556:Src/mc_tasks_foc.c ****     IqdTmp.q = FOCVars[bMotor].hTeref;
 531              		.loc 1 556 30 view .LVU132
 532 003c 0246     		mov	r2, r0
 556:Src/mc_tasks_foc.c ****     IqdTmp.q = FOCVars[bMotor].hTeref;
 533              		.loc 1 556 28 view .LVU133
 534 003e E883     		strh	r0, [r5, #30]	@ movhi
 557:Src/mc_tasks_foc.c **** 
 535              		.loc 1 557 5 is_stmt 1 view .LVU134
 536              	.LVL34:
 557:Src/mc_tasks_foc.c **** 
 537              		.loc 1 557 5 is_stmt 0 view .LVU135
 538 0040 F0E7     		b	.L16
 539              	.L20:
 540 0042 00BF     		.align	2
 541              	.L19:
 542 0044 00000000 		.word	FOCVars
 543 0048 00000000 		.word	pSTC
 544              		.cfi_endproc
 545              	.LFE1471:
 547              		.section	.text.TSK_MediumFrequencyTaskM1,"ax",%progbits
 548              		.align	1
 549              		.p2align 2,,3
 550              		.weak	TSK_MediumFrequencyTaskM1
 551              		.syntax unified
 552              		.thumb
 553              		.thumb_func
 554              		.fpu fpv4-sp-d16
 556              	TSK_MediumFrequencyTaskM1:
 557              	.LFB1468:
ARM GAS  /tmp/ccwX0oqx.s 			page 26


 174:Src/mc_tasks_foc.c ****   /* USER CODE BEGIN MediumFrequencyTask M1 0 */
 558              		.loc 1 174 1 is_stmt 1 view -0
 559              		.cfi_startproc
 560              		@ args = 0, pretend = 0, frame = 8
 561              		@ frame_needed = 0, uses_anonymous_args = 0
 179:Src/mc_tasks_foc.c ****   bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 562              		.loc 1 179 3 view .LVU137
 174:Src/mc_tasks_foc.c ****   /* USER CODE BEGIN MediumFrequencyTask M1 0 */
 563              		.loc 1 174 1 is_stmt 0 view .LVU138
 564 0000 70B5     		push	{r4, r5, r6, lr}
 565              	.LCFI8:
 566              		.cfi_def_cfa_offset 16
 567              		.cfi_offset 4, -16
 568              		.cfi_offset 5, -12
 569              		.cfi_offset 6, -8
 570              		.cfi_offset 14, -4
 571 0002 82B0     		sub	sp, sp, #8
 572              	.LCFI9:
 573              		.cfi_def_cfa_offset 24
 179:Src/mc_tasks_foc.c ****   bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 574              		.loc 1 179 11 view .LVU139
 575 0004 0023     		movs	r3, #0
 180:Src/mc_tasks_foc.c ****   PQD_CalcElMotorPower(pMPM[M1]);
 576              		.loc 1 180 26 view .LVU140
 577 0006 6946     		mov	r1, sp
 578 0008 B648     		ldr	r0, .L77
 179:Src/mc_tasks_foc.c ****   bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 579              		.loc 1 179 11 view .LVU141
 580 000a ADF80030 		strh	r3, [sp]	@ movhi
 180:Src/mc_tasks_foc.c ****   PQD_CalcElMotorPower(pMPM[M1]);
 581              		.loc 1 180 3 is_stmt 1 view .LVU142
 180:Src/mc_tasks_foc.c ****   PQD_CalcElMotorPower(pMPM[M1]);
 582              		.loc 1 180 26 is_stmt 0 view .LVU143
 583 000e FFF7FEFF 		bl	STO_PLL_CalcAvrgMecSpeedUnit
 584              	.LVL35:
 181:Src/mc_tasks_foc.c **** 
 585              		.loc 1 181 3 view .LVU144
 586 0012 B54B     		ldr	r3, .L77+4
 183:Src/mc_tasks_foc.c ****   {
 587              		.loc 1 183 7 view .LVU145
 588 0014 B54C     		ldr	r4, .L77+8
 180:Src/mc_tasks_foc.c ****   PQD_CalcElMotorPower(pMPM[M1]);
 589              		.loc 1 180 26 view .LVU146
 590 0016 0546     		mov	r5, r0
 591              	.LVL36:
 181:Src/mc_tasks_foc.c **** 
 592              		.loc 1 181 3 is_stmt 1 view .LVU147
 593 0018 1868     		ldr	r0, [r3]
 594 001a FFF7FEFF 		bl	PQD_CalcElMotorPower
 595              	.LVL37:
 183:Src/mc_tasks_foc.c ****   {
 596              		.loc 1 183 3 view .LVU148
 183:Src/mc_tasks_foc.c ****   {
 597              		.loc 1 183 7 is_stmt 0 view .LVU149
 598 001e 2046     		mov	r0, r4
 599 0020 FFF7FEFF 		bl	MCI_GetCurrentFaults
 600              	.LVL38:
ARM GAS  /tmp/ccwX0oqx.s 			page 27


 183:Src/mc_tasks_foc.c ****   {
 601              		.loc 1 183 6 view .LVU150
 602 0024 18B1     		cbz	r0, .L74
 465:Src/mc_tasks_foc.c ****   }
 603              		.loc 1 465 5 is_stmt 1 view .LVU151
 465:Src/mc_tasks_foc.c ****   }
 604              		.loc 1 465 19 is_stmt 0 view .LVU152
 605 0026 0A23     		movs	r3, #10
 606 0028 E377     		strb	r3, [r4, #31]
 607              	.LVL39:
 608              	.L21:
 470:Src/mc_tasks_foc.c **** 
 609              		.loc 1 470 1 view .LVU153
 610 002a 02B0     		add	sp, sp, #8
 611              	.LCFI10:
 612              		.cfi_remember_state
 613              		.cfi_def_cfa_offset 16
 614              		@ sp needed
 615 002c 70BD     		pop	{r4, r5, r6, pc}
 616              	.LVL40:
 617              	.L74:
 618              	.LCFI11:
 619              		.cfi_restore_state
 185:Src/mc_tasks_foc.c ****     {
 620              		.loc 1 185 5 is_stmt 1 view .LVU154
 185:Src/mc_tasks_foc.c ****     {
 621              		.loc 1 185 9 is_stmt 0 view .LVU155
 622 002e 2046     		mov	r0, r4
 623 0030 FFF7FEFF 		bl	MCI_GetOccurredFaults
 624              	.LVL41:
 185:Src/mc_tasks_foc.c ****     {
 625              		.loc 1 185 8 view .LVU156
 626 0034 70BB     		cbnz	r0, .L23
 187:Src/mc_tasks_foc.c ****       {
 627              		.loc 1 187 7 is_stmt 1 view .LVU157
 628 0036 E37F     		ldrb	r3, [r4, #31]	@ zero_extendqisi2
 629 0038 132B     		cmp	r3, #19
 630 003a F6D8     		bhi	.L21
 631 003c 01A2     		adr	r2, .L26
 632 003e 52F823F0 		ldr	pc, [r2, r3, lsl #2]
 633 0042 00BF     		.p2align 2
 634              	.L26:
 635 0044 11020000 		.word	.L34+1
 636 0048 2B000000 		.word	.L21+1
 637 004c 2B000000 		.word	.L21+1
 638 0050 2B000000 		.word	.L21+1
 639 0054 83010000 		.word	.L33+1
 640 0058 2B000000 		.word	.L21+1
 641 005c 5F010000 		.word	.L32+1
 642 0060 2B000000 		.word	.L21+1
 643 0064 3F010000 		.word	.L31+1
 644 0068 2B000000 		.word	.L21+1
 645 006c 95000000 		.word	.L23+1
 646 0070 31010000 		.word	.L29+1
 647 0074 2B000000 		.word	.L21+1
 648 0078 2B000000 		.word	.L21+1
 649 007c 2B000000 		.word	.L21+1
ARM GAS  /tmp/ccwX0oqx.s 			page 28


 650 0080 2B000000 		.word	.L21+1
 651 0084 EF000000 		.word	.L28+1
 652 0088 BD000000 		.word	.L27+1
 653 008c 2B000000 		.word	.L21+1
 654 0090 9D000000 		.word	.L25+1
 655              		.p2align 1
 656              	.L23:
 460:Src/mc_tasks_foc.c ****     }
 657              		.loc 1 460 7 view .LVU158
 460:Src/mc_tasks_foc.c ****     }
 658              		.loc 1 460 21 is_stmt 0 view .LVU159
 659 0094 0B23     		movs	r3, #11
 660 0096 E377     		strb	r3, [r4, #31]
 470:Src/mc_tasks_foc.c **** 
 661              		.loc 1 470 1 view .LVU160
 662 0098 02B0     		add	sp, sp, #8
 663              	.LCFI12:
 664              		.cfi_remember_state
 665              		.cfi_def_cfa_offset 16
 666              		@ sp needed
 667 009a 70BD     		pop	{r4, r5, r6, pc}
 668              	.LVL42:
 669              	.L25:
 670              	.LCFI13:
 671              		.cfi_restore_state
 337:Src/mc_tasks_foc.c ****           {
 672              		.loc 1 337 11 is_stmt 1 view .LVU161
 337:Src/mc_tasks_foc.c ****           {
 673              		.loc 1 337 14 is_stmt 0 view .LVU162
 674 009c A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 675 009e 052B     		cmp	r3, #5
 676 00a0 00F0CE80 		beq	.L41
 677              	.LBB58:
 343:Src/mc_tasks_foc.c ****             int16_t hForcedMecSpeedUnit;
 678              		.loc 1 343 13 is_stmt 1 view .LVU163
 344:Src/mc_tasks_foc.c **** 
 679              		.loc 1 344 13 view .LVU164
 346:Src/mc_tasks_foc.c ****             {
 680              		.loc 1 346 13 view .LVU165
 346:Src/mc_tasks_foc.c ****             {
 681              		.loc 1 346 19 is_stmt 0 view .LVU166
 682 00a4 9248     		ldr	r0, .L77+12
 683 00a6 FFF7FEFF 		bl	RUC_Exec
 684              	.LVL43:
 346:Src/mc_tasks_foc.c ****             {
 685              		.loc 1 346 16 view .LVU167
 686 00aa 0028     		cmp	r0, #0
 687 00ac 40F0E080 		bne	.L47
 349:Src/mc_tasks_foc.c ****             }
 688              		.loc 1 349 15 is_stmt 1 view .LVU168
 689 00b0 0246     		mov	r2, r0
 690 00b2 1021     		movs	r1, #16
 691 00b4 8D48     		ldr	r0, .L77+8
 692 00b6 FFF7FEFF 		bl	MCI_FaultProcessing
 693              	.LVL44:
 694 00ba B6E7     		b	.L21
 695              	.L27:
ARM GAS  /tmp/ccwX0oqx.s 			page 29


 696              	.LBE58:
 219:Src/mc_tasks_foc.c ****           {
 697              		.loc 1 219 11 view .LVU169
 219:Src/mc_tasks_foc.c ****           {
 698              		.loc 1 219 14 is_stmt 0 view .LVU170
 699 00bc A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 700 00be 8D4D     		ldr	r5, .L77+16
 701              	.LVL45:
 219:Src/mc_tasks_foc.c ****           {
 702              		.loc 1 219 14 view .LVU171
 703 00c0 052B     		cmp	r3, #5
 704 00c2 2868     		ldr	r0, [r5]
 705 00c4 00F0BE80 		beq	.L73
 225:Src/mc_tasks_foc.c ****             {
 706              		.loc 1 225 13 is_stmt 1 view .LVU172
 225:Src/mc_tasks_foc.c ****             {
 707              		.loc 1 225 17 is_stmt 0 view .LVU173
 708 00c8 0121     		movs	r1, #1
 709 00ca FFF7FEFF 		bl	PWMC_CurrentReadingCalibr
 710              	.LVL46:
 225:Src/mc_tasks_foc.c ****             {
 711              		.loc 1 225 16 view .LVU174
 712 00ce 0028     		cmp	r0, #0
 713 00d0 ABD0     		beq	.L21
 227:Src/mc_tasks_foc.c ****               {
 714              		.loc 1 227 15 is_stmt 1 view .LVU175
 227:Src/mc_tasks_foc.c ****               {
 715              		.loc 1 227 18 is_stmt 0 view .LVU176
 716 00d2 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 717 00d4 032B     		cmp	r3, #3
 718 00d6 00F0FE80 		beq	.L75
 235:Src/mc_tasks_foc.c ****                 TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 719              		.loc 1 235 17 is_stmt 1 view .LVU177
 720 00da 2868     		ldr	r0, [r5]
 721              	.L72:
 722 00dc 0021     		movs	r1, #0
 723 00de FFF7FEFF 		bl	R3_2_TurnOnLowSides
 724              	.LVL47:
 236:Src/mc_tasks_foc.c ****                 Mci[M1].State = CHARGE_BOOT_CAP;
 725              		.loc 1 236 17 view .LVU178
 726 00e2 1420     		movs	r0, #20
 727 00e4 FFF7FEFF 		bl	TSK_SetChargeBootCapDelayM1
 728              	.LVL48:
 237:Src/mc_tasks_foc.c ****               }
 729              		.loc 1 237 17 view .LVU179
 237:Src/mc_tasks_foc.c ****               }
 730              		.loc 1 237 31 is_stmt 0 view .LVU180
 731 00e8 1023     		movs	r3, #16
 732 00ea E377     		strb	r3, [r4, #31]
 733 00ec 9DE7     		b	.L21
 734              	.LVL49:
 735              	.L28:
 250:Src/mc_tasks_foc.c ****           {
 736              		.loc 1 250 11 is_stmt 1 view .LVU181
 250:Src/mc_tasks_foc.c ****           {
 737              		.loc 1 250 14 is_stmt 0 view .LVU182
 738 00ee A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
ARM GAS  /tmp/ccwX0oqx.s 			page 30


 739 00f0 052B     		cmp	r3, #5
 740 00f2 00F0A580 		beq	.L41
 256:Src/mc_tasks_foc.c ****             {
 741              		.loc 1 256 13 is_stmt 1 view .LVU183
 256:Src/mc_tasks_foc.c ****             {
 742              		.loc 1 256 17 is_stmt 0 view .LVU184
 743 00f6 FFF7FEFF 		bl	TSK_ChargeBootCapDelayHasElapsedM1
 744              	.LVL50:
 256:Src/mc_tasks_foc.c ****             {
 745              		.loc 1 256 16 view .LVU185
 746 00fa 0028     		cmp	r0, #0
 747 00fc 95D0     		beq	.L21
 258:Src/mc_tasks_foc.c ****               FOCVars[M1].bDriveInput = EXTERNAL;
 748              		.loc 1 258 15 is_stmt 1 view .LVU186
 749 00fe 7D4D     		ldr	r5, .L77+16
 750              	.LVL51:
 258:Src/mc_tasks_foc.c ****               FOCVars[M1].bDriveInput = EXTERNAL;
 751              		.loc 1 258 15 is_stmt 0 view .LVU187
 752 0100 2868     		ldr	r0, [r5]
 753 0102 FFF7FEFF 		bl	R3_2_SwitchOffPWM
 754              	.LVL52:
 259:Src/mc_tasks_foc.c ****               STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 755              		.loc 1 259 15 is_stmt 1 view .LVU188
 260:Src/mc_tasks_foc.c **** 
 756              		.loc 1 260 15 is_stmt 0 view .LVU189
 757 0106 7C4A     		ldr	r2, .L77+20
 259:Src/mc_tasks_foc.c ****               STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 758              		.loc 1 259 39 view .LVU190
 759 0108 7C4B     		ldr	r3, .L77+24
 260:Src/mc_tasks_foc.c **** 
 760              		.loc 1 260 15 view .LVU191
 761 010a 1068     		ldr	r0, [r2]
 762 010c 7C49     		ldr	r1, .L77+28
 259:Src/mc_tasks_foc.c ****               STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 763              		.loc 1 259 39 view .LVU192
 764 010e 0122     		movs	r2, #1
 765 0110 83F82420 		strb	r2, [r3, #36]
 260:Src/mc_tasks_foc.c **** 
 766              		.loc 1 260 15 is_stmt 1 view .LVU193
 767 0114 FFF7FEFF 		bl	STC_SetSpeedSensor
 768              	.LVL53:
 262:Src/mc_tasks_foc.c **** 
 769              		.loc 1 262 15 view .LVU194
 770 0118 7248     		ldr	r0, .L77
 771 011a FFF7FEFF 		bl	STO_PLL_Clear
 772              	.LVL54:
 264:Src/mc_tasks_foc.c **** 
 773              		.loc 1 264 15 view .LVU195
 774 011e 0020     		movs	r0, #0
 775 0120 FFF7FEFF 		bl	FOC_Clear
 776              	.LVL55:
 266:Src/mc_tasks_foc.c ****               PWMC_SwitchOnPWM(pwmcHandle[M1]);
 777              		.loc 1 266 17 view .LVU196
 266:Src/mc_tasks_foc.c ****               PWMC_SwitchOnPWM(pwmcHandle[M1]);
 778              		.loc 1 266 31 is_stmt 0 view .LVU197
 779 0124 0423     		movs	r3, #4
 267:Src/mc_tasks_foc.c ****             }
ARM GAS  /tmp/ccwX0oqx.s 			page 31


 780              		.loc 1 267 15 view .LVU198
 781 0126 2868     		ldr	r0, [r5]
 266:Src/mc_tasks_foc.c ****               PWMC_SwitchOnPWM(pwmcHandle[M1]);
 782              		.loc 1 266 31 view .LVU199
 783 0128 E377     		strb	r3, [r4, #31]
 267:Src/mc_tasks_foc.c ****             }
 784              		.loc 1 267 15 is_stmt 1 view .LVU200
 785 012a FFF7FEFF 		bl	PWMC_SwitchOnPWM
 786              	.LVL56:
 787 012e 7CE7     		b	.L21
 788              	.LVL57:
 789              	.L29:
 436:Src/mc_tasks_foc.c ****           {
 790              		.loc 1 436 11 view .LVU201
 436:Src/mc_tasks_foc.c ****           {
 791              		.loc 1 436 14 is_stmt 0 view .LVU202
 792 0130 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 793 0132 022B     		cmp	r3, #2
 794 0134 7FF479AF 		bne	.L21
 438:Src/mc_tasks_foc.c ****             Mci[M1].State = IDLE;
 795              		.loc 1 438 13 is_stmt 1 view .LVU203
 439:Src/mc_tasks_foc.c ****           }
 796              		.loc 1 439 13 view .LVU204
 438:Src/mc_tasks_foc.c ****             Mci[M1].State = IDLE;
 797              		.loc 1 438 35 is_stmt 0 view .LVU205
 798 0138 0023     		movs	r3, #0
 799 013a E383     		strh	r3, [r4, #30]	@ movhi
 800 013c 75E7     		b	.L21
 801              	.L31:
 416:Src/mc_tasks_foc.c ****           {
 802              		.loc 1 416 11 is_stmt 1 view .LVU206
 416:Src/mc_tasks_foc.c ****           {
 803              		.loc 1 416 15 is_stmt 0 view .LVU207
 804 013e FFF7FEFF 		bl	TSK_StopPermanencyTimeHasElapsedM1
 805              	.LVL58:
 416:Src/mc_tasks_foc.c ****           {
 806              		.loc 1 416 14 view .LVU208
 807 0142 0028     		cmp	r0, #0
 808 0144 3FF471AF 		beq	.L21
 419:Src/mc_tasks_foc.c ****             VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 809              		.loc 1 419 13 is_stmt 1 view .LVU209
 810 0148 6B4B     		ldr	r3, .L77+20
 811 014a 6D49     		ldr	r1, .L77+28
 812 014c 1868     		ldr	r0, [r3]
 813 014e FFF7FEFF 		bl	STC_SetSpeedSensor
 814              	.LVL59:
 420:Src/mc_tasks_foc.c ****             /* USER CODE BEGIN MediumFrequencyTask M1 5 */
 815              		.loc 1 420 13 view .LVU210
 816 0152 6B48     		ldr	r0, .L77+28
 817 0154 FFF7FEFF 		bl	VSS_Clear
 818              	.LVL60:
 424:Src/mc_tasks_foc.c ****             Mci[M1].State = IDLE;
 819              		.loc 1 424 13 view .LVU211
 425:Src/mc_tasks_foc.c ****           }
 820              		.loc 1 425 13 view .LVU212
 424:Src/mc_tasks_foc.c ****             Mci[M1].State = IDLE;
 821              		.loc 1 424 35 is_stmt 0 view .LVU213
ARM GAS  /tmp/ccwX0oqx.s 			page 32


 822 0158 0023     		movs	r3, #0
 823 015a E383     		strh	r3, [r4, #30]	@ movhi
 824 015c 65E7     		b	.L21
 825              	.L32:
 389:Src/mc_tasks_foc.c ****           {
 826              		.loc 1 389 11 is_stmt 1 view .LVU214
 389:Src/mc_tasks_foc.c ****           {
 827              		.loc 1 389 14 is_stmt 0 view .LVU215
 828 015e A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 829 0160 052B     		cmp	r3, #5
 830 0162 6DD0     		beq	.L41
 399:Src/mc_tasks_foc.c **** 
 831              		.loc 1 399 13 is_stmt 1 view .LVU216
 832 0164 6148     		ldr	r0, .L77+8
 833 0166 FFF7FEFF 		bl	MCI_ExecBufferedCommands
 834              	.LVL61:
 401:Src/mc_tasks_foc.c ****               if(!IsSpeedReliable)
 835              		.loc 1 401 15 view .LVU217
 836 016a 0020     		movs	r0, #0
 837 016c FFF7FEFF 		bl	FOC_CalcCurrRef
 838              	.LVL62:
 402:Src/mc_tasks_foc.c ****               {
 839              		.loc 1 402 15 view .LVU218
 402:Src/mc_tasks_foc.c ****               {
 840              		.loc 1 402 17 is_stmt 0 view .LVU219
 841 0170 002D     		cmp	r5, #0
 842 0172 7FF45AAF 		bne	.L21
 404:Src/mc_tasks_foc.c ****               }
 843              		.loc 1 404 17 is_stmt 1 view .LVU220
 844 0176 2A46     		mov	r2, r5
 845 0178 2021     		movs	r1, #32
 846 017a 5C48     		ldr	r0, .L77+8
 847 017c FFF7FEFF 		bl	MCI_FaultProcessing
 848              	.LVL63:
 849 0180 53E7     		b	.L21
 850              	.L33:
 279:Src/mc_tasks_foc.c ****           {
 851              		.loc 1 279 11 view .LVU221
 279:Src/mc_tasks_foc.c ****           {
 852              		.loc 1 279 14 is_stmt 0 view .LVU222
 853 0182 A37F     		ldrb	r3, [r4, #30]	@ zero_extendqisi2
 854 0184 052B     		cmp	r3, #5
 855 0186 5BD0     		beq	.L41
 856              	.LBB61:
 286:Src/mc_tasks_foc.c ****             qd_t IqdRef;
 857              		.loc 1 286 13 is_stmt 1 view .LVU223
 287:Src/mc_tasks_foc.c ****             bool ObserverConverged;
 858              		.loc 1 287 13 view .LVU224
 288:Src/mc_tasks_foc.c **** 
 859              		.loc 1 288 13 view .LVU225
 291:Src/mc_tasks_foc.c ****             {
 860              		.loc 1 291 13 view .LVU226
 291:Src/mc_tasks_foc.c ****             {
 861              		.loc 1 291 18 is_stmt 0 view .LVU227
 862 0188 5948     		ldr	r0, .L77+12
 863 018a FFF7FEFF 		bl	RUC_Exec
 864              	.LVL64:
ARM GAS  /tmp/ccwX0oqx.s 			page 33


 291:Src/mc_tasks_foc.c ****             {
 865              		.loc 1 291 15 view .LVU228
 866 018e 0028     		cmp	r0, #0
 867 0190 64D1     		bne	.L42
 294:Src/mc_tasks_foc.c ****             }
 868              		.loc 1 294 15 is_stmt 1 view .LVU229
 869 0192 0246     		mov	r2, r0
 870 0194 1021     		movs	r1, #16
 871 0196 5548     		ldr	r0, .L77+8
 872 0198 FFF7FEFF 		bl	MCI_FaultProcessing
 873              	.LVL65:
 874              	.L43:
 306:Src/mc_tasks_foc.c **** 
 875              		.loc 1 306 13 view .LVU230
 306:Src/mc_tasks_foc.c **** 
 876              		.loc 1 306 19 is_stmt 0 view .LVU231
 877 019c 0DF10201 		add	r1, sp, #2
 878 01a0 5748     		ldr	r0, .L77+28
 879 01a2 FFF7FEFF 		bl	VSS_CalcAvrgMecSpeedUnit
 880              	.LVL66:
 309:Src/mc_tasks_foc.c ****             {
 881              		.loc 1 309 13 is_stmt 1 view .LVU232
 309:Src/mc_tasks_foc.c ****             {
 882              		.loc 1 309 25 is_stmt 0 view .LVU233
 883 01a6 5248     		ldr	r0, .L77+12
 884 01a8 FFF7FEFF 		bl	RUC_FirstAccelerationStageReached
 885              	.LVL67:
 309:Src/mc_tasks_foc.c ****             {
 886              		.loc 1 309 16 view .LVU234
 887 01ac 0028     		cmp	r0, #0
 888 01ae 3FF43CAF 		beq	.L21
 311:Src/mc_tasks_foc.c ****               STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 889              		.loc 1 311 15 is_stmt 1 view .LVU235
 311:Src/mc_tasks_foc.c ****               STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 890              		.loc 1 311 35 is_stmt 0 view .LVU236
 891 01b2 4C4D     		ldr	r5, .L77
 892              	.LVL68:
 311:Src/mc_tasks_foc.c ****               STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 893              		.loc 1 311 35 view .LVU237
 894 01b4 0DF10201 		add	r1, sp, #2
 895 01b8 2846     		mov	r0, r5
 896 01ba FFF7FEFF 		bl	STO_PLL_IsObserverConverged
 897              	.LVL69:
 898 01be 0646     		mov	r6, r0
 899              	.LVL70:
 312:Src/mc_tasks_foc.c **** 
 900              		.loc 1 312 15 is_stmt 1 view .LVU238
 312:Src/mc_tasks_foc.c **** 
 901              		.loc 1 312 53 is_stmt 0 view .LVU239
 902 01c0 4A48     		ldr	r0, .L77+8
 903 01c2 FFF7FEFF 		bl	MCI_GetImposedMotorDirection
 904              	.LVL71:
 312:Src/mc_tasks_foc.c **** 
 905              		.loc 1 312 15 view .LVU240
 906 01c6 41B2     		sxtb	r1, r0
 907 01c8 2846     		mov	r0, r5
 908 01ca FFF7FEFF 		bl	STO_SetDirection
ARM GAS  /tmp/ccwX0oqx.s 			page 34


 909              	.LVL72:
 314:Src/mc_tasks_foc.c ****             }
 910              		.loc 1 314 15 is_stmt 1 view .LVU241
 314:Src/mc_tasks_foc.c ****             }
 911              		.loc 1 314 21 is_stmt 0 view .LVU242
 912 01ce 3146     		mov	r1, r6
 913 01d0 4B48     		ldr	r0, .L77+28
 914 01d2 FFF7FEFF 		bl	VSS_SetStartTransition
 915              	.LVL73:
 320:Src/mc_tasks_foc.c ****             {
 916              		.loc 1 320 13 is_stmt 1 view .LVU243
 320:Src/mc_tasks_foc.c ****             {
 917              		.loc 1 320 16 is_stmt 0 view .LVU244
 918 01d6 002E     		cmp	r6, #0
 919 01d8 3FF427AF 		beq	.L21
 920              	.LBB62:
 322:Src/mc_tasks_foc.c **** 
 921              		.loc 1 322 15 is_stmt 1 view .LVU245
 922              	.LVL74:
 322:Src/mc_tasks_foc.c **** 
 923              		.loc 1 322 15 is_stmt 0 view .LVU246
 924              	.LBE62:
 925              	.LBE61:
 926              		.file 3 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
   1:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /**
   2:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   ******************************************************************************
   3:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @file    speed_pos_fdbk.h
   4:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @author  Motor Control SDK Team, ST Microelectronics
   5:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @brief   This file provides all definitions and functions prototypes
   6:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *          of the Speed & Position Feedback component of the Motor Control SDK.
   7:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *
   8:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   ******************************************************************************
   9:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @attention
  10:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *
  11:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  12:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * All rights reserved.</center></h2>
  13:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *
  14:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * This software component is licensed by ST under Ultimate Liberty license
  15:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * SLA0044, the "License"; You may not use this file except in compliance with
  16:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * the License. You may obtain a copy of the License at:
  17:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *                             www.st.com/SLA0044
  18:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *
  19:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   ******************************************************************************
  20:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @ingroup SpeednPosFdbk
  21:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   */
  22:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  23:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  24:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #ifndef SPEEDNPOSFDBK_H
  25:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #define SPEEDNPOSFDBK_H
  26:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  27:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #ifdef __cplusplus
  28:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** extern "C" {
  29:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #endif /* __cplusplus */
  30:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  31:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /* Includes ------------------------------------------------------------------*/
  32:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /* Already into mc_type.h */
  33:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /* #include "stdint.h" */
ARM GAS  /tmp/ccwX0oqx.s 			page 35


  34:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #include "mc_type.h"
  35:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  36:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /** @addtogroup MCSDK
  37:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @{
  38:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   */
  39:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  40:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /** @addtogroup SpeednPosFdbk
  41:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @{
  42:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   */
  43:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  44:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /* Exported types ------------------------------------------------------------*/
  45:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /**
  46:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @brief  SpeednPosFdbk  handles definitions of mechanical and electrical speed, mechanical accel
  47:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *                        and electrical angle and all constants and scale values for a reliable m
  48:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *                        computation in appropriated unit.
  49:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   */
  50:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** typedef struct
  51:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** {
  52:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  53:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint8_t bSpeedErrorNumber;          /*!< Number of time the average mechanical speed is not valid
  54:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint8_t bElToMecRatio;              /*!< Coefficient used to transform electrical to mechanical q
  55:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            viceversa. It usually coincides with motor pole pairs nu
  56:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint8_t SpeedUnit;                  /*!< The speed unit value is defined into mc_stm_types.h by
  57:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            [SPEED_UNIT](measurement_units.md) in tenth of Hertz.*/
  58:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint8_t bMaximumSpeedErrorsNumber;  /*!< Maximum value of not valid speed measurements before an 
  59:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   int16_t hElAngle;                   /*!< Estimated electrical angle reported by the implemented s
  60:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            method. */
  61:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   int16_t hMecAngle;                  /*!< Instantaneous measure of rotor mechanical angle. */
  62:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   int32_t wMecAngle;                  /*!< Mechanical angle frame based on coefficient #bElToMecRat
  63:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   int16_t hAvrMecSpeedUnit;           /*!< Average mechanical speed expressed in the unit defined b
  64:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            [SPEED_UNIT](measurement_units.md). */
  65:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   int16_t hElSpeedDpp;                /*!< Instantaneous electrical speed expressed in Digit Per co
  66:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            ([dpp](measurement_units.md)),
  67:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            expresses the angular speed as the variation of the elec
  68:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   int16_t InstantaneousElSpeedDpp;    /*!< Instantaneous computed electrical speed, expressed in
  69:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            [dpp](measurement_units.md). */
  70:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   int16_t hMecAccelUnitP;             /*!< Average mechanical acceleration expressed in the unit de
  71:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            only reported with encoder implementation */
  72:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint16_t hMaxReliableMecSpeedUnit;  /*!< Maximum value of measured mechanical speed that is consi
  73:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            Expressed in the unit defined by [SPEED_UNIT](measuremen
  74:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint16_t hMinReliableMecSpeedUnit;  /*!< Minimum value of measured mechanical speed that is consi
  75:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            Expressed in the unit defined by [SPEED_UNIT](measuremen
  76:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint16_t hMaxReliableMecAccelUnitP; /*!< Maximum value of measured acceleration that is considere
  77:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            Constant value equal to 65535, expressed in the unit def
  78:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            [SPEED_UNIT](measurement_units.md). */
  79:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint16_t hMeasurementFrequency;     /*!< Frequency at which the user will request a measurement o
  80:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            electrical angle. Expressed in PWM_FREQ_SCALING * Hz. */
  81:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint32_t DPPConvFactor;             /*!< Conversion factor (65536/#PWM_FREQ_SCALING) used to conv
  82:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            from the unit defined by [SPEED_UNIT](measurement_units.
  83:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****                                            [dpp](measurement_units.md). */
  84:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  85:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  86:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** } SpeednPosFdbk_Handle_t;
  87:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  88:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /**
  89:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @brief input structure type definition for SPD_CalcAngle
  90:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   */
ARM GAS  /tmp/ccwX0oqx.s 			page 36


  91:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** typedef struct
  92:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** {
  93:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   alphabeta_t  Valfa_beta;            /*!< Voltage Components in alfa beta reference frame */
  94:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   alphabeta_t  Ialfa_beta;            /*!< Current Components in alfa beta reference frame */
  95:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   uint16_t     Vbus;                  /*!< Virtual Bus Voltage information */
  96:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** } Observer_Inputs_t;
  97:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  98:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
  99:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** int32_t SPD_GetMecAngle(const SpeednPosFdbk_Handle_t *pHandle);
 100:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
 101:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** int16_t SPD_GetAvrgMecSpeedUnit(const SpeednPosFdbk_Handle_t *pHandle);
 102:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
 103:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** int16_t SPD_GetElSpeedDpp(const SpeednPosFdbk_Handle_t *pHandle);
 104:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
 105:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** bool SPD_IsMecSpeedReliable(SpeednPosFdbk_Handle_t *pHandle, const int16_t *pMecSpeedUnit);
 106:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
 107:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** int16_t SPD_GetS16Speed(const SpeednPosFdbk_Handle_t *pHandle);
 108:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
 109:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** uint8_t SPD_GetElToMecRatio(const SpeednPosFdbk_Handle_t *pHandle);
 110:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
 111:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** void SPD_SetElToMecRatio(SpeednPosFdbk_Handle_t *pHandle, uint8_t bPP);
 112:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
 113:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /**
 114:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @brief  Returns the last computed rotor electrical angle, expressed in [s16degrees](measurement
 115:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @param  pHandle: handler of the current instance of the SpeednPosFdbk component.
 116:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @retval int16_t rotor electrical angle.
 117:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   */
 118:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** static inline int16_t SPD_GetElAngle(const SpeednPosFdbk_Handle_t *pHandle)
 119:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** {
 120:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #ifdef NULL_PTR_CHECK_SPD_POS_FBK
 121:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
 122:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #else
 123:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   return (pHandle->hElAngle);
 927              		.loc 3 123 3 is_stmt 1 view .LVU247
 928              	.LBB64:
 929              	.LBB63:
 322:Src/mc_tasks_foc.c **** 
 930              		.loc 1 322 36 is_stmt 0 view .LVU248
 931 01dc 474E     		ldr	r6, .L77+24
 932              	.LVL75:
 322:Src/mc_tasks_foc.c **** 
 933              		.loc 1 322 36 view .LVU249
 934 01de B5F90410 		ldrsh	r1, [r5, #4]
 935 01e2 7068     		ldr	r0, [r6, #4]	@ unaligned
 325:Src/mc_tasks_foc.c ****               (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 936              		.loc 1 325 15 view .LVU250
 937 01e4 474D     		ldr	r5, .L77+32
 322:Src/mc_tasks_foc.c **** 
 938              		.loc 1 322 36 view .LVU251
 939 01e6 FFF7FEFF 		bl	MCM_Park
 940              	.LVL76:
 941 01ea 0190     		str	r0, [sp, #4]
 325:Src/mc_tasks_foc.c ****               (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 942              		.loc 1 325 15 is_stmt 1 view .LVU252
 943 01ec 2868     		ldr	r0, [r5]
 944 01ee FFF7FEFF 		bl	REMNG_Init
 945              	.LVL77:
ARM GAS  /tmp/ccwX0oqx.s 			page 37


 326:Src/mc_tasks_foc.c ****               (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 946              		.loc 1 326 15 view .LVU253
 326:Src/mc_tasks_foc.c ****               (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 947              		.loc 1 326 21 is_stmt 0 view .LVU254
 948 01f2 B6F91010 		ldrsh	r1, [r6, #16]
 949 01f6 2868     		ldr	r0, [r5]
 950 01f8 0022     		movs	r2, #0
 951 01fa FFF7FEFF 		bl	REMNG_ExecRamp
 952              	.LVL78:
 327:Src/mc_tasks_foc.c **** 
 953              		.loc 1 327 15 is_stmt 1 view .LVU255
 327:Src/mc_tasks_foc.c **** 
 954              		.loc 1 327 21 is_stmt 0 view .LVU256
 955 01fe 2868     		ldr	r0, [r5]
 956 0200 BDF90410 		ldrsh	r1, [sp, #4]
 957 0204 1922     		movs	r2, #25
 958 0206 FFF7FEFF 		bl	REMNG_ExecRamp
 959              	.LVL79:
 329:Src/mc_tasks_foc.c ****             }
 960              		.loc 1 329 15 is_stmt 1 view .LVU257
 329:Src/mc_tasks_foc.c ****             }
 961              		.loc 1 329 29 is_stmt 0 view .LVU258
 962 020a 1323     		movs	r3, #19
 963 020c E377     		strb	r3, [r4, #31]
 964              	.LVL80:
 329:Src/mc_tasks_foc.c ****             }
 965              		.loc 1 329 29 view .LVU259
 966 020e 0CE7     		b	.L21
 967              	.LVL81:
 968              	.L34:
 329:Src/mc_tasks_foc.c ****             }
 969              		.loc 1 329 29 view .LVU260
 970              	.LBE63:
 971              	.LBE64:
 192:Src/mc_tasks_foc.c ****           {
 972              		.loc 1 192 11 is_stmt 1 view .LVU261
 192:Src/mc_tasks_foc.c ****           {
 973              		.loc 1 192 14 is_stmt 0 view .LVU262
 974 0210 A57F     		ldrb	r5, [r4, #30]	@ zero_extendqisi2
 975              	.LVL82:
 192:Src/mc_tasks_foc.c ****           {
 976              		.loc 1 192 14 view .LVU263
 977 0212 05F0FD05 		and	r5, r5, #253
 978 0216 012D     		cmp	r5, #1
 979 0218 7FF407AF 		bne	.L21
 194:Src/mc_tasks_foc.c ****             if (pwmcHandle[M1]->offsetCalibStatus == false)
 980              		.loc 1 194 15 is_stmt 1 view .LVU264
 981 021c 3348     		ldr	r0, .L77+8
 195:Src/mc_tasks_foc.c ****             {
 982              		.loc 1 195 27 is_stmt 0 view .LVU265
 983 021e 354E     		ldr	r6, .L77+16
 194:Src/mc_tasks_foc.c ****             if (pwmcHandle[M1]->offsetCalibStatus == false)
 984              		.loc 1 194 15 view .LVU266
 985 0220 FFF7FEFF 		bl	MCI_GetImposedMotorDirection
 986              	.LVL83:
 987 0224 0146     		mov	r1, r0
 988 0226 3248     		ldr	r0, .L77+12
ARM GAS  /tmp/ccwX0oqx.s 			page 38


 989 0228 FFF7FEFF 		bl	RUC_Clear
 990              	.LVL84:
 195:Src/mc_tasks_foc.c ****             {
 991              		.loc 1 195 13 is_stmt 1 view .LVU267
 195:Src/mc_tasks_foc.c ****             {
 992              		.loc 1 195 27 is_stmt 0 view .LVU268
 993 022c 3068     		ldr	r0, [r6]
 195:Src/mc_tasks_foc.c ****             {
 994              		.loc 1 195 16 view .LVU269
 995 022e 90F87F10 		ldrb	r1, [r0, #127]	@ zero_extendqisi2
 996 0232 0029     		cmp	r1, #0
 997 0234 45D1     		bne	.L36
 197:Src/mc_tasks_foc.c ****               Mci[M1].State = OFFSET_CALIB;
 998              		.loc 1 197 15 is_stmt 1 view .LVU270
 197:Src/mc_tasks_foc.c ****               Mci[M1].State = OFFSET_CALIB;
 999              		.loc 1 197 21 is_stmt 0 view .LVU271
 1000 0236 FFF7FEFF 		bl	PWMC_CurrentReadingCalibr
 1001              	.LVL85:
 198:Src/mc_tasks_foc.c ****             }
 1002              		.loc 1 198 15 is_stmt 1 view .LVU272
 198:Src/mc_tasks_foc.c ****             }
 1003              		.loc 1 198 29 is_stmt 0 view .LVU273
 1004 023a 1123     		movs	r3, #17
 1005 023c E377     		strb	r3, [r4, #31]
 1006 023e F4E6     		b	.L21
 1007              	.LVL86:
 1008              	.L41:
 252:Src/mc_tasks_foc.c ****           }
 1009              		.loc 1 252 13 is_stmt 1 view .LVU274
 1010              	.LBB65:
 1011              	.LBI65:
 155:Src/mc_tasks_foc.c **** {
 1012              		.loc 1 155 6 view .LVU275
 1013              	.LBB66:
 157:Src/mc_tasks_foc.c **** 
 1014              		.loc 1 157 5 view .LVU276
 1015 0240 2C4B     		ldr	r3, .L77+16
 1016 0242 1868     		ldr	r0, [r3]
 1017              	.LVL87:
 1018              	.L73:
 157:Src/mc_tasks_foc.c **** 
 1019              		.loc 1 157 5 is_stmt 0 view .LVU277
 1020 0244 FFF7FEFF 		bl	R3_2_SwitchOffPWM
 1021              	.LVL88:
 159:Src/mc_tasks_foc.c **** 
 1022              		.loc 1 159 3 is_stmt 1 view .LVU278
 1023 0248 0020     		movs	r0, #0
 1024 024a FFF7FEFF 		bl	FOC_Clear
 1025              	.LVL89:
 161:Src/mc_tasks_foc.c ****   Mci[motor].State = STOP;
 1026              		.loc 1 161 3 view .LVU279
 1027 024e 4FF44870 		mov	r0, #800
 1028 0252 FFF7FEFF 		bl	TSK_SetStopPermanencyTimeM1
 1029              	.LVL90:
 162:Src/mc_tasks_foc.c **** }
 1030              		.loc 1 162 3 view .LVU280
 162:Src/mc_tasks_foc.c **** }
ARM GAS  /tmp/ccwX0oqx.s 			page 39


 1031              		.loc 1 162 20 is_stmt 0 view .LVU281
 1032 0256 0823     		movs	r3, #8
 1033 0258 E377     		strb	r3, [r4, #31]
 1034 025a E6E6     		b	.L21
 1035              	.LVL91:
 1036              	.L42:
 162:Src/mc_tasks_foc.c **** }
 1037              		.loc 1 162 20 view .LVU282
 1038              	.LBE66:
 1039              	.LBE65:
 1040              	.LBB67:
 300:Src/mc_tasks_foc.c ****               IqdRef.d = FOCVars[M1].UserIdref;
 1041              		.loc 1 300 15 is_stmt 1 view .LVU283
 300:Src/mc_tasks_foc.c ****               IqdRef.d = FOCVars[M1].UserIdref;
 1042              		.loc 1 300 26 is_stmt 0 view .LVU284
 1043 025c 264B     		ldr	r3, .L77+20
 1044 025e 1868     		ldr	r0, [r3]
 1045 0260 FFF7FEFF 		bl	STC_CalcTorqueReference
 1046              	.LVL92:
 301:Src/mc_tasks_foc.c ****               /* Iqd reference current used by the High Frequency Loop to generate the PWM output *
 1047              		.loc 1 301 15 is_stmt 1 view .LVU285
 301:Src/mc_tasks_foc.c ****               /* Iqd reference current used by the High Frequency Loop to generate the PWM output *
 1048              		.loc 1 301 37 is_stmt 0 view .LVU286
 1049 0264 254B     		ldr	r3, .L77+24
 1050 0266 B3F91420 		ldrsh	r2, [r3, #20]
 1051              	.LVL93:
 303:Src/mc_tasks_foc.c ****            }
 1052              		.loc 1 303 15 is_stmt 1 view .LVU287
 303:Src/mc_tasks_foc.c ****            }
 1053              		.loc 1 303 34 is_stmt 0 view .LVU288
 1054 026a 1882     		strh	r0, [r3, #16]	@ movhi
 1055 026c 5A82     		strh	r2, [r3, #18]	@ movhi
 1056 026e 95E7     		b	.L43
 1057              	.LVL94:
 1058              	.L47:
 303:Src/mc_tasks_foc.c ****            }
 1059              		.loc 1 303 34 view .LVU289
 1060              	.LBE67:
 1061              	.LBB68:
 1062              	.LBB59:
 355:Src/mc_tasks_foc.c ****               /* Check if the transition ramp has completed. */
 1063              		.loc 1 355 15 is_stmt 1 view .LVU290
 355:Src/mc_tasks_foc.c ****               /* Check if the transition ramp has completed. */
 1064              		.loc 1 355 28 is_stmt 0 view .LVU291
 1065 0270 01A9     		add	r1, sp, #4
 1066 0272 2348     		ldr	r0, .L77+28
 1067 0274 FFF7FEFF 		bl	VSS_CalcAvrgMecSpeedUnit
 1068              	.LVL95:
 1069 0278 0546     		mov	r5, r0
 1070              	.LVL96:
 357:Src/mc_tasks_foc.c ****               tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 1071              		.loc 1 357 15 is_stmt 1 view .LVU292
 358:Src/mc_tasks_foc.c ****               LoopClosed = LoopClosed || tempBool;
 1072              		.loc 1 358 15 view .LVU293
 358:Src/mc_tasks_foc.c ****               LoopClosed = LoopClosed || tempBool;
 1073              		.loc 1 358 26 is_stmt 0 view .LVU294
 1074 027a 2148     		ldr	r0, .L77+28
ARM GAS  /tmp/ccwX0oqx.s 			page 40


 1075 027c FFF7FEFF 		bl	VSS_TransitionEnded
 1076              	.LVL97:
 359:Src/mc_tasks_foc.c **** 
 1077              		.loc 1 359 15 is_stmt 1 view .LVU295
 359:Src/mc_tasks_foc.c **** 
 1078              		.loc 1 359 39 is_stmt 0 view .LVU296
 1079 0280 35B3     		cbz	r5, .L76
 1080              	.L49:
 1081              	.LVL98:
 363:Src/mc_tasks_foc.c ****               {
 1082              		.loc 1 363 15 is_stmt 1 view .LVU297
 368:Src/mc_tasks_foc.c ****                                     (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PI
 1083              		.loc 1 368 17 view .LVU298
 369:Src/mc_tasks_foc.c ****                                     / PID_SPEED_INTEGRAL_INIT_DIV));
 1084              		.loc 1 369 66 is_stmt 0 view .LVU299
 1085 0282 1E4B     		ldr	r3, .L77+24
 369:Src/mc_tasks_foc.c ****                                     / PID_SPEED_INTEGRAL_INIT_DIV));
 1086              		.loc 1 369 80 view .LVU300
 1087 0284 2048     		ldr	r0, .L77+36
 1088              	.LVL99:
 369:Src/mc_tasks_foc.c ****                                     / PID_SPEED_INTEGRAL_INIT_DIV));
 1089              		.loc 1 369 66 view .LVU301
 1090 0286 B3F91060 		ldrsh	r6, [r3, #16]
 375:Src/mc_tasks_foc.c ****                 FOC_InitAdditionalMethods(M1);
 1091              		.loc 1 375 17 view .LVU302
 1092 028a 1B4D     		ldr	r5, .L77+20
 369:Src/mc_tasks_foc.c ****                                     / PID_SPEED_INTEGRAL_INIT_DIV));
 1093              		.loc 1 369 80 view .LVU303
 1094 028c FFF7FEFF 		bl	PID_GetKIDivisor
 1095              	.LVL100:
 368:Src/mc_tasks_foc.c ****                                     (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PI
 1096              		.loc 1 368 17 view .LVU304
 1097 0290 01B2     		sxth	r1, r0
 1098 0292 01FB06F1 		mul	r1, r1, r6
 1099 0296 1C48     		ldr	r0, .L77+36
 1100 0298 FFF7FEFF 		bl	PID_SetIntegralTerm
 1101              	.LVL101:
 375:Src/mc_tasks_foc.c ****                 FOC_InitAdditionalMethods(M1);
 1102              		.loc 1 375 17 is_stmt 1 view .LVU305
 1103 029c 1149     		ldr	r1, .L77
 1104 029e 2868     		ldr	r0, [r5]
 1105 02a0 FFF7FEFF 		bl	STC_SetSpeedSensor
 1106              	.LVL102:
 376:Src/mc_tasks_foc.c ****                 FOC_CalcCurrRef(M1);
 1107              		.loc 1 376 17 view .LVU306
 1108 02a4 0020     		movs	r0, #0
 1109 02a6 FFF7FEFF 		bl	FOC_InitAdditionalMethods
 1110              	.LVL103:
 377:Src/mc_tasks_foc.c ****                 STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to cur
 1111              		.loc 1 377 17 view .LVU307
 1112 02aa 0020     		movs	r0, #0
 1113 02ac FFF7FEFF 		bl	FOC_CalcCurrRef
 1114              	.LVL104:
 378:Src/mc_tasks_foc.c ****                 MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the sp
 1115              		.loc 1 378 17 view .LVU308
 1116 02b0 2868     		ldr	r0, [r5]
 1117 02b2 FFF7FEFF 		bl	STC_ForceSpeedReferenceToCurrentSpeed
ARM GAS  /tmp/ccwX0oqx.s 			page 41


 1118              	.LVL105:
 379:Src/mc_tasks_foc.c ****                 Mci[M1].State = RUN;
 1119              		.loc 1 379 17 view .LVU309
 1120 02b6 0D48     		ldr	r0, .L77+8
 1121 02b8 FFF7FEFF 		bl	MCI_ExecBufferedCommands
 1122              	.LVL106:
 380:Src/mc_tasks_foc.c ****               }
 1123              		.loc 1 380 17 view .LVU310
 380:Src/mc_tasks_foc.c ****               }
 1124              		.loc 1 380 31 is_stmt 0 view .LVU311
 1125 02bc 0623     		movs	r3, #6
 1126 02be E377     		strb	r3, [r4, #31]
 1127 02c0 B3E6     		b	.L21
 1128              	.LVL107:
 1129              	.L36:
 380:Src/mc_tasks_foc.c ****               }
 1130              		.loc 1 380 31 view .LVU312
 1131              	.LBE59:
 1132              	.LBE68:
 203:Src/mc_tasks_foc.c ****               (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 1133              		.loc 1 203 15 is_stmt 1 view .LVU313
 203:Src/mc_tasks_foc.c ****               (void)PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 1134              		.loc 1 203 56 is_stmt 0 view .LVU314
 1135 02c2 A0F86050 		strh	r5, [r0, #96]	@ movhi
 204:Src/mc_tasks_foc.c ****               R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 1136              		.loc 1 204 15 is_stmt 1 view .LVU315
 204:Src/mc_tasks_foc.c ****               R3_2_TurnOnLowSides(pwmcHandle[M1],M1_CHARGE_BOOT_CAP_DUTY_CYCLES);
 1137              		.loc 1 204 21 is_stmt 0 view .LVU316
 1138 02c6 2946     		mov	r1, r5
 1139 02c8 FFF7FEFF 		bl	PWMC_CurrentReadingCalibr
 1140              	.LVL108:
 205:Src/mc_tasks_foc.c ****               TSK_SetChargeBootCapDelayM1(M1_CHARGE_BOOT_CAP_TICKS);
 1141              		.loc 1 205 15 is_stmt 1 view .LVU317
 1142 02cc 3068     		ldr	r0, [r6]
 1143 02ce 05E7     		b	.L72
 1144              	.LVL109:
 1145              	.L76:
 1146              	.LBB69:
 1147              	.LBB60:
 359:Src/mc_tasks_foc.c **** 
 1148              		.loc 1 359 39 is_stmt 0 discriminator 2 view .LVU318
 1149 02d0 0028     		cmp	r0, #0
 1150 02d2 D6D1     		bne	.L49
 1151 02d4 A9E6     		b	.L21
 1152              	.LVL110:
 1153              	.L75:
 359:Src/mc_tasks_foc.c **** 
 1154              		.loc 1 359 39 discriminator 2 view .LVU319
 1155              	.LBE60:
 1156              	.LBE69:
 229:Src/mc_tasks_foc.c ****                 Mci[M1].DirectCommand = MCI_NO_COMMAND;
 1157              		.loc 1 229 17 is_stmt 1 view .LVU320
 1158 02d6 0020     		movs	r0, #0
 1159 02d8 FFF7FEFF 		bl	FOC_Clear
 1160              	.LVL111:
 230:Src/mc_tasks_foc.c ****                 Mci[M1].State = IDLE;
 1161              		.loc 1 230 17 view .LVU321
ARM GAS  /tmp/ccwX0oqx.s 			page 42


 231:Src/mc_tasks_foc.c ****               }
 1162              		.loc 1 231 17 view .LVU322
 230:Src/mc_tasks_foc.c ****                 Mci[M1].State = IDLE;
 1163              		.loc 1 230 39 is_stmt 0 view .LVU323
 1164 02dc 0023     		movs	r3, #0
 1165 02de E383     		strh	r3, [r4, #30]	@ movhi
 1166 02e0 A3E6     		b	.L21
 1167              	.L78:
 1168 02e2 00BF     		.align	2
 1169              	.L77:
 1170 02e4 00000000 		.word	STO_PLL_M1
 1171 02e8 00000000 		.word	pMPM
 1172 02ec 00000000 		.word	Mci
 1173 02f0 00000000 		.word	RevUpControlM1
 1174 02f4 00000000 		.word	pwmcHandle
 1175 02f8 00000000 		.word	pSTC
 1176 02fc 00000000 		.word	FOCVars
 1177 0300 00000000 		.word	VirtualSpeedSensorM1
 1178 0304 00000000 		.word	pREMNG
 1179 0308 00000000 		.word	PIDSpeedHandle_M1
 1180              		.cfi_endproc
 1181              	.LFE1468:
 1183              		.section	.text.FOC_HighFrequencyTask,"ax",%progbits
 1184              		.align	1
 1185              		.p2align 2,,3
 1186              		.weak	FOC_HighFrequencyTask
 1187              		.syntax unified
 1188              		.thumb
 1189              		.thumb_func
 1190              		.fpu fpv4-sp-d16
 1192              	FOC_HighFrequencyTask:
 1193              	.LVL112:
 1194              	.LFB1472:
 576:Src/mc_tasks_foc.c **** 
 577:Src/mc_tasks_foc.c **** #if defined (CCMRAM)
 578:Src/mc_tasks_foc.c **** #if defined (__ICCARM__)
 579:Src/mc_tasks_foc.c **** #pragma location = ".ccmram"
 580:Src/mc_tasks_foc.c **** #elif defined (__CC_ARM) || defined(__GNUC__)
 581:Src/mc_tasks_foc.c **** __attribute__((section (".ccmram")))
 582:Src/mc_tasks_foc.c **** #endif
 583:Src/mc_tasks_foc.c **** #endif
 584:Src/mc_tasks_foc.c **** 
 585:Src/mc_tasks_foc.c **** /**
 586:Src/mc_tasks_foc.c ****   * @brief  Executes the Motor Control duties that require a high frequency rate and a precise timi
 587:Src/mc_tasks_foc.c ****   *
 588:Src/mc_tasks_foc.c ****   *  This is mainly the FOC current control loop. It is executed depending on the state of the Moto
 589:Src/mc_tasks_foc.c ****   * subsystem (see the state machine(s)).
 590:Src/mc_tasks_foc.c ****   *
 591:Src/mc_tasks_foc.c ****   * @retval Number of the  motor instance which FOC loop was executed.
 592:Src/mc_tasks_foc.c ****   */
 593:Src/mc_tasks_foc.c **** __weak uint8_t FOC_HighFrequencyTask(uint8_t bMotorNbr)
 594:Src/mc_tasks_foc.c **** {
 1195              		.loc 1 594 1 is_stmt 1 view -0
 1196              		.cfi_startproc
 1197              		@ args = 0, pretend = 0, frame = 32
 1198              		@ frame_needed = 0, uses_anonymous_args = 0
 595:Src/mc_tasks_foc.c ****   uint16_t hFOCreturn;
ARM GAS  /tmp/ccwX0oqx.s 			page 43


 1199              		.loc 1 595 3 view .LVU325
 596:Src/mc_tasks_foc.c ****   /* USER CODE BEGIN HighFrequencyTask 0 */
 597:Src/mc_tasks_foc.c **** 
 598:Src/mc_tasks_foc.c ****   /* USER CODE END HighFrequencyTask 0 */
 599:Src/mc_tasks_foc.c **** 
 600:Src/mc_tasks_foc.c ****   Observer_Inputs_t STO_Inputs; /* Only if sensorless main */
 1200              		.loc 1 600 3 view .LVU326
 601:Src/mc_tasks_foc.c **** 
 602:Src/mc_tasks_foc.c ****   STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* Only if sensorless */
 1201              		.loc 1 602 3 view .LVU327
 594:Src/mc_tasks_foc.c ****   uint16_t hFOCreturn;
 1202              		.loc 1 594 1 is_stmt 0 view .LVU328
 1203 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
 1204              	.LCFI14:
 1205              		.cfi_def_cfa_offset 36
 1206              		.cfi_offset 4, -36
 1207              		.cfi_offset 5, -32
 1208              		.cfi_offset 6, -28
 1209              		.cfi_offset 7, -24
 1210              		.cfi_offset 8, -20
 1211              		.cfi_offset 9, -16
 1212              		.cfi_offset 10, -12
 1213              		.cfi_offset 11, -8
 1214              		.cfi_offset 14, -4
 603:Src/mc_tasks_foc.c ****   if (SWITCH_OVER == Mci[M1].State)
 1215              		.loc 1 603 29 view .LVU329
 1216 0004 4F4F     		ldr	r7, .L95
 602:Src/mc_tasks_foc.c ****   if (SWITCH_OVER == Mci[M1].State)
 1217              		.loc 1 602 25 view .LVU330
 1218 0006 504C     		ldr	r4, .L95+4
 1219              		.loc 1 603 6 view .LVU331
 1220 0008 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 594:Src/mc_tasks_foc.c ****   uint16_t hFOCreturn;
 1221              		.loc 1 594 1 view .LVU332
 1222 000a 89B0     		sub	sp, sp, #36
 1223              	.LCFI15:
 1224              		.cfi_def_cfa_offset 72
 594:Src/mc_tasks_foc.c ****   uint16_t hFOCreturn;
 1225              		.loc 1 594 1 view .LVU333
 1226 000c 8046     		mov	r8, r0
 1227              		.loc 1 603 6 view .LVU334
 1228 000e 132B     		cmp	r3, #19
 602:Src/mc_tasks_foc.c ****   if (SWITCH_OVER == Mci[M1].State)
 1229              		.loc 1 602 25 view .LVU335
 1230 0010 D4F81A00 		ldr	r0, [r4, #26]	@ unaligned
 1231              	.LVL113:
 602:Src/mc_tasks_foc.c ****   if (SWITCH_OVER == Mci[M1].State)
 1232              		.loc 1 602 25 view .LVU336
 1233 0014 0590     		str	r0, [sp, #20]
 1234              		.loc 1 603 3 is_stmt 1 view .LVU337
 1235              		.loc 1 603 6 is_stmt 0 view .LVU338
 1236 0016 00F08880 		beq	.L91
 1237              	.L81:
 604:Src/mc_tasks_foc.c ****   {
 605:Src/mc_tasks_foc.c ****     if (!REMNG_RampCompleted(pREMNG[M1]))
 606:Src/mc_tasks_foc.c ****     {
 607:Src/mc_tasks_foc.c ****       FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
ARM GAS  /tmp/ccwX0oqx.s 			page 44


 608:Src/mc_tasks_foc.c ****     }
 609:Src/mc_tasks_foc.c ****     else
 610:Src/mc_tasks_foc.c ****     {
 611:Src/mc_tasks_foc.c ****       /* Nothing to do */
 612:Src/mc_tasks_foc.c ****     }
 613:Src/mc_tasks_foc.c ****   }
 614:Src/mc_tasks_foc.c ****   else
 615:Src/mc_tasks_foc.c ****   {
 616:Src/mc_tasks_foc.c ****     /* Nothing to do */
 617:Src/mc_tasks_foc.c ****   }
 1238              		.loc 1 617 3 is_stmt 1 view .LVU339
 618:Src/mc_tasks_foc.c ****   /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_1 */
 619:Src/mc_tasks_foc.c **** 
 620:Src/mc_tasks_foc.c ****   /* USER CODE END HighFrequencyTask SINGLEDRIVE_1 */
 621:Src/mc_tasks_foc.c ****   hFOCreturn = FOC_CurrControllerM1();
 1239              		.loc 1 621 3 view .LVU340
 1240              	.LBB78:
 1241              	.LBI78:
 622:Src/mc_tasks_foc.c ****   /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_2 */
 623:Src/mc_tasks_foc.c **** 
 624:Src/mc_tasks_foc.c ****   /* USER CODE END HighFrequencyTask SINGLEDRIVE_2 */
 625:Src/mc_tasks_foc.c ****   if(hFOCreturn == MC_DURATION)
 626:Src/mc_tasks_foc.c ****   {
 627:Src/mc_tasks_foc.c ****     MCI_FaultProcessing(&Mci[M1], MC_DURATION, 0);
 628:Src/mc_tasks_foc.c ****   }
 629:Src/mc_tasks_foc.c ****   else
 630:Src/mc_tasks_foc.c ****   {
 631:Src/mc_tasks_foc.c ****     bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 632:Src/mc_tasks_foc.c ****     STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 633:Src/mc_tasks_foc.c ****     STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless 
 634:Src/mc_tasks_foc.c ****     (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 635:Src/mc_tasks_foc.c ****     STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /* Only in case of Sensor-less */
 636:Src/mc_tasks_foc.c ****     if (false == IsAccelerationStageReached)
 637:Src/mc_tasks_foc.c ****     {
 638:Src/mc_tasks_foc.c ****       STO_ResetPLL(&STO_PLL_M1);
 639:Src/mc_tasks_foc.c ****     }
 640:Src/mc_tasks_foc.c ****     else
 641:Src/mc_tasks_foc.c ****     {
 642:Src/mc_tasks_foc.c ****       /* Nothing to do */
 643:Src/mc_tasks_foc.c ****     }
 644:Src/mc_tasks_foc.c ****     /* Only for sensor-less */
 645:Src/mc_tasks_foc.c ****     if((START == Mci[M1].State) || (SWITCH_OVER == Mci[M1].State))
 646:Src/mc_tasks_foc.c ****     {
 647:Src/mc_tasks_foc.c ****       int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 648:Src/mc_tasks_foc.c ****       (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 649:Src/mc_tasks_foc.c ****     }
 650:Src/mc_tasks_foc.c ****     /* USER CODE BEGIN HighFrequencyTask SINGLEDRIVE_3 */
 651:Src/mc_tasks_foc.c **** 
 652:Src/mc_tasks_foc.c ****     /* USER CODE END HighFrequencyTask SINGLEDRIVE_3 */
 653:Src/mc_tasks_foc.c ****   }
 654:Src/mc_tasks_foc.c **** 
 655:Src/mc_tasks_foc.c ****   return (bMotorNbr);
 656:Src/mc_tasks_foc.c **** 
 657:Src/mc_tasks_foc.c **** }
 658:Src/mc_tasks_foc.c **** 
 659:Src/mc_tasks_foc.c **** #if defined (CCMRAM)
 660:Src/mc_tasks_foc.c **** #if defined (__ICCARM__)
ARM GAS  /tmp/ccwX0oqx.s 			page 45


 661:Src/mc_tasks_foc.c **** #pragma location = ".ccmram"
 662:Src/mc_tasks_foc.c **** #elif defined (__CC_ARM) || defined(__GNUC__)
 663:Src/mc_tasks_foc.c **** __attribute__((section (".ccmram")))
 664:Src/mc_tasks_foc.c **** #endif
 665:Src/mc_tasks_foc.c **** #endif
 666:Src/mc_tasks_foc.c **** /**
 667:Src/mc_tasks_foc.c ****   * @brief It executes the core of FOC drive that is the controllers for Iqd
 668:Src/mc_tasks_foc.c ****   *        currents regulation. Reference frame transformations are carried out
 669:Src/mc_tasks_foc.c ****   *        accordingly to the active speed sensor. It must be called periodically
 670:Src/mc_tasks_foc.c ****   *        when new motor currents have been converted
 671:Src/mc_tasks_foc.c ****   * @param this related object of class CFOC.
 672:Src/mc_tasks_foc.c ****   * @retval int16_t It returns MC_NO_FAULTS if the FOC has been ended before
 673:Src/mc_tasks_foc.c ****   *         next PWM Update event, MC_DURATION otherwise
 674:Src/mc_tasks_foc.c ****   */
 675:Src/mc_tasks_foc.c **** inline uint16_t FOC_CurrControllerM1(void)
 1242              		.loc 1 675 17 view .LVU341
 1243              	.LBB79:
 676:Src/mc_tasks_foc.c **** {
 677:Src/mc_tasks_foc.c ****   qd_t Iqd, Vqd;
 1244              		.loc 1 677 3 view .LVU342
 678:Src/mc_tasks_foc.c ****   ab_t Iab;
 1245              		.loc 1 678 3 view .LVU343
 679:Src/mc_tasks_foc.c ****   alphabeta_t Ialphabeta, Valphabeta;
 1246              		.loc 1 679 3 view .LVU344
 680:Src/mc_tasks_foc.c ****   int16_t hElAngle;
 1247              		.loc 1 680 3 view .LVU345
 681:Src/mc_tasks_foc.c ****   uint16_t hCodeError;
 1248              		.loc 1 681 3 view .LVU346
 682:Src/mc_tasks_foc.c ****   SpeednPosFdbk_Handle_t *speedHandle;
 1249              		.loc 1 682 3 view .LVU347
 683:Src/mc_tasks_foc.c ****   speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 1250              		.loc 1 683 3 view .LVU348
 1251              	.LVL114:
 1252              		.loc 1 683 3 is_stmt 0 view .LVU349
 1253              	.LBE79:
 1254              	.LBE78:
 1255              		.file 4 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h"
   1:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /**
   2:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   ******************************************************************************
   3:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @file    speed_torq_ctrl.h
   4:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @author  Motor Control SDK Team, ST Microelectronics
   5:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @brief   This file contains all definitions and functions prototypes for the
   6:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *          Speed & Torque Control component of the Motor Control SDK.
   7:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   ******************************************************************************
   8:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @attention
   9:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *
  10:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  11:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * All rights reserved.</center></h2>
  12:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *
  13:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * This software component is licensed by ST under Ultimate Liberty license
  14:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * SLA0044, the "License"; You may not use this file except in compliance with
  15:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * the License. You may obtain a copy of the License at:
  16:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *                             www.st.com/SLA0044
  17:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *
  18:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   ******************************************************************************
  19:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @ingroup SpeednTorqCtrlClassic
  20:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
ARM GAS  /tmp/ccwX0oqx.s 			page 46


  21:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  22:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  23:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifndef SPEEDNTORQCTRLCLASS_H
  24:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #define SPEEDNTORQCTRLCLASS_H
  25:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  26:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef __cplusplus
  27:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** extern "C" {
  28:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #endif /* __cplusplus */
  29:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  30:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Includes ------------------------------------------------------------------*/
  31:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #include "mc_type.h"
  32:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #include "pid_regulator.h"
  33:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #include "speed_pos_fdbk.h"
  34:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  35:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /** @addtogroup MCSDK
  36:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @{
  37:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
  38:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  39:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /** @addtogroup SpeednTorqCtrl
  40:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @{
  41:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
  42:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  43:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /** @addtogroup SpeednTorqCtrlClassic
  44:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @{
  45:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
  46:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  47:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Exported types ------------------------------------------------------------*/
  48:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  49:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /**
  50:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @brief  Speed & Torque Control parameters definition
  51:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
  52:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** typedef struct
  53:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** {
  54:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   MC_ControlMode_t Mode;               /*!< Modality of STC. It can be one of these two settings:
  55:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                            MCM_TORQUE_MODE to enable the Torque mode or
  56:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                            MCM_SPEED_MODE to enable the Speed mode. */
  57:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int16_t TargetFinal;                 /*!< Backup of #hTargetFinal to be applied in the last step.
  58:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int32_t SpeedRefUnitExt;             /*!< Current mechanical rotor speed reference expressed in
  59:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             [SPEED_UNIT](measurement_units.md) multiplied by 65536.
  60:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int32_t TorqueRef;                   /*!< Current motor torque reference. This value represents a
  61:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             the Iq current expressed in digit multiplied by 65536. 
  62:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   uint32_t RampRemainingStep;          /*!< Number of steps remaining to complete the ramp. */
  63:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   PID_Handle_t *PISpeed;               /*!< The regulator used to perform the speed control loop. *
  64:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   SpeednPosFdbk_Handle_t *SPD;         /*!< The speed sensor used to perform the speed regulation. 
  65:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int32_t IncDecAmount;                /*!< Increment/decrement amount to be applied to the referen
  66:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             #CalcTorqueReference. */
  67:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   uint16_t STCFrequencyHz;             /*!< Frequency on which the user updates the torque referenc
  68:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             #STC_CalcTorqueReference method expressed in Hz */
  69:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   uint16_t MaxAppPositiveMecSpeedUnit; /*!< Application maximum positive value of the rotor mechani
  70:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             Expressed in the unit defined by [SPEED_UNIT](measureme
  71:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   uint16_t MinAppPositiveMecSpeedUnit; /*!< Application minimum positive value of the rotor mechani
  72:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             Expressed in the unit defined by [SPEED_UNIT](measureme
  73:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int16_t MaxAppNegativeMecSpeedUnit;  /*!< Application maximum negative value of the rotor mechani
  74:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             Expressed in the unit defined by [SPEED_UNIT](measureme
  75:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int16_t MinAppNegativeMecSpeedUnit;  /*!< Application minimum negative value of the rotor mechani
  76:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             Expressed in the unit defined by [SPEED_UNIT](measureme
  77:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   uint16_t MaxPositiveTorque;          /*!< Maximum positive value of motor torque. This value repr
ARM GAS  /tmp/ccwX0oqx.s 			page 47


  78:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             the maximum Iq current expressed in digit. */
  79:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int16_t MinNegativeTorque;           /*!< Minimum negative value of motor torque. This value repr
  80:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             the maximum Iq current expressed in digit. */
  81:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   MC_ControlMode_t ModeDefault;        /*!< Default STC modality. */
  82:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int16_t MecSpeedRefUnitDefault;      /*!< Default mechanical rotor speed reference expressed in t
  83:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             [SPEED_UNIT](measurement_units.md). */
  84:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int16_t TorqueRefDefault;            /*!< Default motor torque reference. This value represents a
  85:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****                                             current reference expressed in digit. */
  86:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   int16_t IdrefDefault;                /*!< Default Id current reference expressed in digit. */
  87:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** } SpeednTorqCtrl_Handle_t;
  88:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  89:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  90:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  91:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Initializes all the object variables */
  92:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** void STC_Init(SpeednTorqCtrl_Handle_t *pHandle, PID_Handle_t *pPI, SpeednPosFdbk_Handle_t *SPD_Hand
  93:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  94:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Resets the integral term of speed regulator */
  95:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** void STC_Clear(SpeednTorqCtrl_Handle_t *pHandle);
  96:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
  97:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Gets the current mechanical rotor speed reference */
  98:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** int16_t STC_GetMecSpeedRefUnit(SpeednTorqCtrl_Handle_t *pHandle);
  99:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 100:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Sets the mode of the speed and torque controller (Torque mode or Speed mode) */
 101:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** void STC_SetControlMode(SpeednTorqCtrl_Handle_t *pHandle, MC_ControlMode_t bMode);
 102:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 103:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Starts the execution of a ramp using new target and duration */
 104:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms);
 105:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 106:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Computes the new value of motor torque reference */
 107:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle);
 108:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 109:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Gets the Default mechanical rotor speed reference */
 110:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** int16_t STC_GetMecSpeedRefUnitDefault(SpeednTorqCtrl_Handle_t *pHandle);
 111:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 112:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Returns the Application maximum positive rotor mechanical speed */
 113:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** uint16_t STC_GetMaxAppPositiveMecSpeedUnit(SpeednTorqCtrl_Handle_t *pHandle);
 114:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 115:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Returns the Application minimum negative rotor mechanical speed */
 116:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** int16_t STC_GetMinAppNegativeMecSpeedUnit(SpeednTorqCtrl_Handle_t *pHandle);
 117:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 118:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Stops the execution of speed ramp */
 119:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** bool STC_StopSpeedRamp(SpeednTorqCtrl_Handle_t *pHandle);
 120:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 121:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Sets in real time the speed sensor utilized by the FOC */
 122:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** void STC_SetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle, SpeednPosFdbk_Handle_t *SPD_Handle);
 123:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 124:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* It returns the default values of Iqdref */
 125:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** qd_t STC_GetDefaultIqdref(SpeednTorqCtrl_Handle_t *pHandle);
 126:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 127:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /* Forces the speed reference to the current speed */
 128:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle);
 129:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 130:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /**
 131:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @brief  Gets the modality of the speed and torque controller
 132:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *           @ref SpeednTorqCtrl_Handle_t::Mode "Mode".
 133:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component.
 134:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @retval MC_ControlMode_t  modality of STC. It can be one of
ARM GAS  /tmp/ccwX0oqx.s 			page 48


 135:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *         these two values: MCM_TORQUE_MODE or MCM_SPEED_MODE.
 136:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *
 137:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * - Called by @ref SpeedRegulatorPotentiometer Speed potentiometer component to manage new speed 
 138:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
 139:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** static inline MC_ControlMode_t STC_GetControlMode(SpeednTorqCtrl_Handle_t *pHandle)
 140:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** {
 141:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
 142:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   return ((MC_NULL == pHandle) ? MCM_TORQUE_MODE : pHandle->Mode);
 143:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #else
 144:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   return (pHandle->Mode);
 145:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #endif
 146:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** }
 147:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 148:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /**
 149:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @brief  Interrupts the execution of any previous ramp command in particular by clearing
 150:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *         the number of steps remaining to complete the ramp
 151:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *         @ref SpeednTorqCtrl_Handle_t::RampRemainingStep "RampRemainingStep".
 152:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component.
 153:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @retval none
 154:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *
 155:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * - If STC has been set in Torque mode the last value of Iq is maintained.\n
 156:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * - If STC has been set in Speed mode the last value of mechanical
 157:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * rotor speed reference is maintained.
 158:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * - Called by MCI_StopSpeedRamp execution command.
 159:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
 160:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** static inline void STC_StopRamp(SpeednTorqCtrl_Handle_t *pHandle)
 161:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** {
 162:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
 163:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   if (MC_NULL == pHandle)
 164:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   {
 165:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     /* Nothing to do */
 166:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   }
 167:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   else
 168:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   {
 169:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #endif
 170:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     pHandle->RampRemainingStep = 0U;
 171:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     pHandle->IncDecAmount = 0;
 172:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
 173:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   }
 174:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #endif
 175:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** }
 176:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 177:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /**
 178:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @brief  Checks if the settled speed or torque ramp has been completed by checking zero value of
 179:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *           @ref SpeednTorqCtrl_Handle_t::RampRemainingStep "RampRemainingStep".
 180:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component.
 181:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @retval bool returning true if the ramp is completed, false otherwise.
 182:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *
 183:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * - Called during motor profiler tuning of HALL sensor.
 184:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
 185:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** static inline bool STC_RampCompleted(SpeednTorqCtrl_Handle_t *pHandle)
 186:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** {
 187:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   bool retVal = false;
 188:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
 189:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   if (MC_NULL == pHandle)
 190:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   {
 191:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     /* Nothing to do */
ARM GAS  /tmp/ccwX0oqx.s 			page 49


 192:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   }
 193:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   else
 194:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   {
 195:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #endif
 196:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     if (0U == pHandle->RampRemainingStep)
 197:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     {
 198:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****       retVal = true;
 199:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     }
 200:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
 201:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   }
 202:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #endif
 203:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   return (retVal);
 204:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** }
 205:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 206:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /**
 207:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @brief  Changes the nominal current by setting new values of
 208:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *         @ref SpeednTorqCtrl_Handle_t::MaxPositiveTorque "MaxPositiveTorque" and
 209:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *         @ref SpeednTorqCtrl_Handle_t::MinNegativeTorque "MinNegativeTorque".
 210:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component.
 211:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @param  hNominalCurrent: represents actually the maximum Iq current expressed in digit.
 212:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @retval none
 213:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *
 214:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * - Not used into current implementation.
 215:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
 216:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** static inline void STC_SetNominalCurrent(SpeednTorqCtrl_Handle_t *pHandle, uint16_t hNominalCurrent
 217:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** {
 218:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
 219:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   if (MC_NULL == pHandle)
 220:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   {
 221:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     /* Nothing to do */
 222:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   }
 223:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   else
 224:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   {
 225:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #endif
 226:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     pHandle->MaxPositiveTorque = hNominalCurrent;
 227:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****     pHandle->MinNegativeTorque = -(int16_t)hNominalCurrent;
 228:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
 229:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   }
 230:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #endif
 231:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** }
 232:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** 
 233:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** /**
 234:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @brief Returns the speed sensor utilized by the FOC.
 235:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @param pHandle: handler of the current instance of the SpeednTorqCtrl component.
 236:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * @retval SpeednPosFdbk_Handle_t speed sensor utilized by the FOC.
 237:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   *
 238:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   * - Called as soon as component parameters are required by MC FW.
 239:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   */
 240:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** static inline SpeednPosFdbk_Handle_t *STC_GetSpeedSensor(SpeednTorqCtrl_Handle_t *pHandle)
 241:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** {
 242:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #ifdef NULL_PTR_CHECK_SPD_TRQ_CTL
 243:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
 244:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h **** #else
 245:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h ****   return (pHandle->SPD);
 1256              		.loc 4 245 3 is_stmt 1 view .LVU350
 1257              	.LBB91:
 1258              	.LBB86:
ARM GAS  /tmp/ccwX0oqx.s 			page 50


 684:Src/mc_tasks_foc.c ****   hElAngle = SPD_GetElAngle(speedHandle);
 1259              		.loc 1 684 3 view .LVU351
 683:Src/mc_tasks_foc.c ****   speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 1260              		.loc 1 683 17 is_stmt 0 view .LVU352
 1261 001a 4C4B     		ldr	r3, .L95+8
 1262              	.LVL115:
 685:Src/mc_tasks_foc.c ****   hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 686:Src/mc_tasks_foc.c ****   PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 1263              		.loc 1 686 3 view .LVU353
 1264 001c DFF850A1 		ldr	r10, .L95+44
 683:Src/mc_tasks_foc.c ****   hElAngle = SPD_GetElAngle(speedHandle);
 1265              		.loc 1 683 17 view .LVU354
 1266 0020 1B68     		ldr	r3, [r3]
 1267              	.LVL116:
 1268              		.loc 1 686 3 view .LVU355
 1269 0022 DAF80000 		ldr	r0, [r10]
 684:Src/mc_tasks_foc.c ****   hElAngle = SPD_GetElAngle(speedHandle);
 1270              		.loc 1 684 14 view .LVU356
 1271 0026 5A69     		ldr	r2, [r3, #20]
 1272              	.LBB80:
 1273              	.LBB81:
 1274              		.file 5 "Inc/pwm_curr_fdbk.h"
   1:Inc/pwm_curr_fdbk.h **** /**
   2:Inc/pwm_curr_fdbk.h ****   ******************************************************************************
   3:Inc/pwm_curr_fdbk.h ****   * @file    pwm_curr_fdbk.h
   4:Inc/pwm_curr_fdbk.h ****   * @author  Motor Control SDK Team, ST Microelectronics
   5:Inc/pwm_curr_fdbk.h ****   * @brief   This file contains all definitions and functions prototypes for the
   6:Inc/pwm_curr_fdbk.h ****   *          PWM & Current Feedback component of the Motor Control SDK.
   7:Inc/pwm_curr_fdbk.h ****   ******************************************************************************
   8:Inc/pwm_curr_fdbk.h ****   * @attention
   9:Inc/pwm_curr_fdbk.h ****   *
  10:Inc/pwm_curr_fdbk.h ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  11:Inc/pwm_curr_fdbk.h ****   * All rights reserved.</center></h2>
  12:Inc/pwm_curr_fdbk.h ****   *
  13:Inc/pwm_curr_fdbk.h ****   * This software component is licensed by ST under Ultimate Liberty license
  14:Inc/pwm_curr_fdbk.h ****   * SLA0044, the "License"; You may not use this file except in compliance with
  15:Inc/pwm_curr_fdbk.h ****   * the License. You may obtain a copy of the License at:
  16:Inc/pwm_curr_fdbk.h ****   *                             www.st.com/SLA0044
  17:Inc/pwm_curr_fdbk.h ****   *
  18:Inc/pwm_curr_fdbk.h ****   ******************************************************************************
  19:Inc/pwm_curr_fdbk.h ****   * @ingroup pwm_curr_fdbk
  20:Inc/pwm_curr_fdbk.h ****   */
  21:Inc/pwm_curr_fdbk.h **** 
  22:Inc/pwm_curr_fdbk.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  23:Inc/pwm_curr_fdbk.h **** #ifndef PWMNCURRFDBK_H
  24:Inc/pwm_curr_fdbk.h **** #define PWMNCURRFDBK_H
  25:Inc/pwm_curr_fdbk.h **** 
  26:Inc/pwm_curr_fdbk.h **** #ifdef __cplusplus
  27:Inc/pwm_curr_fdbk.h **** extern "C" {
  28:Inc/pwm_curr_fdbk.h **** #endif /* __cplusplus */
  29:Inc/pwm_curr_fdbk.h **** 
  30:Inc/pwm_curr_fdbk.h **** /* Includes ------------------------------------------------------------------*/
  31:Inc/pwm_curr_fdbk.h **** #include "mc_type.h"
  32:Inc/pwm_curr_fdbk.h **** 
  33:Inc/pwm_curr_fdbk.h **** /* Exported defines ------------------------------------------------------------*/
  34:Inc/pwm_curr_fdbk.h **** 
  35:Inc/pwm_curr_fdbk.h **** #define SECTOR_1  0U
ARM GAS  /tmp/ccwX0oqx.s 			page 51


  36:Inc/pwm_curr_fdbk.h **** #define SECTOR_2  1U
  37:Inc/pwm_curr_fdbk.h **** #define SECTOR_3  2U
  38:Inc/pwm_curr_fdbk.h **** #define SECTOR_4  3U
  39:Inc/pwm_curr_fdbk.h **** #define SECTOR_5  4U
  40:Inc/pwm_curr_fdbk.h **** #define SECTOR_6  5U
  41:Inc/pwm_curr_fdbk.h **** /*  @brief Used in calculation of Ia, Ib and Ic
  42:Inc/pwm_curr_fdbk.h ****   *
  43:Inc/pwm_curr_fdbk.h ****   * See function PWMC_CalcPhaseCurrentsEst
  44:Inc/pwm_curr_fdbk.h ****   */
  45:Inc/pwm_curr_fdbk.h **** #define SQRT3FACTOR ((uint16_t)0xDDB4) /* = (16384 * 1.732051 * 2)*/
  46:Inc/pwm_curr_fdbk.h **** 
  47:Inc/pwm_curr_fdbk.h **** /** @addtogroup MCSDK
  48:Inc/pwm_curr_fdbk.h ****   * @{
  49:Inc/pwm_curr_fdbk.h ****   */
  50:Inc/pwm_curr_fdbk.h **** 
  51:Inc/pwm_curr_fdbk.h **** /** @addtogroup pwm_curr_fdbk
  52:Inc/pwm_curr_fdbk.h ****   * @{
  53:Inc/pwm_curr_fdbk.h ****   */
  54:Inc/pwm_curr_fdbk.h **** 
  55:Inc/pwm_curr_fdbk.h **** /* Exported types ------------------------------------------------------------*/
  56:Inc/pwm_curr_fdbk.h **** 
  57:Inc/pwm_curr_fdbk.h **** /** @brief PWM & Current Sensing component handle type */
  58:Inc/pwm_curr_fdbk.h **** typedef struct PWMC_Handle PWMC_Handle_t;
  59:Inc/pwm_curr_fdbk.h **** 
  60:Inc/pwm_curr_fdbk.h **** /**
  61:Inc/pwm_curr_fdbk.h ****   * @brief Pointer on callback functions used by PWMC components
  62:Inc/pwm_curr_fdbk.h ****   *
  63:Inc/pwm_curr_fdbk.h ****   * This type is needed because the actual functions to use can change at run-time.
  64:Inc/pwm_curr_fdbk.h ****   *
  65:Inc/pwm_curr_fdbk.h ****   * See the following items:
  66:Inc/pwm_curr_fdbk.h ****   * - PWMC_Handle::pFctSwitchOffPwm
  67:Inc/pwm_curr_fdbk.h ****   * - PWMC_Handle::pFctSwitchOnPwm
  68:Inc/pwm_curr_fdbk.h ****   * - PWMC_Handle::pFctCurrReadingCalib
  69:Inc/pwm_curr_fdbk.h ****   * - PWMC_Handle::pFctRLDetectionModeEnable
  70:Inc/pwm_curr_fdbk.h ****   * - PWMC_Handle::pFctRLDetectionModeDisable
  71:Inc/pwm_curr_fdbk.h ****   *
  72:Inc/pwm_curr_fdbk.h ****   *
  73:Inc/pwm_curr_fdbk.h ****   */
  74:Inc/pwm_curr_fdbk.h **** typedef void (*PWMC_Generic_Cb_t)(PWMC_Handle_t *pHandle);
  75:Inc/pwm_curr_fdbk.h **** 
  76:Inc/pwm_curr_fdbk.h **** /**
  77:Inc/pwm_curr_fdbk.h ****   * @brief Pointer on the function provided by the PMWC component instance to get the phase current
  78:Inc/pwm_curr_fdbk.h ****   *
  79:Inc/pwm_curr_fdbk.h ****   * This type is needed because the actual function to use can change at run-time
  80:Inc/pwm_curr_fdbk.h ****   * (See PWMC_Handle::pFctGetPhaseCurrents).
  81:Inc/pwm_curr_fdbk.h ****   *
  82:Inc/pwm_curr_fdbk.h ****   */
  83:Inc/pwm_curr_fdbk.h **** typedef void (*PWMC_GetPhaseCurr_Cb_t)(PWMC_Handle_t *pHandle, ab_t *Iab);
  84:Inc/pwm_curr_fdbk.h **** 
  85:Inc/pwm_curr_fdbk.h **** /**
  86:Inc/pwm_curr_fdbk.h ****   * @brief Pointer on the function provided by the PMWC component instance to set low sides ON.
  87:Inc/pwm_curr_fdbk.h ****   *
  88:Inc/pwm_curr_fdbk.h ****   * This type is needed because the actual function to use can change at run-time
  89:Inc/pwm_curr_fdbk.h ****   * (See PWMC_Handle::pFctTurnOnLowSides).
  90:Inc/pwm_curr_fdbk.h ****   *
  91:Inc/pwm_curr_fdbk.h ****   */
  92:Inc/pwm_curr_fdbk.h **** typedef void (*PWMC_TurnOnLowSides_Cb_t)(PWMC_Handle_t *pHandle, const uint32_t ticks);
ARM GAS  /tmp/ccwX0oqx.s 			page 52


  93:Inc/pwm_curr_fdbk.h **** 
  94:Inc/pwm_curr_fdbk.h **** /**
  95:Inc/pwm_curr_fdbk.h ****   * @brief Pointer on the function provided by the PMWC component instance to set the reference
  96:Inc/pwm_curr_fdbk.h ****   *        voltage for the over current protection.
  97:Inc/pwm_curr_fdbk.h ****   *
  98:Inc/pwm_curr_fdbk.h ****   * This type is needed because the actual function to use can change at run-time
  99:Inc/pwm_curr_fdbk.h ****   * (See PWMC_Handle::pFctOCPSetReferenceVoltage).
 100:Inc/pwm_curr_fdbk.h ****   *
 101:Inc/pwm_curr_fdbk.h ****   */
 102:Inc/pwm_curr_fdbk.h **** typedef void (*PWMC_SetOcpRefVolt_Cb_t)(PWMC_Handle_t *pHandle, uint16_t hDACVref);
 103:Inc/pwm_curr_fdbk.h **** 
 104:Inc/pwm_curr_fdbk.h **** /**
 105:Inc/pwm_curr_fdbk.h ****   * @brief Pointer on the functions provided by the PMWC component instance to set the ADC sampling
 106:Inc/pwm_curr_fdbk.h ****   *        point for each sectors.
 107:Inc/pwm_curr_fdbk.h ****   *
 108:Inc/pwm_curr_fdbk.h ****   * This type is needed because the actual function to use can change at run-time. See:
 109:Inc/pwm_curr_fdbk.h ****   * - PWMC_Handle::pFctSetADCSampPointSect1
 110:Inc/pwm_curr_fdbk.h ****   * - PWMC_Handle::pFctSetADCSampPointSect2
 111:Inc/pwm_curr_fdbk.h ****   * - PWMC_Handle::pFctSetADCSampPointSect3
 112:Inc/pwm_curr_fdbk.h ****   * - PWMC_Handle::pFctSetADCSampPointSect4
 113:Inc/pwm_curr_fdbk.h ****   * - PWMC_Handle::pFctSetADCSampPointSect5
 114:Inc/pwm_curr_fdbk.h ****   * - PWMC_Handle::pFctSetADCSampPointSect6
 115:Inc/pwm_curr_fdbk.h ****   *
 116:Inc/pwm_curr_fdbk.h ****   */
 117:Inc/pwm_curr_fdbk.h **** typedef uint16_t (*PWMC_SetSampPointSectX_Cb_t)(PWMC_Handle_t *pHandle);
 118:Inc/pwm_curr_fdbk.h **** 
 119:Inc/pwm_curr_fdbk.h **** /**
 120:Inc/pwm_curr_fdbk.h ****   * @brief Pointer on the function provided by the PMWC component instance to set the PWM duty cycl
 121:Inc/pwm_curr_fdbk.h ****   *        in RL detection mode.
 122:Inc/pwm_curr_fdbk.h ****   *
 123:Inc/pwm_curr_fdbk.h ****   * This type is needed because the actual function to use can change at run-time
 124:Inc/pwm_curr_fdbk.h ****   * (See PWMC_Handle::pFctRLDetectionModeSetDuty).
 125:Inc/pwm_curr_fdbk.h ****   *
 126:Inc/pwm_curr_fdbk.h ****   */
 127:Inc/pwm_curr_fdbk.h **** typedef uint16_t (*PWMC_RLDetectSetDuty_Cb_t)(PWMC_Handle_t *pHandle, uint16_t hDuty);
 128:Inc/pwm_curr_fdbk.h **** 
 129:Inc/pwm_curr_fdbk.h **** /**
 130:Inc/pwm_curr_fdbk.h ****   * @brief Pointer on the function provided by the PMWC component instance to set the calibrated of
 131:Inc/pwm_curr_fdbk.h ****   *        in RL detection mode.
 132:Inc/pwm_curr_fdbk.h ****   *
 133:Inc/pwm_curr_fdbk.h ****   * This type is needed because the actual function to use can change at run-time
 134:Inc/pwm_curr_fdbk.h ****   * (See PWMC_Handle::pFctSetOffsetCalib).
 135:Inc/pwm_curr_fdbk.h ****   *
 136:Inc/pwm_curr_fdbk.h ****   */
 137:Inc/pwm_curr_fdbk.h **** typedef void (*PWMC_SetOffsetCalib_Cb_t)(PWMC_Handle_t *pHandle, PolarizationOffsets_t *offsets);
 138:Inc/pwm_curr_fdbk.h **** 
 139:Inc/pwm_curr_fdbk.h **** /**
 140:Inc/pwm_curr_fdbk.h ****   * @brief Pointer on the function provided by the PMWC component instance to get the calibrated of
 141:Inc/pwm_curr_fdbk.h ****   *        in RL detection mode.
 142:Inc/pwm_curr_fdbk.h ****   *
 143:Inc/pwm_curr_fdbk.h ****   * This type is needed because the actual function to use can change at run-time
 144:Inc/pwm_curr_fdbk.h ****   */
 145:Inc/pwm_curr_fdbk.h **** typedef void (*PWMC_GetOffsetCalib_Cb_t)(PWMC_Handle_t *pHandle, PolarizationOffsets_t *offsets);
 146:Inc/pwm_curr_fdbk.h **** 
 147:Inc/pwm_curr_fdbk.h **** /**
 148:Inc/pwm_curr_fdbk.h ****   * @brief This structure is used to handle the data of an instance of the PWM & Current Feedback c
 149:Inc/pwm_curr_fdbk.h ****   *
ARM GAS  /tmp/ccwX0oqx.s 			page 53


 150:Inc/pwm_curr_fdbk.h ****   */
 151:Inc/pwm_curr_fdbk.h **** struct PWMC_Handle
 152:Inc/pwm_curr_fdbk.h **** {
 153:Inc/pwm_curr_fdbk.h ****   /** @{ */
 154:Inc/pwm_curr_fdbk.h ****   PWMC_GetPhaseCurr_Cb_t
 155:Inc/pwm_curr_fdbk.h ****   pFctGetPhaseCurrents;                      /**< Pointer on the function the component instance us
 156:Inc/pwm_curr_fdbk.h ****   PWMC_Generic_Cb_t
 157:Inc/pwm_curr_fdbk.h ****   pFctSwitchOffPwm;                          /**< Pointer on the function the component instance us
 158:Inc/pwm_curr_fdbk.h ****   PWMC_Generic_Cb_t
 159:Inc/pwm_curr_fdbk.h ****   pFctSwitchOnPwm;                           /**< Pointer on the function the component instance us
 160:Inc/pwm_curr_fdbk.h ****   PWMC_Generic_Cb_t
 161:Inc/pwm_curr_fdbk.h ****   pFctCurrReadingCalib;                      /**< Pointer on the fct the component instance uses to
 162:Inc/pwm_curr_fdbk.h ****   PWMC_TurnOnLowSides_Cb_t
 163:Inc/pwm_curr_fdbk.h ****   pFctTurnOnLowSides;                        /**< Pointer on the function the component instance us
 164:Inc/pwm_curr_fdbk.h ****   PWMC_SetSampPointSectX_Cb_t
 165:Inc/pwm_curr_fdbk.h ****   pFctSetADCSampPointSectX;                  /**< Pointer on the function the component instance us
 166:Inc/pwm_curr_fdbk.h ****   PWMC_SetOcpRefVolt_Cb_t
 167:Inc/pwm_curr_fdbk.h ****   pFctOCPSetReferenceVoltage;                /**< Pointer on the fct the component instance uses to
 168:Inc/pwm_curr_fdbk.h ****   PWMC_Generic_Cb_t
 169:Inc/pwm_curr_fdbk.h ****   pFctRLDetectionModeEnable;                 /**< Pointer on the function the component instance us
 170:Inc/pwm_curr_fdbk.h ****   PWMC_Generic_Cb_t
 171:Inc/pwm_curr_fdbk.h ****   pFctRLDetectionModeDisable;                /**< Pointer on the function the component instance us
 172:Inc/pwm_curr_fdbk.h ****   PWMC_RLDetectSetDuty_Cb_t
 173:Inc/pwm_curr_fdbk.h ****   pFctRLDetectionModeSetDuty;                /**< Pointer on the fct the component instance uses to
 174:Inc/pwm_curr_fdbk.h ****                                                   detection mode. */
 175:Inc/pwm_curr_fdbk.h ****   PWMC_Generic_Cb_t
 176:Inc/pwm_curr_fdbk.h ****   pFctRLTurnOnLowSidesAndStart;              /**< Pointer on the function the component instance us
 177:Inc/pwm_curr_fdbk.h ****   PWMC_SetOffsetCalib_Cb_t
 178:Inc/pwm_curr_fdbk.h ****   pFctSetOffsetCalib;                        /**< Pointer on the fct the component instance uses to
 179:Inc/pwm_curr_fdbk.h ****   PWMC_GetOffsetCalib_Cb_t
 180:Inc/pwm_curr_fdbk.h ****   pFctGetOffsetCalib;                        /**< Pointer on the fct the component instance uses to
 181:Inc/pwm_curr_fdbk.h ****   /** @} */
 182:Inc/pwm_curr_fdbk.h ****   int32_t   LPFIqBuf;                        /**< Low Pass Filter buffer used for averaged @f$ I_q 
 183:Inc/pwm_curr_fdbk.h ****   int32_t   LPFIdBuf;                        /**< Low Pass Filter Buffer used for averaged @f$ I_d 
 184:Inc/pwm_curr_fdbk.h ****   GPIO_TypeDef * pwm_en_u_port;                        /*!< Channel 1N (low side) GPIO output */
 185:Inc/pwm_curr_fdbk.h ****   GPIO_TypeDef * pwm_en_v_port;                        /*!< Channel 2N (low side) GPIO output*/
 186:Inc/pwm_curr_fdbk.h ****   GPIO_TypeDef * pwm_en_w_port;                        /*!< Channel 3N (low side)  GPIO output */
 187:Inc/pwm_curr_fdbk.h ****   uint16_t pwm_en_u_pin;                               /*!< Channel 1N (low side) GPIO output pin. 
 188:Inc/pwm_curr_fdbk.h ****   uint16_t pwm_en_v_pin;                               /*!< Channel 2N (low side) GPIO output pin. 
 189:Inc/pwm_curr_fdbk.h ****   uint16_t pwm_en_w_pin;                               /*!< Channel 3N (low side)  GPIO output pin.
 190:Inc/pwm_curr_fdbk.h ****   uint16_t  hT_Sqrt3;                                  /**< Constant used by PWM algorithm (@f$\sqr
 191:Inc/pwm_curr_fdbk.h ****   uint16_t  CntPhA;                                    /**< PWM Duty cycle for phase A. */
 192:Inc/pwm_curr_fdbk.h ****   uint16_t  CntPhB;                                    /**< PWM Duty cycle for phase B. */
 193:Inc/pwm_curr_fdbk.h ****   uint16_t  CntPhC;                                    /**< PWM Duty cycle for phase C. */
 194:Inc/pwm_curr_fdbk.h ****   uint16_t  SWerror;                                   /**< Contains status about SW error. */
 195:Inc/pwm_curr_fdbk.h ****   uint16_t  lowDuty;
 196:Inc/pwm_curr_fdbk.h ****   uint16_t  midDuty;
 197:Inc/pwm_curr_fdbk.h ****   uint16_t  highDuty;
 198:Inc/pwm_curr_fdbk.h ****   uint16_t  HighDutyStored;                            /**< Discontinuous PWM Store current Highest
 199:Inc/pwm_curr_fdbk.h ****   uint16_t  OffCalibrWaitTimeCounter;                  /**< Counter to wait fixed time before motor
 200:Inc/pwm_curr_fdbk.h ****                                                             current measurement offset calibration.
 201:Inc/pwm_curr_fdbk.h ****   int16_t   Ia;                                        /**< Last @f$I_{a}@f$ measurement. */
 202:Inc/pwm_curr_fdbk.h ****   int16_t   Ib;                                        /**< Last @f$I_{b}@f$ measurement. */
 203:Inc/pwm_curr_fdbk.h ****   int16_t   Ic;                                        /**< Last @f$I_{c}@f$ measurement. */
 204:Inc/pwm_curr_fdbk.h ****   int16_t   IaEst;                           /**< Estimated @f$I_{a}@f$ based on averaged @f$ I_q @
 205:Inc/pwm_curr_fdbk.h ****   int16_t   IbEst;                           /**< Estimated @f$I_{b}@f$ based on averaged @f$ I_q @
 206:Inc/pwm_curr_fdbk.h ****   int16_t   IcEst;                           /**< Estimated @f$I_{c}@f$ based on averaged @f$ I_q @
ARM GAS  /tmp/ccwX0oqx.s 			page 54


 207:Inc/pwm_curr_fdbk.h ****   int16_t   LPFIqd_const;                              /**< Low pass filter constant (averaging coe
 208:Inc/pwm_curr_fdbk.h ****   uint16_t PWMperiod;                                  /**< PWM period expressed in timer clock cyc
 209:Inc/pwm_curr_fdbk.h ****                                                          *  @f$hPWMPeriod = TimerFreq_{CLK} / F_{PW
 210:Inc/pwm_curr_fdbk.h ****   uint16_t DTCompCnt;                                  /**< Half of Dead time expressed
 211:Inc/pwm_curr_fdbk.h ****                                                           *  in timer clock cycles unit:
 212:Inc/pwm_curr_fdbk.h ****                                                           *  @f$hDTCompCnt = (DT_s \cdot TimerFreq_
 213:Inc/pwm_curr_fdbk.h ****   uint16_t  Ton;                                       /**< Reserved. */
 214:Inc/pwm_curr_fdbk.h ****   uint16_t  Toff;                                      /**< Reserved. */
 215:Inc/pwm_curr_fdbk.h ****   uint8_t   Motor;                                     /**< Motor reference number. */
 216:Inc/pwm_curr_fdbk.h ****   uint8_t   AlignFlag;                                 /**< Phase current 0 is reliable, 1 is not. 
 217:Inc/pwm_curr_fdbk.h ****   uint8_t   Sector;                                    /**< Space vector sector number. */
 218:Inc/pwm_curr_fdbk.h ****   LowSideOutputsFunction_t LowSideOutputs;             /*!< Low side or enabling signals generation
 219:Inc/pwm_curr_fdbk.h ****   bool TurnOnLowSidesAction;                           /**< True if TurnOnLowSides action is active
 220:Inc/pwm_curr_fdbk.h ****                                                             false otherwise. */
 221:Inc/pwm_curr_fdbk.h ****   bool      DPWM_Mode;                                 /**< Discontinuous PWM mode activation. */
 222:Inc/pwm_curr_fdbk.h ****   bool      RLDetectionMode;                           /**< True if enabled, false if disabled. */
 223:Inc/pwm_curr_fdbk.h ****   bool offsetCalibStatus;                              /**< True if offset calibration completed, f
 224:Inc/pwm_curr_fdbk.h ****   bool OverCurrentFlag;         /* This flag is set when an overcurrent occurs.*/
 225:Inc/pwm_curr_fdbk.h ****   bool OverVoltageFlag;         /* This flag is set when an overvoltage occurs.*/
 226:Inc/pwm_curr_fdbk.h ****   bool driverProtectionFlag;     /* This flag is set when a driver protection occurs.*/
 227:Inc/pwm_curr_fdbk.h ****   bool BrakeActionLock;         /* This flag is set to avoid that brake action is interrupted.*/
 228:Inc/pwm_curr_fdbk.h ****   volatile  bool      useEstCurrent;                   /**< Estimated current flag. */
 229:Inc/pwm_curr_fdbk.h **** 
 230:Inc/pwm_curr_fdbk.h ****   bool SingleShuntTopology;                            /*!< This flag is set when Single Shunt topo
 231:Inc/pwm_curr_fdbk.h **** };
 232:Inc/pwm_curr_fdbk.h **** 
 233:Inc/pwm_curr_fdbk.h **** /**
 234:Inc/pwm_curr_fdbk.h ****   * @brief  Current reading calibration definition.
 235:Inc/pwm_curr_fdbk.h ****   */
 236:Inc/pwm_curr_fdbk.h **** typedef enum
 237:Inc/pwm_curr_fdbk.h **** {
 238:Inc/pwm_curr_fdbk.h ****   CRC_START, /**< Initializes the current reading calibration. */
 239:Inc/pwm_curr_fdbk.h ****   CRC_EXEC   /**< Executes the current reading calibration. */
 240:Inc/pwm_curr_fdbk.h **** } CRCAction_t;
 241:Inc/pwm_curr_fdbk.h **** 
 242:Inc/pwm_curr_fdbk.h **** /* Converts input voltages @f$ V_{\alpha} @f$ and @f$ V_{\beta} @f$ into PWM duty cycles
 243:Inc/pwm_curr_fdbk.h ****  * and feed them to the inverter. */
 244:Inc/pwm_curr_fdbk.h **** uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta);
 245:Inc/pwm_curr_fdbk.h **** 
 246:Inc/pwm_curr_fdbk.h **** /* Switches PWM generation off, inactivating the outputs. */
 247:Inc/pwm_curr_fdbk.h **** void PWMC_SwitchOffPWM(PWMC_Handle_t *pHandle);
 248:Inc/pwm_curr_fdbk.h **** 
 249:Inc/pwm_curr_fdbk.h **** /* Enables PWM generation on the proper Timer peripheral. */
 250:Inc/pwm_curr_fdbk.h **** void PWMC_SwitchOnPWM(PWMC_Handle_t *pHandle);
 251:Inc/pwm_curr_fdbk.h **** 
 252:Inc/pwm_curr_fdbk.h **** /* Calibrates ADC current conversions by reading the offset voltage
 253:Inc/pwm_curr_fdbk.h ****  * present on ADC pins when no motor current is flowing in. */
 254:Inc/pwm_curr_fdbk.h **** bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action);
 255:Inc/pwm_curr_fdbk.h **** 
 256:Inc/pwm_curr_fdbk.h **** /* Switches power stage Low Sides transistors on. */
 257:Inc/pwm_curr_fdbk.h **** void PWMC_TurnOnLowSides(PWMC_Handle_t *pHandle, uint32_t ticks);
 258:Inc/pwm_curr_fdbk.h **** 
 259:Inc/pwm_curr_fdbk.h **** /* Sets the calibrated @p offsets for each of the phases in the @p pHandle handler. In case
 260:Inc/pwm_curr_fdbk.h ****  * of single shunt only phase A is relevant. */
 261:Inc/pwm_curr_fdbk.h **** void PWMC_SetOffsetCalib(PWMC_Handle_t *pHandle, PolarizationOffsets_t *offsets);
 262:Inc/pwm_curr_fdbk.h **** 
 263:Inc/pwm_curr_fdbk.h **** /* Gets the calibrated @p offsets for each of the phases in the @p pHandle handler. In case
ARM GAS  /tmp/ccwX0oqx.s 			page 55


 264:Inc/pwm_curr_fdbk.h ****  * of single shunt only phase A is relevant. */
 265:Inc/pwm_curr_fdbk.h **** void PWMC_GetOffsetCalib(PWMC_Handle_t *pHandle, PolarizationOffsets_t *offsets);
 266:Inc/pwm_curr_fdbk.h **** 
 267:Inc/pwm_curr_fdbk.h **** /* Manages HW overcurrent protection. */
 268:Inc/pwm_curr_fdbk.h **** void *PWMC_OCP_Handler(PWMC_Handle_t *pHandle);
 269:Inc/pwm_curr_fdbk.h **** 
 270:Inc/pwm_curr_fdbk.h **** /* Manages driver protection. */
 271:Inc/pwm_curr_fdbk.h **** void *PWMC_DP_Handler(PWMC_Handle_t *pHandle);
 272:Inc/pwm_curr_fdbk.h **** 
 273:Inc/pwm_curr_fdbk.h **** /* Manages HW overvoltage protection. */
 274:Inc/pwm_curr_fdbk.h **** void *PWMC_OVP_Handler(PWMC_Handle_t *pHandle, TIM_TypeDef *TIMx);
 275:Inc/pwm_curr_fdbk.h **** 
 276:Inc/pwm_curr_fdbk.h **** /* Checks if a fault (OCP, DP or OVP) occurred since last call. */
 277:Inc/pwm_curr_fdbk.h **** uint16_t PWMC_IsFaultOccurred(PWMC_Handle_t *pHandle);
 278:Inc/pwm_curr_fdbk.h **** 
 279:Inc/pwm_curr_fdbk.h **** /* Sets the over current threshold through the DAC reference voltage. */
 280:Inc/pwm_curr_fdbk.h **** void PWMC_OCPSetReferenceVoltage(PWMC_Handle_t *pHandle, uint16_t hDACVref);
 281:Inc/pwm_curr_fdbk.h **** 
 282:Inc/pwm_curr_fdbk.h **** /* Enables Discontinuous PWM mode using the @p pHandle PWMC component. */
 283:Inc/pwm_curr_fdbk.h **** void PWMC_DPWM_ModeEnable(PWMC_Handle_t *pHandle);
 284:Inc/pwm_curr_fdbk.h **** 
 285:Inc/pwm_curr_fdbk.h **** /* Disables Discontinuous PWM mode using the @p pHandle PWMC component. */
 286:Inc/pwm_curr_fdbk.h **** void PWMC_DPWM_ModeDisable(PWMC_Handle_t *pHandle);
 287:Inc/pwm_curr_fdbk.h **** 
 288:Inc/pwm_curr_fdbk.h **** /* Returns the status of the Discontinuous PWM Mode stored in the @p pHandle PWMC component. */
 289:Inc/pwm_curr_fdbk.h **** bool PWMC_GetDPWM_Mode(PWMC_Handle_t *pHandle);
 290:Inc/pwm_curr_fdbk.h **** 
 291:Inc/pwm_curr_fdbk.h **** /* Enables the RL detection mode by calling the function in @p pHandle PWMC component. */
 292:Inc/pwm_curr_fdbk.h **** void PWMC_RLDetectionModeEnable(PWMC_Handle_t *pHandle);
 293:Inc/pwm_curr_fdbk.h **** 
 294:Inc/pwm_curr_fdbk.h **** /* Disables the RL detection mode by calling the function in @p pHandle PWMC component. */
 295:Inc/pwm_curr_fdbk.h **** void PWMC_RLDetectionModeDisable(PWMC_Handle_t *pHandle);
 296:Inc/pwm_curr_fdbk.h **** 
 297:Inc/pwm_curr_fdbk.h **** /* Sets the PWM duty cycle to apply in the RL Detection mode. */
 298:Inc/pwm_curr_fdbk.h **** uint16_t PWMC_RLDetectionModeSetDuty(PWMC_Handle_t *pHandle, uint16_t hDuty);
 299:Inc/pwm_curr_fdbk.h **** 
 300:Inc/pwm_curr_fdbk.h **** /* Turns on low sides switches and starts ADC triggerin. */
 301:Inc/pwm_curr_fdbk.h **** void PWMC_RLTurnOnLowSidesAndStart(PWMC_Handle_t *pHandle);
 302:Inc/pwm_curr_fdbk.h **** 
 303:Inc/pwm_curr_fdbk.h **** /* Sets the Callback that the PWMC component shall invoke to get phases current. */
 304:Inc/pwm_curr_fdbk.h **** void PWMC_RegisterGetPhaseCurrentsCallBack(PWMC_GetPhaseCurr_Cb_t pCallBack, PWMC_Handle_t *pHandle
 305:Inc/pwm_curr_fdbk.h **** 
 306:Inc/pwm_curr_fdbk.h **** /* Sets the Callback that the PWMC component shall invoke to switch PWM generation off. */
 307:Inc/pwm_curr_fdbk.h **** void PWMC_RegisterSwitchOffPwmCallBack(PWMC_Generic_Cb_t pCallBack, PWMC_Handle_t *pHandle);
 308:Inc/pwm_curr_fdbk.h **** 
 309:Inc/pwm_curr_fdbk.h **** /* Sets the Callback that the PWMC component shall invoke to switch PWM generation on. */
 310:Inc/pwm_curr_fdbk.h **** void PWMC_RegisterSwitchonPwmCallBack(PWMC_Generic_Cb_t pCallBack, PWMC_Handle_t *pHandle);
 311:Inc/pwm_curr_fdbk.h **** 
 312:Inc/pwm_curr_fdbk.h **** /* Sets the Callback that the PWMC component shall invoke to execute a calibration of the current s
 313:Inc/pwm_curr_fdbk.h **** void PWMC_RegisterReadingCalibrationCallBack(PWMC_Generic_Cb_t pCallBack, PWMC_Handle_t *pHandle);
 314:Inc/pwm_curr_fdbk.h **** 
 315:Inc/pwm_curr_fdbk.h **** /* Sets the Callback that the PWMC component shall invoke to turn low sides on. */
 316:Inc/pwm_curr_fdbk.h **** void PWMC_RegisterTurnOnLowSidesCallBack(PWMC_TurnOnLowSides_Cb_t pCallBack, PWMC_Handle_t *pHandle
 317:Inc/pwm_curr_fdbk.h **** 
 318:Inc/pwm_curr_fdbk.h **** /* Sets the Callback that the PWMC component shall invoke to compute ADC sampling point. */
 319:Inc/pwm_curr_fdbk.h **** void PWMC_RegisterSampPointSectXCallBack(PWMC_SetSampPointSectX_Cb_t pCallBack, PWMC_Handle_t *pHan
 320:Inc/pwm_curr_fdbk.h **** 
ARM GAS  /tmp/ccwX0oqx.s 			page 56


 321:Inc/pwm_curr_fdbk.h **** /* Sets the Callback that the PWMC component shall invoke to set the reference voltage for the over
 322:Inc/pwm_curr_fdbk.h ****   * protection. */
 323:Inc/pwm_curr_fdbk.h **** void PWMC_RegisterOCPSetRefVoltageCallBack(PWMC_SetOcpRefVolt_Cb_t pCallBack, PWMC_Handle_t *pHandl
 324:Inc/pwm_curr_fdbk.h **** 
 325:Inc/pwm_curr_fdbk.h **** /* Sets the Callback that the PWMC component shall invoke to enable the R/L detection mode. */
 326:Inc/pwm_curr_fdbk.h **** void PWMC_RegisterRLDetectionModeEnableCallBack(PWMC_Generic_Cb_t pCallBack, PWMC_Handle_t *pHandle
 327:Inc/pwm_curr_fdbk.h **** 
 328:Inc/pwm_curr_fdbk.h **** /* Sets the Callback that the PWMC component shall invoke to disable the R/L detection mode. */
 329:Inc/pwm_curr_fdbk.h **** void PWMC_RegisterRLDetectionModeDisableCallBack(PWMC_Generic_Cb_t pCallBack, PWMC_Handle_t *pHandl
 330:Inc/pwm_curr_fdbk.h **** 
 331:Inc/pwm_curr_fdbk.h **** /* Sets the Callback that the PWMC component shall invoke to set the duty cycle for the R/L detecti
 332:Inc/pwm_curr_fdbk.h **** void PWMC_RegisterRLDetectionModeSetDutyCallBack(PWMC_RLDetectSetDuty_Cb_t pCallBack, PWMC_Handle_t
 333:Inc/pwm_curr_fdbk.h **** 
 334:Inc/pwm_curr_fdbk.h **** /* Used to clear variables in CPWMC. */
 335:Inc/pwm_curr_fdbk.h **** void PWMC_Clear(PWMC_Handle_t *pHandle);
 336:Inc/pwm_curr_fdbk.h **** 
 337:Inc/pwm_curr_fdbk.h **** /* Converts input currents components Iqd into estimated currents Ia, Ib and Ic. */
 338:Inc/pwm_curr_fdbk.h **** void PWMC_CalcPhaseCurrentsEst(PWMC_Handle_t *pHandle, qd_t Iqd, int16_t hElAngledpp);
 339:Inc/pwm_curr_fdbk.h **** 
 340:Inc/pwm_curr_fdbk.h **** /* Converts input voltage components @f$ V_{\alpha} @f$ and @f$ V_{\beta} @f$ into duty cycles
 341:Inc/pwm_curr_fdbk.h ****  * and feed them to the inverter with overmodulation function. */
 342:Inc/pwm_curr_fdbk.h **** uint16_t PWMC_SetPhaseVoltage_OVM(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta);
 343:Inc/pwm_curr_fdbk.h **** 
 344:Inc/pwm_curr_fdbk.h **** /**
 345:Inc/pwm_curr_fdbk.h ****   * @brief Returns the phase current of the motor as read by the ADC (in s16A unit).
 346:Inc/pwm_curr_fdbk.h ****   *
 347:Inc/pwm_curr_fdbk.h ****   * Returns the current values of phases A & B. Phase C current
 348:Inc/pwm_curr_fdbk.h ****   * can be deduced thanks to the formula:
 349:Inc/pwm_curr_fdbk.h ****   *
 350:Inc/pwm_curr_fdbk.h ****   * @f[
 351:Inc/pwm_curr_fdbk.h ****   * I_{C} = -I_{A} - I_{B}
 352:Inc/pwm_curr_fdbk.h ****   * @f]
 353:Inc/pwm_curr_fdbk.h ****   *
 354:Inc/pwm_curr_fdbk.h ****   * @param  pHandle: Handler of the current instance of the PWM component.
 355:Inc/pwm_curr_fdbk.h ****   * @param  Iab: Pointer to the structure that will receive motor current
 356:Inc/pwm_curr_fdbk.h ****   *         of phases A & B in ElectricalValue format.
 357:Inc/pwm_curr_fdbk.h ****   */
 358:Inc/pwm_curr_fdbk.h **** //cstat !MISRAC2012-Rule-8.13 !RED-func-no-effect
 359:Inc/pwm_curr_fdbk.h **** static inline void PWMC_GetPhaseCurrents(PWMC_Handle_t *pHandle, ab_t *Iab)
 360:Inc/pwm_curr_fdbk.h **** {
 361:Inc/pwm_curr_fdbk.h **** #ifdef NULL_PTR_CHECK_PWR_CUR_FDB
 362:Inc/pwm_curr_fdbk.h ****   if (MC_NULL == pHandle)
 363:Inc/pwm_curr_fdbk.h ****   {
 364:Inc/pwm_curr_fdbk.h ****     /* Nothing to do */
 365:Inc/pwm_curr_fdbk.h ****   }
 366:Inc/pwm_curr_fdbk.h ****   else
 367:Inc/pwm_curr_fdbk.h ****   {
 368:Inc/pwm_curr_fdbk.h **** #endif
 369:Inc/pwm_curr_fdbk.h ****     pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 1275              		.loc 5 369 5 view .LVU357
 1276 0028 0368     		ldr	r3, [r0]
 1277              	.LVL117:
 1278              		.loc 5 369 5 view .LVU358
 1279              	.LBE81:
 1280              	.LBE80:
 684:Src/mc_tasks_foc.c ****   hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 1281              		.loc 1 684 14 view .LVU359
ARM GAS  /tmp/ccwX0oqx.s 			page 57


 1282 002a B2F90460 		ldrsh	r6, [r2, #4]
 1283              	.LVL118:
 684:Src/mc_tasks_foc.c ****   hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 1284              		.loc 1 684 14 view .LVU360
 1285              	.LBE86:
 1286              	.LBE91:
 1287              		.loc 3 123 3 is_stmt 1 view .LVU361
 1288              	.LBB92:
 1289              	.LBB87:
 685:Src/mc_tasks_foc.c ****   PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 1290              		.loc 1 685 3 view .LVU362
 685:Src/mc_tasks_foc.c ****   PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 1291              		.loc 1 685 3 is_stmt 0 view .LVU363
 1292              	.LBE87:
 1293              	.LBE92:
 124:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #endif
 125:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** }
 126:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** 
 127:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** /**
 128:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @brief  Returns the last instantaneous computed electrical speed, expressed in [dpp](measuremen
 129:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @param  pHandle: handler of the current instance of the SpeednPosFdbk component.
 130:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * @retval int16_t rotor instantaneous electrical speed ([dpp](measurement_units.md)).
 131:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *
 132:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * - The control period is the period on which the rotor electrical angle is computed thanks to HA
 133:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   *   functions.
 134:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   * - Called during FOC drive control for Iqd currents regulation.
 135:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   */
 136:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** static inline int16_t SPD_GetInstElSpeedDpp(const SpeednPosFdbk_Handle_t *pHandle)
 137:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** {
 138:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #ifdef NULL_PTR_CHECK_SPD_POS_FBK
 139:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
 140:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #else
 141:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h ****   return (pHandle->InstantaneousElSpeedDpp);
 1294              		.loc 3 141 3 is_stmt 1 view .LVU364
 1295              	.LBB93:
 1296              	.LBB88:
 1297              		.loc 1 686 3 view .LVU365
 1298              	.LBB84:
 1299              	.LBI80:
 359:Inc/pwm_curr_fdbk.h **** {
 1300              		.loc 5 359 20 view .LVU366
 1301              	.LBB82:
 1302              		.loc 5 369 5 view .LVU367
 1303              	.LBE82:
 1304              	.LBE84:
 687:Src/mc_tasks_foc.c ****   RCM_ReadOngoingConv();
 688:Src/mc_tasks_foc.c ****   RCM_ExecNextConv();
 689:Src/mc_tasks_foc.c ****   Ialphabeta = MCM_Clarke(Iab);
 690:Src/mc_tasks_foc.c ****   Iqd = MCM_Park(Ialphabeta, hElAngle);
 691:Src/mc_tasks_foc.c ****   Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 692:Src/mc_tasks_foc.c ****   Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 693:Src/mc_tasks_foc.c ****   Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 694:Src/mc_tasks_foc.c ****   hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 695:Src/mc_tasks_foc.c ****   Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 696:Src/mc_tasks_foc.c ****   hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 697:Src/mc_tasks_foc.c **** 
 698:Src/mc_tasks_foc.c ****   FOCVars[M1].Vqd = Vqd;
ARM GAS  /tmp/ccwX0oqx.s 			page 58


 699:Src/mc_tasks_foc.c ****   FOCVars[M1].Iab = Iab;
 700:Src/mc_tasks_foc.c ****   FOCVars[M1].Ialphabeta = Ialphabeta;
 1305              		.loc 1 700 26 is_stmt 0 view .LVU368
 1306 002e DFF84491 		ldr	r9, .L95+48
 1307              	.LBB85:
 1308              	.LBB83:
 1309              		.loc 5 369 5 view .LVU369
 1310 0032 02A9     		add	r1, sp, #8
 1311              	.LVL119:
 1312              		.loc 5 369 5 view .LVU370
 1313 0034 9847     		blx	r3
 1314              	.LVL120:
 1315              		.loc 5 369 5 view .LVU371
 1316              	.LBE83:
 1317              	.LBE85:
 687:Src/mc_tasks_foc.c ****   RCM_ReadOngoingConv();
 1318              		.loc 1 687 3 is_stmt 1 view .LVU372
 1319 0036 FFF7FEFF 		bl	RCM_ReadOngoingConv
 1320              	.LVL121:
 688:Src/mc_tasks_foc.c ****   Ialphabeta = MCM_Clarke(Iab);
 1321              		.loc 1 688 3 view .LVU373
 1322 003a FFF7FEFF 		bl	RCM_ExecNextConv
 1323              	.LVL122:
 689:Src/mc_tasks_foc.c ****   Iqd = MCM_Park(Ialphabeta, hElAngle);
 1324              		.loc 1 689 3 view .LVU374
 689:Src/mc_tasks_foc.c ****   Iqd = MCM_Park(Ialphabeta, hElAngle);
 1325              		.loc 1 689 16 is_stmt 0 view .LVU375
 1326 003e 0298     		ldr	r0, [sp, #8]
 1327 0040 FFF7FEFF 		bl	MCM_Clarke
 1328              	.LVL123:
 690:Src/mc_tasks_foc.c ****   Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 1329              		.loc 1 690 9 view .LVU376
 1330 0044 3146     		mov	r1, r6
 689:Src/mc_tasks_foc.c ****   Iqd = MCM_Park(Ialphabeta, hElAngle);
 1331              		.loc 1 689 16 view .LVU377
 1332 0046 0390     		str	r0, [sp, #12]
 690:Src/mc_tasks_foc.c ****   Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 1333              		.loc 1 690 3 is_stmt 1 view .LVU378
 690:Src/mc_tasks_foc.c ****   Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 1334              		.loc 1 690 9 is_stmt 0 view .LVU379
 1335 0048 FFF7FEFF 		bl	MCM_Park
 1336              	.LVL124:
 691:Src/mc_tasks_foc.c ****   Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 1337              		.loc 1 691 11 view .LVU380
 1338 004c 404B     		ldr	r3, .L95+12
 691:Src/mc_tasks_foc.c ****   Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 1339              		.loc 1 691 37 view .LVU381
 1340 004e B4F91010 		ldrsh	r1, [r4, #16]
 690:Src/mc_tasks_foc.c ****   Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 1341              		.loc 1 690 9 view .LVU382
 1342 0052 0090     		str	r0, [sp]
 691:Src/mc_tasks_foc.c ****   Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 1343              		.loc 1 691 3 is_stmt 1 view .LVU383
 691:Src/mc_tasks_foc.c ****   Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 1344              		.loc 1 691 74 is_stmt 0 view .LVU384
 1345 0054 00B2     		sxth	r0, r0
 691:Src/mc_tasks_foc.c ****   Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
ARM GAS  /tmp/ccwX0oqx.s 			page 59


 1346              		.loc 1 691 11 view .LVU385
 1347 0056 091A     		subs	r1, r1, r0
 1348 0058 1868     		ldr	r0, [r3]
 1349 005a FFF7FEFF 		bl	PI_Controller
 1350              	.LVL125:
 692:Src/mc_tasks_foc.c ****   Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 1351              		.loc 1 692 74 view .LVU386
 1352 005e BDF90220 		ldrsh	r2, [sp, #2]
 692:Src/mc_tasks_foc.c ****   Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 1353              		.loc 1 692 11 view .LVU387
 1354 0062 3C4B     		ldr	r3, .L95+16
 692:Src/mc_tasks_foc.c ****   Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 1355              		.loc 1 692 37 view .LVU388
 1356 0064 B4F91210 		ldrsh	r1, [r4, #18]
 691:Src/mc_tasks_foc.c ****   Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 1357              		.loc 1 691 11 view .LVU389
 1358 0068 0546     		mov	r5, r0
 1359              	.LVL126:
 692:Src/mc_tasks_foc.c ****   Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 1360              		.loc 1 692 3 is_stmt 1 view .LVU390
 692:Src/mc_tasks_foc.c ****   Vqd = Circle_Limitation(&CircleLimitationM1, Vqd);
 1361              		.loc 1 692 11 is_stmt 0 view .LVU391
 1362 006a 891A     		subs	r1, r1, r2
 1363 006c 1868     		ldr	r0, [r3]
 1364 006e FFF7FEFF 		bl	PI_Controller
 1365              	.LVL127:
 693:Src/mc_tasks_foc.c ****   hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 1366              		.loc 1 693 3 is_stmt 1 view .LVU392
 693:Src/mc_tasks_foc.c ****   hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 1367              		.loc 1 693 9 is_stmt 0 view .LVU393
 1368 0072 ADF80450 		strh	r5, [sp, #4]	@ movhi
 1369 0076 ADF80600 		strh	r0, [sp, #6]	@ movhi
 1370 007a 0199     		ldr	r1, [sp, #4]
 1371 007c 3648     		ldr	r0, .L95+20
 1372              	.LVL128:
 693:Src/mc_tasks_foc.c ****   hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 1373              		.loc 1 693 9 view .LVU394
 1374 007e FFF7FEFF 		bl	Circle_Limitation
 1375              	.LVL129:
 695:Src/mc_tasks_foc.c ****   hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 1376              		.loc 1 695 16 view .LVU395
 1377 0082 3146     		mov	r1, r6
 693:Src/mc_tasks_foc.c ****   hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 1378              		.loc 1 693 9 view .LVU396
 1379 0084 0FFA80FB 		sxth	fp, r0
 1380              	.LVL130:
 693:Src/mc_tasks_foc.c ****   hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 1381              		.loc 1 693 9 view .LVU397
 1382 0088 0514     		asrs	r5, r0, #16
 1383              	.LVL131:
 694:Src/mc_tasks_foc.c ****   Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 1384              		.loc 1 694 3 is_stmt 1 view .LVU398
 694:Src/mc_tasks_foc.c ****   Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 1385              		.loc 1 694 3 is_stmt 0 view .LVU399
 1386              	.LBE88:
 1387              	.LBE93:
 1388              		.loc 3 141 3 is_stmt 1 view .LVU400
ARM GAS  /tmp/ccwX0oqx.s 			page 60


 1389              	.LBB94:
 1390              	.LBB89:
 695:Src/mc_tasks_foc.c ****   hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 1391              		.loc 1 695 3 view .LVU401
 695:Src/mc_tasks_foc.c ****   hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 1392              		.loc 1 695 16 is_stmt 0 view .LVU402
 1393 008a FFF7FEFF 		bl	MCM_Rev_Park
 1394              	.LVL132:
 1395 008e 0146     		mov	r1, r0
 696:Src/mc_tasks_foc.c **** 
 1396              		.loc 1 696 16 view .LVU403
 1397 0090 DAF80000 		ldr	r0, [r10]
 695:Src/mc_tasks_foc.c ****   hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 1398              		.loc 1 695 16 view .LVU404
 1399 0094 0491     		str	r1, [sp, #16]
 696:Src/mc_tasks_foc.c **** 
 1400              		.loc 1 696 3 is_stmt 1 view .LVU405
 696:Src/mc_tasks_foc.c **** 
 1401              		.loc 1 696 16 is_stmt 0 view .LVU406
 1402 0096 FFF7FEFF 		bl	PWMC_SetPhaseVoltage
 1403              	.LVL133:
 1404 009a 0146     		mov	r1, r0
 1405              	.LVL134:
 698:Src/mc_tasks_foc.c ****   FOCVars[M1].Iab = Iab;
 1406              		.loc 1 698 3 is_stmt 1 view .LVU407
 699:Src/mc_tasks_foc.c ****   FOCVars[M1].Ialphabeta = Ialphabeta;
 1407              		.loc 1 699 19 is_stmt 0 view .LVU408
 1408 009c 0298     		ldr	r0, [sp, #8]
 1409 009e 2060     		str	r0, [r4]	@ unaligned
 1410              		.loc 1 700 26 view .LVU409
 1411 00a0 0398     		ldr	r0, [sp, #12]
 1412 00a2 6060     		str	r0, [r4, #4]	@ unaligned
 701:Src/mc_tasks_foc.c ****   FOCVars[M1].Iqd = Iqd;
 1413              		.loc 1 701 19 view .LVU410
 1414 00a4 0098     		ldr	r0, [sp]
 1415 00a6 E060     		str	r0, [r4, #12]	@ unaligned
 1416              	.LBE89:
 1417              	.LBE94:
 625:Src/mc_tasks_foc.c ****   {
 1418              		.loc 1 625 5 view .LVU411
 1419 00a8 0129     		cmp	r1, #1
 1420              	.LBB95:
 1421              	.LBB90:
 702:Src/mc_tasks_foc.c ****   FOCVars[M1].Valphabeta = Valphabeta;
 1422              		.loc 1 702 26 view .LVU412
 1423 00aa 0498     		ldr	r0, [sp, #16]
 703:Src/mc_tasks_foc.c ****   FOCVars[M1].hElAngle = hElAngle;
 1424              		.loc 1 703 24 view .LVU413
 1425 00ac 2684     		strh	r6, [r4, #32]	@ movhi
 698:Src/mc_tasks_foc.c ****   FOCVars[M1].Iab = Iab;
 1426              		.loc 1 698 19 view .LVU414
 1427 00ae A4F816B0 		strh	fp, [r4, #22]	@ movhi
 1428 00b2 2583     		strh	r5, [r4, #24]	@ movhi
 699:Src/mc_tasks_foc.c ****   FOCVars[M1].Ialphabeta = Ialphabeta;
 1429              		.loc 1 699 3 is_stmt 1 view .LVU415
 700:Src/mc_tasks_foc.c ****   FOCVars[M1].Iqd = Iqd;
 1430              		.loc 1 700 3 view .LVU416
ARM GAS  /tmp/ccwX0oqx.s 			page 61


 701:Src/mc_tasks_foc.c ****   FOCVars[M1].Valphabeta = Valphabeta;
 1431              		.loc 1 701 3 view .LVU417
 702:Src/mc_tasks_foc.c ****   FOCVars[M1].hElAngle = hElAngle;
 1432              		.loc 1 702 3 view .LVU418
 702:Src/mc_tasks_foc.c ****   FOCVars[M1].hElAngle = hElAngle;
 1433              		.loc 1 702 26 is_stmt 0 view .LVU419
 1434 00b4 C4F81A00 		str	r0, [r4, #26]	@ unaligned
 1435              		.loc 1 703 3 is_stmt 1 view .LVU420
 704:Src/mc_tasks_foc.c **** 
 705:Src/mc_tasks_foc.c ****   return (hCodeError);
 1436              		.loc 1 705 3 view .LVU421
 1437              	.LVL135:
 1438              		.loc 1 705 3 is_stmt 0 view .LVU422
 1439              	.LBE90:
 1440              	.LBE95:
 625:Src/mc_tasks_foc.c ****   {
 1441              		.loc 1 625 3 is_stmt 1 view .LVU423
 625:Src/mc_tasks_foc.c ****   {
 1442              		.loc 1 625 5 is_stmt 0 view .LVU424
 1443 00b8 2FD0     		beq	.L92
 1444              	.LBB96:
 631:Src/mc_tasks_foc.c ****     STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 1445              		.loc 1 631 5 is_stmt 1 view .LVU425
 631:Src/mc_tasks_foc.c ****     STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 1446              		.loc 1 631 39 is_stmt 0 view .LVU426
 1447 00ba 2848     		ldr	r0, .L95+24
 634:Src/mc_tasks_foc.c ****     STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /* Only in case of Sensor-less */
 1448              		.loc 1 634 11 view .LVU427
 1449 00bc 284C     		ldr	r4, .L95+28
 631:Src/mc_tasks_foc.c ****     STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 1450              		.loc 1 631 39 view .LVU428
 1451 00be FFF7FEFF 		bl	RUC_FirstAccelerationStageReached
 1452              	.LVL136:
 633:Src/mc_tasks_foc.c ****     (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 1453              		.loc 1 633 23 view .LVU429
 1454 00c2 284B     		ldr	r3, .L95+32
 631:Src/mc_tasks_foc.c ****     STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /* Only if sensorless */
 1455              		.loc 1 631 39 view .LVU430
 1456 00c4 0546     		mov	r5, r0
 1457              	.LVL137:
 632:Src/mc_tasks_foc.c ****     STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless 
 1458              		.loc 1 632 5 is_stmt 1 view .LVU431
 632:Src/mc_tasks_foc.c ****     STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /* Only for sensorless 
 1459              		.loc 1 632 27 is_stmt 0 view .LVU432
 1460 00c6 D9F80000 		ldr	r0, [r9]	@ unaligned
 1461 00ca 0690     		str	r0, [sp, #24]
 633:Src/mc_tasks_foc.c ****     (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 1462              		.loc 1 633 5 is_stmt 1 view .LVU433
 1463              	.LVL138:
 633:Src/mc_tasks_foc.c ****     (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 1464              		.loc 1 633 5 is_stmt 0 view .LVU434
 1465              	.LBE96:
 1466              		.file 6 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h"
   1:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** /**
   2:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   ******************************************************************************
   3:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   * @file    bus_voltage_sensor.h
   4:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   * @author  Motor Control SDK Team, ST Microelectronics
ARM GAS  /tmp/ccwX0oqx.s 			page 62


   5:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   * @brief   This file contains all definitions and functions prototypes for the
   6:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   *          BusVoltageSensor component of the Motor Control SDK.
   7:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   ******************************************************************************
   8:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   * @attention
   9:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   *
  10:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  11:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   * All rights reserved.</center></h2>
  12:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   *
  13:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   * This software component is licensed by ST under Ultimate Liberty license
  14:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   * SLA0044, the "License"; You may not use this file except in compliance with
  15:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   * the License. You may obtain a copy of the License at:
  16:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   *                             www.st.com/SLA0044
  17:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   *
  18:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   ******************************************************************************
  19:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   * @ingroup BusVoltageSensor
  20:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   */
  21:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** 
  22:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  23:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** #ifndef BUSVOLTAGESENSOR_H
  24:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** #define BUSVOLTAGESENSOR_H
  25:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** 
  26:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** #ifdef __cplusplus
  27:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** extern "C" {
  28:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** #endif /* __cplusplus */
  29:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** 
  30:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** /* Includes ------------------------------------------------------------------*/
  31:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** #include "mc_type.h"
  32:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** 
  33:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** /** @addtogroup MCSDK
  34:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   * @{
  35:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   */
  36:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** 
  37:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** /** @addtogroup BusVoltageSensor
  38:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   * @{
  39:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   */
  40:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** 
  41:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** /**
  42:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   * @brief  BusVoltageSensor handle definition
  43:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   */
  44:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** typedef struct
  45:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** {
  46:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   SensorType_t SensorType;    /*!< It contains the information about the type
  47:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****                                    of instanced bus voltage sensor object.
  48:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****                                    It can be equal to REAL_SENSOR or
  49:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****                                    VIRTUAL_SENSOR */
  50:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   uint16_t ConversionFactor;  /*!< It is used to convert bus voltage from
  51:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****                                    u16Volts into real Volts (V).
  52:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****                                    1 u16Volt = 65536/ConversionFactor Volts
  53:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****                                    For real sensors ConversionFactor it is
  54:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****                                    equal to the product between the expected MCU
  55:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****                                    voltage and the voltage sensing network
  56:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****                                    attenuation. For virtual sensors it must
  57:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****                                    be equal to 500 */
  58:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** 
  59:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   uint16_t LatestConv;        /*!< It contains latest Vbus converted value
  60:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****                                    expressed in u16Volt format */
  61:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   uint16_t AvBusVoltage_d;    /*!< It contains latest available average Vbus
ARM GAS  /tmp/ccwX0oqx.s 			page 63


  62:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****                                    expressed in u16Volt format */
  63:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   uint16_t FaultState;        /*!< It contains latest Fault code (#MC_NO_ERROR,
  64:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****                                    #MC_OVER_VOLT or #MC_UNDER_VOLT) */
  65:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** } BusVoltageSensor_Handle_t;
  66:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** 
  67:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** 
  68:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** /* Exported functions ------------------------------------------------------- */
  69:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** uint16_t VBS_GetBusVoltage_d(const BusVoltageSensor_Handle_t *pHandle);
  70:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** uint16_t VBS_GetAvBusVoltage_V(const BusVoltageSensor_Handle_t *pHandle);
  71:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** 
  72:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** /**
  73:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   * @brief  It return latest averaged Vbus measurement expressed in u16Volt format
  74:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   * @param  pHandle related Handle of BusVoltageSensor_Handle_t
  75:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   * @retval uint16_t Latest averaged Vbus measurement in u16Volt format
  76:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   */
  77:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** static inline uint16_t VBS_GetAvBusVoltage_d(const BusVoltageSensor_Handle_t *pHandle)
  78:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** {
  79:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** #ifdef NULL_PTR_CHECK_BUS_VOLT
  80:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   uint16_t temp_avBusVoltage_d;
  81:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** 
  82:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   if (MC_NULL == pHandle)
  83:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   {
  84:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****     temp_avBusVoltage_d = 0U;
  85:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   }
  86:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   else
  87:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   {
  88:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****     temp_avBusVoltage_d = pHandle->AvBusVoltage_d;
  89:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   }
  90:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   return (temp_avBusVoltage_d);
  91:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h **** #else
  92:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h ****   return (pHandle->AvBusVoltage_d);
 1467              		.loc 6 92 3 is_stmt 1 view .LVU435
 1468              	.LBB101:
 633:Src/mc_tasks_foc.c ****     (void)STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 1469              		.loc 1 633 21 is_stmt 0 view .LVU436
 1470 00cc DB88     		ldrh	r3, [r3, #6]
 1471 00ce ADF81C30 		strh	r3, [sp, #28]	@ movhi
 634:Src/mc_tasks_foc.c ****     STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /* Only in case of Sensor-less */
 1472              		.loc 1 634 5 is_stmt 1 view .LVU437
 634:Src/mc_tasks_foc.c ****     STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /* Only in case of Sensor-less */
 1473              		.loc 1 634 11 is_stmt 0 view .LVU438
 1474 00d2 2046     		mov	r0, r4
 1475 00d4 05A9     		add	r1, sp, #20
 1476 00d6 FFF7FEFF 		bl	STO_PLL_CalcElAngle
 1477              	.LVL139:
 635:Src/mc_tasks_foc.c ****     if (false == IsAccelerationStageReached)
 1478              		.loc 1 635 5 is_stmt 1 view .LVU439
 1479 00da 2046     		mov	r0, r4
 1480 00dc FFF7FEFF 		bl	STO_PLL_CalcAvrgElSpeedDpp
 1481              	.LVL140:
 636:Src/mc_tasks_foc.c ****     {
 1482              		.loc 1 636 5 view .LVU440
 636:Src/mc_tasks_foc.c ****     {
 1483              		.loc 1 636 8 is_stmt 0 view .LVU441
 1484 00e0 45B1     		cbz	r5, .L93
 643:Src/mc_tasks_foc.c ****     /* Only for sensor-less */
 1485              		.loc 1 643 5 is_stmt 1 view .LVU442
ARM GAS  /tmp/ccwX0oqx.s 			page 64


 645:Src/mc_tasks_foc.c ****     {
 1486              		.loc 1 645 5 view .LVU443
 645:Src/mc_tasks_foc.c ****     {
 1487              		.loc 1 645 25 is_stmt 0 view .LVU444
 1488 00e2 FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 645:Src/mc_tasks_foc.c ****     {
 1489              		.loc 1 645 7 view .LVU445
 1490 00e4 042B     		cmp	r3, #4
 1491 00e6 0DD0     		beq	.L86
 1492              	.L94:
 645:Src/mc_tasks_foc.c ****     {
 1493              		.loc 1 645 33 discriminator 1 view .LVU446
 1494 00e8 132B     		cmp	r3, #19
 1495 00ea 0BD0     		beq	.L86
 1496              	.LBE101:
 655:Src/mc_tasks_foc.c **** 
 1497              		.loc 1 655 3 is_stmt 1 view .LVU447
 657:Src/mc_tasks_foc.c **** 
 1498              		.loc 1 657 1 is_stmt 0 view .LVU448
 1499 00ec 4046     		mov	r0, r8
 1500 00ee 09B0     		add	sp, sp, #36
 1501              	.LCFI16:
 1502              		.cfi_remember_state
 1503              		.cfi_def_cfa_offset 36
 1504              		@ sp needed
 1505 00f0 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1506              	.LVL141:
 1507              	.L93:
 1508              	.LCFI17:
 1509              		.cfi_restore_state
 1510              	.LBB102:
 638:Src/mc_tasks_foc.c ****     }
 1511              		.loc 1 638 7 is_stmt 1 view .LVU449
 1512              	.LBB97:
 1513              	.LBI97:
 1514              		.file 7 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h"
   1:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /**
   2:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   ******************************************************************************
   3:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   * @file    sto_pll_speed_pos_fdbk.h
   4:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   * @author  Motor Control SDK Team, ST Microelectronics
   5:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   * @brief   This file contains all definitions and functions prototypes for the
   6:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   *          State Observer + PLL Speed & Position Feedback component of the Motor
   7:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   *          Control SDK.
   8:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   ******************************************************************************
   9:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   * @attention
  10:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   *
  11:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  12:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   * All rights reserved.</center></h2>
  13:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   *
  14:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   * This software component is licensed by ST under Ultimate Liberty license
  15:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   * SLA0044, the "License"; You may not use this file except in compliance with
  16:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   * the License. You may obtain a copy of the License at:
  17:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   *                             www.st.com/SLA0044
  18:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   *
  19:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   ******************************************************************************
  20:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   * @ingroup SpeednPosFdbk_STO_PLL
  21:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   */
ARM GAS  /tmp/ccwX0oqx.s 			page 65


  22:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
  23:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Define to prevent recursive inclusion -------------------------------------*/
  24:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** #ifndef STO_PLL_SPEEDNPOSFDBK_H
  25:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** #define STO_PLL_SPEEDNPOSFDBK_H
  26:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
  27:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Includes ------------------------------------------------------------------*/
  28:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** #include "speed_pos_fdbk.h"
  29:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** #include "sto_speed_pos_fdbk.h"
  30:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** #include "pid_regulator.h"
  31:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
  32:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /** @addtogroup MCSDK
  33:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   * @{
  34:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   */
  35:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
  36:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /** @addtogroup SpeednPosFdbk_STO_PLL
  37:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   * @{
  38:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   */
  39:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
  40:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
  41:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /**
  42:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   * @brief Handle of the Speed and Position Feedback STO PLL component.
  43:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   *
  44:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   */
  45:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
  46:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** typedef struct
  47:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** {
  48:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   SpeednPosFdbk_Handle_t _Super;          /**< @brief Speed and torque component handler. */
  49:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
  50:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int16_t  hC1;                           /*!< @brief State observer constant @f$ C_1 @f$.
  51:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *
  52:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  Can be computed as : @f$ (F_1 × R_s) / (L_s × Stat
  53:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  @f$ F_1 @f$ in Hertz [**Hz**]. \n
  54:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  @f$ R_s @f$ in Ohm @f$[\Omega]@f$. \n
  55:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  @f$ L_s @f$ in Henry [**H**]. \n
  56:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  State Observer Execution Rate in Hertz [**Hz**].
  57:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             */
  58:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int16_t  hC2;                           /**< @brief State observer constant @f$ C_2 @f$.
  59:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *
  60:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  Can be computed as : @f$ (F_1 × K_1) / (State Obser
  61:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  @f$ F_1 @f$ in Hertz [**Hz**]. \n 
  62:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  @f$ K_1 @f$ being one of the two observer gains. \n
  63:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                      observer execution rate [Hz] being K1 one
  64:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                      of the two observer gains   */
  65:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int16_t  hC3;                 /*!< Variable containing state observer constant
  66:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *
  67:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  Can be computed as : @f$ (F_1 × Max Application Spe
  68:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  @f$ F_1 @f$ in Hertz [**Hz**]. \n
  69:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  Max Application Speed in Rotation per minute [**rpm*
  70:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  Motor Bemf Constant in Voltage line to line root mea
  71:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  @f$ L_s @f$ in Henry [**H**]. \n
  72:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  Max Measurable Current in Ampere [**A**]. \n
  73:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  State Observer Execution Rate in Hertz [**Hz**].
  74:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             */
  75:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int16_t  hC4;                           /**< @brief State Observer constant @f$ C_4 @f$.
  76:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *
  77:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  Can be computed as @f$ K_2 × Max Measurable Current
  78:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  @f$ K_2 @f$ being one of the two observer gains. \n
ARM GAS  /tmp/ccwX0oqx.s 			page 66


  79:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  Max Measurable Current in Ampere [**A**]. \n
  80:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  Max Application Speed in Rotation per minute [**rpm*
  81:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  Motor Bemf Constant in Voltage line to line root mea
  82:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  State Observer Execution Rate in Hertz [**Hz**]. \n
  83:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             */
  84:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int16_t  hC5;                           /**< @brief State observer constant @f$ C_5 @f$. 
  85:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *
  86:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  Can be computed as @f$ F_1 × Max Measurable Voltage
  87:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  @f$ F_1 @f$ in Hertz [**Hz**]. \n
  88:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  Max Measurable Voltage in Volt [**V**]. \n
  89:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  @f$ L_s @f$ in Henry [**H**]. \n
  90:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  Max Measurable Current in Ampere [**A**]. \n
  91:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  State Observer Execution Rate in Hertz [**Hz**].
  92:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             */
  93:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int16_t  hC6;                           /**< @brief State observer constant @f$ C_6 @f$. Computed
  94:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   
  95:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int16_t  hF1;                           /**< @brief State observer scaling factor @f$ F_1 @f$. */
  96:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int16_t  hF2;                           /**< @brief State observer scaling factor @f$ F_2 @f$. */
  97:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int16_t  hF3;                           /**< @brief State observer scaling factor @f$ F_3 @f$. */
  98:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   uint16_t F3POW2;                        /**< @brief State observer scaling factor @f$ F_3 @f$ exp
  99:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *
 100:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  E.g. If gain divisor is 512 the value must be 9 beca
 101:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             */
 102:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   PID_Handle_t PIRegulator;               /**< @brief PI regulator component handle, used for PLL i
 103:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int32_t Ialfa_est;                      /**< @brief Estimated @f$ I_{alpha} @f$ current. */
 104:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int32_t Ibeta_est;                      /**< @brief Estimated @f$ I_{beta} @f$ current. */
 105:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int32_t wBemf_alfa_est;                 /**< @brief Estimated Bemf alpha. */
 106:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int32_t wBemf_beta_est;                 /**< @brief Estimated Bemf beta. */
 107:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int16_t hBemf_alfa_est;                 /**< @brief Estimated Bemf alpha in int16_t format. */
 108:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int16_t hBemf_beta_est;                 /**< @brief Estimated Bemf beta in int16_t format. */
 109:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int16_t Speed_Buffer[64];               /**< @brief Estimated speed FIFO, it contains latest Spee
 110:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   uint8_t Speed_Buffer_Index;             /**< @brief Index of latest estimated speed in buffer Spe
 111:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   bool IsSpeedReliable;                   /**< @brief Estimated speed reliability information.
 112:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *
 113:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  Updated during speed average computation in STO_PLL_
 114:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  True if the speed measurement variance is lower than
 115:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             */
 116:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   uint8_t ConsistencyCounter;             /**< @brief Counter of passed tests for start-up validati
 117:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   uint8_t ReliabilityCounter;             /**< @brief Counter for checking reliability of Bemf and 
 118:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   bool IsAlgorithmConverged;              /**< @brief Observer convergence flag. */
 119:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   bool IsBemfConsistent;                  /**< @brief Reliability of estimated Bemf flag.
 120:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *
 121:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  Updated by STO_PLL_CalcAvrgMecSpeedUnit, set to true
 122:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             */
 123:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int32_t Obs_Bemf_Level;                 /**< @brief Magnitude of observed Bemf level squared. */
 124:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int32_t Est_Bemf_Level;                 /**< @brief Magnitude of estimated Bemf Level squared bas
 125:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   bool EnableDualCheck;                   /**< @brief Enable additional reliability check based on 
 126:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int32_t DppBufferSum;                   /**< @brief Sum of speed buffer elements [**DPP**]. */
 127:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int16_t SpeedBufferOldestEl;            /**< @brief Oldest element of the speed buffer. */
 128:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 129:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   uint8_t SpeedBufferSizeUnit;            /**< @brief Depth of FIFO used to calculate the average e
 130:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *         Must be an integer number in range[1..64].
 131:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             */
 132:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   uint8_t SpeedBufferSizeDpp;             /**< @brief Depth of FIFO used to calculate both average 
 133:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *         Must be an integer number between 1 and Speed
 134:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             */
 135:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   uint16_t VariancePercentage;            /**< @brief Maximum allowed variance of speed estimation.
ARM GAS  /tmp/ccwX0oqx.s 			page 67


 136:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 137:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   uint8_t SpeedValidationBand_H;          /**< @brief Upper bound below which the estimated speed i
 138:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *         despite exceeding the force stator electrical
 139:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *         during start-up. The measurement unit is 1/16
 140:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *         speed.
 141:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             */
 142:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   uint8_t SpeedValidationBand_L;          /**< @brief Lower bound above which the estimated speed i
 143:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *         despite subceeding the force stator electrica
 144:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *         during start-up. The measurement unit is 1/16
 145:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *         speed.
 146:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             */
 147:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   uint16_t MinStartUpValidSpeed;          /**< @brief Absolute value of minimum mechanical
 148:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *         speed required to validate the start-up.
 149:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *         Expressed in the unit defined by #SPEED_UNIT.
 150:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             */
 151:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   uint8_t StartUpConsistThreshold;        /**< @brief Number of consecutive tests on speed
 152:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *         consistency to be passed before
 153:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *         validating the start-up.
 154:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             */
 155:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   uint8_t BemfConsistencyCheck;           /**< @brief Degree of consistency of the observed Bemfs. 
 156:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *         Must be an integer number ranging from 1 (ver
 157:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *         consistency) down to 64 (very poor consistenc
 158:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             */
 159:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   uint8_t BemfConsistencyGain;            /**< @brief Gain to be applied when checking Bemfs consis
 160:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *         Default value is 64 (neutral), max value 105
 161:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *         (x1.64 amplification), min value 1 (/64 atten
 162:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             */
 163:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   uint16_t MaxAppPositiveMecSpeedUnit;    /**< @brief Maximum positive value of rotor speed. \n
 164:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *         Expressed in the unit defined by #SPEED_UNIT.
 165:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *         Can be x1.1 greater than max application spee
 166:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             */
 167:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   uint16_t F1LOG;                         /**< @brief @f$ F_1 @f$ gain divisor expressed as power o
 168:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *
 169:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  E.g. if gain divisor is 512 the value must be 9 beca
 170:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             */
 171:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   uint16_t F2LOG;                         /**< @brief @f$ F_2 @f$ gain divisor expressed as power o
 172:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *
 173:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  E.g. if gain divisor is 512 the value must be 9 beca
 174:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             */
 175:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   uint16_t SpeedBufferSizeDppLOG;         /**< @brief bSpeedBufferSizedpp expressed as power of 2.
 176:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *
 177:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             *  E.g. if gain divisor is 512 the value must be 9 beca
 178:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****                                             */
 179:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   bool ForceConvergency;                  /**< @brief Variable to force observer convergence. */
 180:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   bool ForceConvergency2;                 /**< @brief Variable to force observer convergence. */
 181:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 182:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   int8_t hForcedDirection;                /**< @brief Variable to force rotation direction. */
 183:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 184:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** } STO_PLL_Handle_t;
 185:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 186:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 187:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Exported functions ------------------------------------------------------- */
 188:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 189:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Initializes the handler of STate Observer (STO) PLL component */
 190:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** void STO_PLL_Init(STO_PLL_Handle_t *pHandle);
 191:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 192:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Necessary empty return to implement fictitious IRQ_Handler */
ARM GAS  /tmp/ccwX0oqx.s 			page 68


 193:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** void STO_PLL_Return(STO_PLL_Handle_t *pHandle, uint8_t flag);
 194:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 195:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Clears state observer component by re-initializing private variables in the handler */
 196:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** void STO_PLL_Clear(STO_PLL_Handle_t *pHandle);
 197:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 198:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Calculates the estimated electrical angle */
 199:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs);
 200:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 201:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Computes and returns the average mechanical speed */
 202:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** bool STO_PLL_CalcAvrgMecSpeedUnit(STO_PLL_Handle_t *pHandle, int16_t *pMecSpeedUnit);
 203:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 204:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Resets the PLL integral term during on-the-fly startup */
 205:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** void STO_OTF_ResetPLL(STO_Handle_t *pHandle);
 206:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 207:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Checks if the state observer algorithm converged */
 208:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** bool STO_PLL_IsObserverConverged(STO_PLL_Handle_t *pHandle, int16_t *phForcedMecSpeedUnit);
 209:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 210:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Computes and updates the average electrical speed */
 211:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** void STO_PLL_CalcAvrgElSpeedDpp(STO_PLL_Handle_t *pHandle);
 212:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 213:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Exports estimated Bemf alpha-beta from the handler */
 214:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** alphabeta_t STO_PLL_GetEstimatedBemf(STO_PLL_Handle_t *pHandle);
 215:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 216:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Exports from the handler the stator current alpha-beta as estimated by state observer */
 217:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** alphabeta_t STO_PLL_GetEstimatedCurrent(STO_PLL_Handle_t *pHandle);
 218:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 219:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Stores in the handler the new values for observer gains */
 220:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** void STO_PLL_SetObserverGains(STO_PLL_Handle_t *pHandle, int16_t hhC1, int16_t hhC2);
 221:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 222:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Exports current observer gains from the handler to parameters hhC2 and hhC4 */
 223:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** void STO_PLL_GetObserverGains(STO_PLL_Handle_t *pHandle, int16_t *phC2, int16_t *phC4);
 224:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 225:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Exports the current PLL gains from the handler to parameters pPgain and pIgain */
 226:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** void STO_GetPLLGains(STO_PLL_Handle_t *pHandle, int16_t *pPgain, int16_t *pIgain);
 227:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 228:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Empty function. Could be declared to set instantaneous information on rotor mechanical angle */
 229:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** void STO_PLL_SetMecAngle(STO_PLL_Handle_t *pHandle, int16_t hMecAngle);
 230:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 231:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Enables/Disables additional reliability check based on observed Bemf */
 232:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** void STO_PLL_BemfConsistencyCheckSwitch(STO_PLL_Handle_t *pHandle, bool bSel);
 233:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 234:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Checks if the Bemf is consistent */
 235:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** bool STO_PLL_IsBemfConsistent(STO_PLL_Handle_t *pHandle);
 236:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 237:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Checks the value of the variance */
 238:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** bool STO_PLL_IsVarianceTight(const STO_Handle_t *pHandle);
 239:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 240:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Forces the state-observer to declare convergency */
 241:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** void STO_PLL_ForceConvergency1(STO_Handle_t *pHandle);
 242:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 243:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Forces the state-observer to declare convergency */
 244:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** void STO_PLL_ForceConvergency2(STO_Handle_t *pHandle);
 245:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 246:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /* Sets the rotation direction in the handler */
 247:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** __weak void STO_SetDirection(STO_PLL_Handle_t *pHandle, int8_t direction);
 248:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 249:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /**
ARM GAS  /tmp/ccwX0oqx.s 			page 69


 250:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   * @brief  Stores in @p pHandle the new values @p hPgain and @p hIgain for PLL gains.
 251:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   * 
 252:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   */
 253:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** static inline void STO_SetPLLGains(STO_PLL_Handle_t *pHandle, int16_t hPgain, int16_t hIgain)
 254:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** {
 255:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** #ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
 256:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   if (MC_NULL == pHandle)
 257:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   {
 258:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****     /* Nothing to do */
 259:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   }
 260:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   else
 261:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   {
 262:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** #endif
 263:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****     PID_SetKP(&pHandle->PIRegulator, hPgain);
 264:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****     PID_SetKI(&pHandle->PIRegulator, hIgain);
 265:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** #ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
 266:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   }
 267:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** #endif
 268:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** }
 269:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** 
 270:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** /**
 271:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   * @brief  Resets the PLL integral term.
 272:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   * 
 273:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   * @param  pHandle: Handler of the current instance of the STO component.
 274:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   */
 275:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** static inline void STO_ResetPLL(STO_PLL_Handle_t *pHandle)
 1515              		.loc 7 275 20 view .LVU450
 1516              	.LBB98:
 276:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** {
 277:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** #ifdef NULL_PTR_CHECK_STO_PLL_SPD_POS_FDB
 278:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   if (MC_NULL == pHandle)
 279:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   {
 280:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****     /* Nothing to do */
 281:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   }
 282:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   else
 283:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****   {
 284:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h **** #endif
 285:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h ****     PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 1517              		.loc 7 285 5 view .LVU451
 1518 00f4 2946     		mov	r1, r5
 1519 00f6 04F13400 		add	r0, r4, #52
 1520 00fa FFF7FEFF 		bl	PID_SetIntegralTerm
 1521              	.LVL142:
 1522              	.LBE98:
 1523              	.LBE97:
 643:Src/mc_tasks_foc.c ****     /* Only for sensor-less */
 1524              		.loc 1 643 5 view .LVU452
 645:Src/mc_tasks_foc.c ****     {
 1525              		.loc 1 645 5 view .LVU453
 645:Src/mc_tasks_foc.c ****     {
 1526              		.loc 1 645 25 is_stmt 0 view .LVU454
 1527 00fe FB7F     		ldrb	r3, [r7, #31]	@ zero_extendqisi2
 645:Src/mc_tasks_foc.c ****     {
 1528              		.loc 1 645 7 view .LVU455
 1529 0100 042B     		cmp	r3, #4
 1530 0102 F1D1     		bne	.L94
 1531              	.LVL143:
ARM GAS  /tmp/ccwX0oqx.s 			page 70


 1532              	.L86:
 1533              	.LBB99:
 647:Src/mc_tasks_foc.c ****       (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 1534              		.loc 1 647 7 is_stmt 1 view .LVU456
 647:Src/mc_tasks_foc.c ****       (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 1535              		.loc 1 647 7 is_stmt 0 view .LVU457
 1536              	.LBE99:
 1537              	.LBE102:
 123:MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h **** #endif
 1538              		.loc 3 123 3 is_stmt 1 view .LVU458
 1539              	.LBB103:
 1540              	.LBB100:
 647:Src/mc_tasks_foc.c ****       (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 1541              		.loc 1 647 15 is_stmt 0 view .LVU459
 1542 0104 A388     		ldrh	r3, [r4, #4]
 648:Src/mc_tasks_foc.c ****     }
 1543              		.loc 1 648 13 view .LVU460
 1544 0106 1848     		ldr	r0, .L95+36
 647:Src/mc_tasks_foc.c ****       (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 1545              		.loc 1 647 15 view .LVU461
 1546 0108 ADF81030 		strh	r3, [sp, #16]	@ movhi
 648:Src/mc_tasks_foc.c ****     }
 1547              		.loc 1 648 7 is_stmt 1 view .LVU462
 648:Src/mc_tasks_foc.c ****     }
 1548              		.loc 1 648 13 is_stmt 0 view .LVU463
 1549 010c 04A9     		add	r1, sp, #16
 1550 010e FFF7FEFF 		bl	VSS_CalcElAngle
 1551              	.LVL144:
 1552              	.LBE100:
 1553              	.LBE103:
 655:Src/mc_tasks_foc.c **** 
 1554              		.loc 1 655 3 is_stmt 1 view .LVU464
 657:Src/mc_tasks_foc.c **** 
 1555              		.loc 1 657 1 is_stmt 0 view .LVU465
 1556 0112 4046     		mov	r0, r8
 1557 0114 09B0     		add	sp, sp, #36
 1558              	.LCFI18:
 1559              		.cfi_remember_state
 1560              		.cfi_def_cfa_offset 36
 1561              		@ sp needed
 1562 0116 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1563              	.LVL145:
 1564              	.L92:
 1565              	.LCFI19:
 1566              		.cfi_restore_state
 627:Src/mc_tasks_foc.c ****   }
 1567              		.loc 1 627 5 is_stmt 1 view .LVU466
 1568 011a 0022     		movs	r2, #0
 1569 011c 0948     		ldr	r0, .L95
 1570 011e FFF7FEFF 		bl	MCI_FaultProcessing
 1571              	.LVL146:
 655:Src/mc_tasks_foc.c **** 
 1572              		.loc 1 655 3 view .LVU467
 657:Src/mc_tasks_foc.c **** 
 1573              		.loc 1 657 1 is_stmt 0 view .LVU468
 1574 0122 4046     		mov	r0, r8
 1575 0124 09B0     		add	sp, sp, #36
ARM GAS  /tmp/ccwX0oqx.s 			page 71


 1576              	.LCFI20:
 1577              		.cfi_remember_state
 1578              		.cfi_def_cfa_offset 36
 1579              		@ sp needed
 1580 0126 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 1581              	.LVL147:
 1582              	.L91:
 1583              	.LCFI21:
 1584              		.cfi_restore_state
 605:Src/mc_tasks_foc.c ****     {
 1585              		.loc 1 605 5 is_stmt 1 view .LVU469
 605:Src/mc_tasks_foc.c ****     {
 1586              		.loc 1 605 36 is_stmt 0 view .LVU470
 1587 012a 104D     		ldr	r5, .L95+40
 605:Src/mc_tasks_foc.c ****     {
 1588              		.loc 1 605 10 view .LVU471
 1589 012c 2868     		ldr	r0, [r5]
 1590 012e FFF7FEFF 		bl	REMNG_RampCompleted
 1591              	.LVL148:
 605:Src/mc_tasks_foc.c ****     {
 1592              		.loc 1 605 8 view .LVU472
 1593 0132 0028     		cmp	r0, #0
 1594 0134 7FF471AF 		bne	.L81
 607:Src/mc_tasks_foc.c ****     }
 1595              		.loc 1 607 7 is_stmt 1 view .LVU473
 607:Src/mc_tasks_foc.c ****     }
 1596              		.loc 1 607 39 is_stmt 0 view .LVU474
 1597 0138 2868     		ldr	r0, [r5]
 1598 013a FFF7FEFF 		bl	REMNG_Calc
 1599              	.LVL149:
 607:Src/mc_tasks_foc.c ****     }
 1600              		.loc 1 607 30 view .LVU475
 1601 013e 2082     		strh	r0, [r4, #16]	@ movhi
 1602 0140 6BE7     		b	.L81
 1603              	.L96:
 1604 0142 00BF     		.align	2
 1605              	.L95:
 1606 0144 00000000 		.word	Mci
 1607 0148 00000000 		.word	FOCVars
 1608 014c 00000000 		.word	pSTC
 1609 0150 00000000 		.word	pPIDIq
 1610 0154 00000000 		.word	pPIDId
 1611 0158 00000000 		.word	CircleLimitationM1
 1612 015c 00000000 		.word	RevUpControlM1
 1613 0160 00000000 		.word	STO_PLL_M1
 1614 0164 00000000 		.word	BusVoltageSensor_M1
 1615 0168 00000000 		.word	VirtualSpeedSensorM1
 1616 016c 00000000 		.word	pREMNG
 1617 0170 00000000 		.word	pwmcHandle
 1618 0174 04000000 		.word	FOCVars+4
 1619              		.cfi_endproc
 1620              	.LFE1472:
 1622              		.section	.bss.hBootCapDelayCounterM1,"aw",%nobits
 1623              		.align	1
 1626              	hBootCapDelayCounterM1:
 1627 0000 0000     		.space	2
 1628              		.section	.bss.hStopPermanencyCounterM1,"aw",%nobits
ARM GAS  /tmp/ccwX0oqx.s 			page 72


 1629              		.align	1
 1632              	hStopPermanencyCounterM1:
 1633 0000 0000     		.space	2
 1634              		.weak	STO_SetDirection
 1635              		.text
 1636              	.Letext0:
 1637              		.file 8 "/usr/lib/gcc/arm-none-eabi/8.3.1/include/stdint.h"
 1638              		.file 9 "Drivers/CMSIS/Include/core_cm4.h"
 1639              		.file 10 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/system_stm32g4xx.h"
 1640              		.file 11 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 1641              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 1642              		.file 13 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash.h"
 1643              		.file 14 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_uart.h"
 1644              		.file 15 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal.h"
 1645              		.file 16 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 1646              		.file 17 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 1647              		.file 18 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 1648              		.file 19 "Inc/mc_type.h"
 1649              		.file 20 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pid_regulator.h"
 1650              		.file 21 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/virtual_speed_sensor.h"
 1651              		.file 22 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_speed_pos_fdbk.h"
 1652              		.file 23 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/revup_ctrl.h"
 1653              		.file 24 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/ntc_temperature_sensor.h"
 1654              		.file 25 "Inc/mc_interface.h"
 1655              		.file 26 "Inc/mc_configuration_registers.h"
 1656              		.file 27 "Inc/regular_conversion_manager.h"
 1657              		.file 28 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/r_divider_bus_voltage_sensor.h"
 1658              		.file 29 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/esc.h"
 1659              		.file 30 "Inc/mc_config_common.h"
 1660              		.file 31 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pqd_motor_power_measurement.h"
 1661              		.file 32 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/G4xx/Inc/r3_2_g4xx_pwm_curr_fdbk.h"
 1662              		.file 33 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/ramp_ext_mngr.h"
 1663              		.file 34 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/circle_limitation.h"
 1664              		.file 35 "Inc/mc_config.h"
 1665              		.file 36 "Inc/mc_parameters.h"
 1666              		.file 37 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcptl.h"
 1667              		.file 38 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcp.h"
 1668              		.file 39 "Inc/aspep.h"
 1669              		.file 40 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcpa.h"
 1670              		.file 41 "Inc/mcp_config.h"
 1671              		.file 42 "Inc/mc_math.h"
 1672              		.file 43 "Inc/mc_tasks.h"
 1673              		.file 44 "Inc/pwm_common.h"
ARM GAS  /tmp/ccwX0oqx.s 			page 73


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mc_tasks_foc.c
     /tmp/ccwX0oqx.s:18     .text.FOC_Clear:0000000000000000 $t
     /tmp/ccwX0oqx.s:27     .text.FOC_Clear:0000000000000000 FOC_Clear
     /tmp/ccwX0oqx.s:132    .text.FOC_Clear:0000000000000068 $d
     /tmp/ccwX0oqx.s:141    .text.FOC_Init:0000000000000000 $t
     /tmp/ccwX0oqx.s:149    .text.FOC_Init:0000000000000000 FOC_Init
     /tmp/ccwX0oqx.s:303    .text.FOC_Init:00000000000000a4 $d
     /tmp/ccwX0oqx.s:323    .text.TSK_MF_StopProcessing:0000000000000000 $t
     /tmp/ccwX0oqx.s:331    .text.TSK_MF_StopProcessing:0000000000000000 TSK_MF_StopProcessing
     /tmp/ccwX0oqx.s:374    .text.TSK_MF_StopProcessing:000000000000002c $d
     /tmp/ccwX0oqx.s:380    .text.FOC_InitAdditionalMethods:0000000000000000 $t
     /tmp/ccwX0oqx.s:388    .text.FOC_InitAdditionalMethods:0000000000000000 FOC_InitAdditionalMethods
     /tmp/ccwX0oqx.s:404    .text.FOC_CalcCurrRef:0000000000000000 $t
     /tmp/ccwX0oqx.s:412    .text.FOC_CalcCurrRef:0000000000000000 FOC_CalcCurrRef
     /tmp/ccwX0oqx.s:542    .text.FOC_CalcCurrRef:0000000000000044 $d
     /tmp/ccwX0oqx.s:548    .text.TSK_MediumFrequencyTaskM1:0000000000000000 $t
     /tmp/ccwX0oqx.s:556    .text.TSK_MediumFrequencyTaskM1:0000000000000000 TSK_MediumFrequencyTaskM1
     /tmp/ccwX0oqx.s:635    .text.TSK_MediumFrequencyTaskM1:0000000000000044 $d
     /tmp/ccwX0oqx.s:655    .text.TSK_MediumFrequencyTaskM1:0000000000000094 $t
     /tmp/ccwX0oqx.s:1170   .text.TSK_MediumFrequencyTaskM1:00000000000002e4 $d
     /tmp/ccwX0oqx.s:1184   .text.FOC_HighFrequencyTask:0000000000000000 $t
     /tmp/ccwX0oqx.s:1192   .text.FOC_HighFrequencyTask:0000000000000000 FOC_HighFrequencyTask
     /tmp/ccwX0oqx.s:1606   .text.FOC_HighFrequencyTask:0000000000000144 $d
     /tmp/ccwX0oqx.s:1623   .bss.hBootCapDelayCounterM1:0000000000000000 $d
     /tmp/ccwX0oqx.s:1626   .bss.hBootCapDelayCounterM1:0000000000000000 hBootCapDelayCounterM1
     /tmp/ccwX0oqx.s:1629   .bss.hStopPermanencyCounterM1:0000000000000000 $d
     /tmp/ccwX0oqx.s:1632   .bss.hStopPermanencyCounterM1:0000000000000000 hStopPermanencyCounterM1

UNDEFINED SYMBOLS
PID_SetIntegralTerm
STC_Clear
PWMC_SwitchOffPWM
FOCVars
pPIDIq
pPIDId
pSTC
pwmcHandle
R3_2_Init
startTimers
PID_HandleInit
STO_PLL_Init
STC_Init
RUC_Init
REMNG_Init
STC_GetDefaultIqdref
STC_GetMecSpeedRefUnitDefault
MCI_ExecSpeedRamp
PIDSpeedHandle_M1
PWM_Handle_M1
VirtualSpeedSensorM1
RevUpControlM1
STO_M1
PIDIqHandle_M1
PIDIdHandle_M1
pMPM
RampExtMngrHFParamsM1
ARM GAS  /tmp/ccwX0oqx.s 			page 74


BusVoltageSensor_M1
pREMNG
Mci
STO_PLL_M1
R3_2_SwitchOffPWM
TSK_SetStopPermanencyTimeM1
STC_CalcTorqueReference
STO_PLL_CalcAvrgMecSpeedUnit
PQD_CalcElMotorPower
MCI_GetCurrentFaults
MCI_GetOccurredFaults
RUC_Exec
MCI_FaultProcessing
PWMC_CurrentReadingCalibr
R3_2_TurnOnLowSides
TSK_SetChargeBootCapDelayM1
TSK_ChargeBootCapDelayHasElapsedM1
STC_SetSpeedSensor
STO_PLL_Clear
PWMC_SwitchOnPWM
TSK_StopPermanencyTimeHasElapsedM1
VSS_Clear
MCI_ExecBufferedCommands
VSS_CalcAvrgMecSpeedUnit
RUC_FirstAccelerationStageReached
STO_PLL_IsObserverConverged
MCI_GetImposedMotorDirection
STO_SetDirection
VSS_SetStartTransition
MCM_Park
REMNG_ExecRamp
RUC_Clear
VSS_TransitionEnded
PID_GetKIDivisor
STC_ForceSpeedReferenceToCurrentSpeed
RCM_ReadOngoingConv
RCM_ExecNextConv
MCM_Clarke
PI_Controller
Circle_Limitation
MCM_Rev_Park
PWMC_SetPhaseVoltage
STO_PLL_CalcElAngle
STO_PLL_CalcAvrgElSpeedDpp
VSS_CalcElAngle
REMNG_RampCompleted
REMNG_Calc
CircleLimitationM1
