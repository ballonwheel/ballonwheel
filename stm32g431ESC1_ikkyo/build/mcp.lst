ARM GAS  /tmp/cc8LTqb2.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"mcp.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.RI_SetRegCommandParser,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	RI_SetRegCommandParser
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	RI_SetRegCommandParser:
  28              	.LVL0:
  29              	.LFB1466:
  30              		.file 1 "Src/mcp.c"
   1:Src/mcp.c     **** 
   2:Src/mcp.c     **** /**
   3:Src/mcp.c     ****   ******************************************************************************
   4:Src/mcp.c     ****   * @file    mcp.c
   5:Src/mcp.c     ****   * @author  Motor Control SDK Team, ST Microelectronics
   6:Src/mcp.c     ****   * @brief   This file provides firmware functions that implement the MCP protocol
   7:Src/mcp.c     ****   *
   8:Src/mcp.c     ****   *
   9:Src/mcp.c     ****   ******************************************************************************
  10:Src/mcp.c     ****   * @attention
  11:Src/mcp.c     ****   *
  12:Src/mcp.c     ****   * <h2><center>&copy; Copyright (c) 2024 STMicroelectronics.
  13:Src/mcp.c     ****   * All rights reserved.</center></h2>
  14:Src/mcp.c     ****   *
  15:Src/mcp.c     ****   * This software component is licensed by ST under Ultimate Liberty license
  16:Src/mcp.c     ****   * SLA0044, the "License"; You may not use this file except in compliance with
  17:Src/mcp.c     ****   * the License. You may obtain a copy of the License at:
  18:Src/mcp.c     ****   *                             www.st.com/SLA0044
  19:Src/mcp.c     ****   *
  20:Src/mcp.c     ****   ******************************************************************************
  21:Src/mcp.c     ****   */
  22:Src/mcp.c     **** 
  23:Src/mcp.c     **** #include "mc_type.h"
  24:Src/mcp.c     **** #include "mcp.h"
  25:Src/mcp.c     **** #include "register_interface.h"
  26:Src/mcp.c     **** #include "mc_config.h"
  27:Src/mcp.c     **** #include "mcp_config.h"
  28:Src/mcp.c     **** #include "mc_api.h"
ARM GAS  /tmp/cc8LTqb2.s 			page 2


  29:Src/mcp.c     **** 
  30:Src/mcp.c     **** /** @addtogroup MCSDK
  31:Src/mcp.c     ****   * @{
  32:Src/mcp.c     ****   */
  33:Src/mcp.c     **** 
  34:Src/mcp.c     **** /** @defgroup MCP Motor Control Protocol
  35:Src/mcp.c     ****   *
  36:Src/mcp.c     ****   * @brief Motor Control Protocol components of the Motor Control SDK.
  37:Src/mcp.c     ****   *
  38:Src/mcp.c     ****   * These components implement the features needed to drive and monitor motor control applications 
  39:Src/mcp.c     ****   * They mainly focus on the communication with the controller, both on the receiving and the trans
  40:Src/mcp.c     ****   *
  41:Src/mcp.c     ****   * @{
  42:Src/mcp.c     ****   */
  43:Src/mcp.c     **** 
  44:Src/mcp.c     **** /**
  45:Src/mcp.c     ****   * @brief  Parses the payload in the received packet and call the required function in order to mo
  46:Src/mcp.c     ****   *
  47:Src/mcp.c     ****   * The function called depends on the targeted motor and/or targeted register : RI_SetRegisterGlob
  48:Src/mcp.c     ****   *
  49:Src/mcp.c     ****   * @param  pHandle Handler of the current instance of the MCP component
  50:Src/mcp.c     ****   * @param  txSyncFreeSpace Space available for synchronous transmission
  51:Src/mcp.c     ****   *
  52:Src/mcp.c     ****   * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
  53:Src/mcp.c     ****   */
  54:Src/mcp.c     **** uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
  55:Src/mcp.c     **** {
  31              		.loc 1 55 1 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 16
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  35              		.loc 1 55 1 is_stmt 0 view .LVU1
  36 0000 2DE9F04F 		push	{r4, r5, r6, r7, r8, r9, r10, fp, lr}
  37              	.LCFI0:
  38              		.cfi_def_cfa_offset 36
  39              		.cfi_offset 4, -36
  40              		.cfi_offset 5, -32
  41              		.cfi_offset 6, -28
  42              		.cfi_offset 7, -24
  43              		.cfi_offset 8, -20
  44              		.cfi_offset 9, -16
  45              		.cfi_offset 10, -12
  46              		.cfi_offset 11, -8
  47              		.cfi_offset 14, -4
  48 0004 8046     		mov	r8, r0
  56:Src/mcp.c     ****   uint8_t retVal = MCP_CMD_OK;
  49              		.loc 1 56 3 is_stmt 1 view .LVU2
  50              	.LVL1:
  57:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
  58:Src/mcp.c     ****   if (MC_NULL == pHandle)
  59:Src/mcp.c     ****   {
  60:Src/mcp.c     ****     retVal = MCP_CMD_NOK;
  61:Src/mcp.c     ****   }
  62:Src/mcp.c     ****   else
  63:Src/mcp.c     ****   {
  64:Src/mcp.c     **** #endif
  65:Src/mcp.c     ****     uint16_t * dataElementID;
ARM GAS  /tmp/cc8LTqb2.s 			page 3


  51              		.loc 1 65 5 view .LVU3
  66:Src/mcp.c     ****     uint8_t * rxData = pHandle->rxBuffer;
  52              		.loc 1 66 5 view .LVU4
  67:Src/mcp.c     ****     uint8_t * txData = pHandle->txBuffer;
  68:Src/mcp.c     ****     int16_t rxLength = pHandle->rxLength;
  53              		.loc 1 68 31 is_stmt 0 view .LVU5
  54 0006 8489     		ldrh	r4, [r0, #12]
  69:Src/mcp.c     ****     uint16_t size = 0U;
  70:Src/mcp.c     ****     uint8_t accessResult;
  71:Src/mcp.c     **** 
  72:Src/mcp.c     ****     uint16_t regID;
  73:Src/mcp.c     ****     uint8_t typeID;
  74:Src/mcp.c     ****     uint8_t motorID;
  75:Src/mcp.c     ****     uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_
  55              		.loc 1 75 15 view .LVU6
  56 0008 3748     		ldr	r0, .L30
  57              	.LVL2:
  55:Src/mcp.c     ****   uint8_t retVal = MCP_CMD_OK;
  58              		.loc 1 55 1 view .LVU7
  59 000a 87B0     		sub	sp, sp, #28
  60              	.LCFI1:
  61              		.cfi_def_cfa_offset 64
  69:Src/mcp.c     ****     uint16_t size = 0U;
  62              		.loc 1 69 14 view .LVU8
  63 000c 0023     		movs	r3, #0
  76:Src/mcp.c     ****     uint8_t number_of_item =0;
  77:Src/mcp.c     ****     pHandle->txLength = 0;
  64              		.loc 1 77 23 view .LVU9
  65 000e A8F80E30 		strh	r3, [r8, #14]	@ movhi
  78:Src/mcp.c     **** 
  79:Src/mcp.c     ****     while (rxLength > 0)
  66              		.loc 1 79 11 view .LVU10
  67 0012 22B2     		sxth	r2, r4
  69:Src/mcp.c     ****     uint8_t accessResult;
  68              		.loc 1 69 14 view .LVU11
  69 0014 ADF80E30 		strh	r3, [sp, #14]	@ movhi
  75:Src/mcp.c     ****     uint8_t number_of_item =0;
  70              		.loc 1 75 15 view .LVU12
  71 0018 344B     		ldr	r3, .L30+4
  72              		.loc 1 79 11 view .LVU13
  73 001a 002A     		cmp	r2, #0
  67:Src/mcp.c     ****     int16_t rxLength = pHandle->rxLength;
  74              		.loc 1 67 15 view .LVU14
  75 001c D8E90157 		ldrd	r5, r7, [r8, #4]
  76              	.LVL3:
  68:Src/mcp.c     ****     uint16_t size = 0U;
  77              		.loc 1 68 5 is_stmt 1 view .LVU15
  69:Src/mcp.c     ****     uint8_t accessResult;
  78              		.loc 1 69 5 view .LVU16
  70:Src/mcp.c     **** 
  79              		.loc 1 70 5 view .LVU17
  72:Src/mcp.c     ****     uint8_t typeID;
  80              		.loc 1 72 5 view .LVU18
  73:Src/mcp.c     ****     uint8_t motorID;
  81              		.loc 1 73 5 view .LVU19
  74:Src/mcp.c     ****     uint8_t (*SetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_
  82              		.loc 1 74 5 view .LVU20
ARM GAS  /tmp/cc8LTqb2.s 			page 4


  75:Src/mcp.c     ****     uint8_t number_of_item =0;
  83              		.loc 1 75 5 view .LVU21
  75:Src/mcp.c     ****     uint8_t number_of_item =0;
  84              		.loc 1 75 15 is_stmt 0 view .LVU22
  85 0020 CDE90403 		strd	r0, r3, [sp, #16]
  76:Src/mcp.c     ****     pHandle->txLength = 0;
  86              		.loc 1 76 5 is_stmt 1 view .LVU23
  87              	.LVL4:
  77:Src/mcp.c     **** 
  88              		.loc 1 77 5 view .LVU24
  89              		.loc 1 79 5 view .LVU25
  90              		.loc 1 79 11 is_stmt 0 view .LVU26
  91 0024 53DD     		ble	.L10
  80:Src/mcp.c     ****     {
  81:Src/mcp.c     ****       number_of_item ++;
  92              		.loc 1 81 7 is_stmt 1 view .LVU27
  93              	.LVL5:
  82:Src/mcp.c     ****       dataElementID = (uint16_t *) rxData;
  94              		.loc 1 82 7 view .LVU28
  83:Src/mcp.c     ****       rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
  95              		.loc 1 83 7 view .LVU29
  84:Src/mcp.c     ****       rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
  96              		.loc 1 84 7 view .LVU30
  85:Src/mcp.c     **** 
  86:Src/mcp.c     ****       regID = *dataElementID & REG_MASK;
  97              		.loc 1 86 7 view .LVU31
  98              		.loc 1 86 15 is_stmt 0 view .LVU32
  99 0026 2888     		ldrh	r0, [r5]
 100              	.LVL6:
  87:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 101              		.loc 1 87 7 is_stmt 1 view .LVU33
 102              		.loc 1 87 16 is_stmt 0 view .LVU34
 103 0028 C3B2     		uxtb	r3, r0
 104              	.LVL7:
  88:Src/mcp.c     **** 
  89:Src/mcp.c     ****       motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 105              		.loc 1 89 7 is_stmt 1 view .LVU35
  90:Src/mcp.c     **** 
  91:Src/mcp.c     ****       if (motorID > NBR_OF_MOTORS)
 106              		.loc 1 91 7 view .LVU36
 107              		.loc 1 91 10 is_stmt 0 view .LVU37
 108 002a 13F0060A 		ands	r10, r3, #6
 109 002e 42D1     		bne	.L12
  83:Src/mcp.c     ****       rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 110              		.loc 1 83 26 view .LVU38
 111 0030 023C     		subs	r4, r4, #2
 112              	.LVL8:
  67:Src/mcp.c     ****     int16_t rxLength = pHandle->rxLength;
 113              		.loc 1 67 15 view .LVU39
 114 0032 3E46     		mov	r6, r7
  83:Src/mcp.c     ****       rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 115              		.loc 1 83 26 view .LVU40
 116 0034 A4B2     		uxth	r4, r4
  86:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 117              		.loc 1 86 13 view .LVU41
 118 0036 20F00700 		bic	r0, r0, #7
 119              	.LVL9:
ARM GAS  /tmp/cc8LTqb2.s 			page 5


  86:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 120              		.loc 1 86 13 view .LVU42
 121 003a 0F44     		add	r7, r7, r1
 122 003c 80B2     		uxth	r0, r0
  84:Src/mcp.c     **** 
 123              		.loc 1 84 14 view .LVU43
 124 003e 0235     		adds	r5, r5, #2
 125              	.LVL10:
  83:Src/mcp.c     ****       rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 126              		.loc 1 83 16 view .LVU44
 127 0040 0FFA84FC 		sxth	ip, r4
 128 0044 C6F10109 		rsb	r9, r6, #1
  87:Src/mcp.c     **** 
 129              		.loc 1 87 14 view .LVU45
 130 0048 03F03801 		and	r1, r3, #56
 131              	.LVL11:
  89:Src/mcp.c     **** 
 132              		.loc 1 89 15 view .LVU46
 133 004c 03F00702 		and	r2, r3, #7
 134              	.LVL12:
 135              	.L5:
  92:Src/mcp.c     ****       {
  93:Src/mcp.c     ****         retVal = MCP_CMD_NOK;
  94:Src/mcp.c     ****         rxLength = 0;
  95:Src/mcp.c     ****       }
  96:Src/mcp.c     ****       else
  97:Src/mcp.c     ****       {
  98:Src/mcp.c     ****         accessResult = SetRegFcts[motorID](regID, typeID, rxData, &size, rxLength);
 136              		.loc 1 98 9 is_stmt 1 view .LVU47
 137              		.loc 1 98 34 is_stmt 0 view .LVU48
 138 0050 06AB     		add	r3, sp, #24
 139 0052 03EB8203 		add	r3, r3, r2, lsl #2
 140              		.loc 1 98 24 view .LVU49
 141 0056 CDF800C0 		str	ip, [sp]
 142 005a 2A46     		mov	r2, r5
 143              	.LVL13:
 144              		.loc 1 98 24 view .LVU50
 145 005c 53F808BC 		ldr	fp, [r3, #-8]
 146 0060 0DF10E03 		add	r3, sp, #14
 147 0064 D847     		blx	fp
 148              	.LVL14:
  99:Src/mcp.c     ****         /* Prepare next data*/
 100:Src/mcp.c     ****         rxLength = (int16_t) (rxLength - size);
 101:Src/mcp.c     ****         rxData = rxData+size;
 102:Src/mcp.c     ****         /* If there is only one CMD in the buffer, we do not store the result */
 103:Src/mcp.c     ****         if ((1U == number_of_item) && (0 == rxLength))
 104:Src/mcp.c     ****         {
 105:Src/mcp.c     ****           retVal = accessResult;
 106:Src/mcp.c     ****         }
 107:Src/mcp.c     ****         else
 108:Src/mcp.c     ****         {/* Store the result for each access to be able to report failing access */
 109:Src/mcp.c     ****           if (txSyncFreeSpace !=0 )
 149              		.loc 1 109 11 is_stmt 1 view .LVU51
 110:Src/mcp.c     ****           {
 111:Src/mcp.c     ****             *txData = accessResult;
 150              		.loc 1 111 13 view .LVU52
 100:Src/mcp.c     ****         rxData = rxData+size;
ARM GAS  /tmp/cc8LTqb2.s 			page 6


 151              		.loc 1 100 9 view .LVU53
 100:Src/mcp.c     ****         rxData = rxData+size;
 152              		.loc 1 100 40 is_stmt 0 view .LVU54
 153 0066 BDF80E20 		ldrh	r2, [sp, #14]
 103:Src/mcp.c     ****         {
 154              		.loc 1 103 12 view .LVU55
 155 006a 06EB0903 		add	r3, r6, r9
 100:Src/mcp.c     ****         rxData = rxData+size;
 156              		.loc 1 100 40 view .LVU56
 157 006e A41A     		subs	r4, r4, r2
 103:Src/mcp.c     ****         {
 158              		.loc 1 103 12 view .LVU57
 159 0070 DBB2     		uxtb	r3, r3
 100:Src/mcp.c     ****         rxData = rxData+size;
 160              		.loc 1 100 40 view .LVU58
 161 0072 A4B2     		uxth	r4, r4
 103:Src/mcp.c     ****         {
 162              		.loc 1 103 12 view .LVU59
 163 0074 012B     		cmp	r3, #1
 101:Src/mcp.c     ****         /* If there is only one CMD in the buffer, we do not store the result */
 164              		.loc 1 101 16 view .LVU60
 165 0076 1544     		add	r5, r5, r2
 166              	.LVL15:
 100:Src/mcp.c     ****         rxData = rxData+size;
 167              		.loc 1 100 18 view .LVU61
 168 0078 22B2     		sxth	r2, r4
 169              	.LVL16:
 101:Src/mcp.c     ****         /* If there is only one CMD in the buffer, we do not store the result */
 170              		.loc 1 101 9 is_stmt 1 view .LVU62
 103:Src/mcp.c     ****         {
 171              		.loc 1 103 9 view .LVU63
 103:Src/mcp.c     ****         {
 172              		.loc 1 103 12 is_stmt 0 view .LVU64
 173 007a 24D0     		beq	.L27
 174              	.L6:
 109:Src/mcp.c     ****           {
 175              		.loc 1 109 14 view .LVU65
 176 007c B742     		cmp	r7, r6
 177 007e 1ED0     		beq	.L11
  81:Src/mcp.c     ****       dataElementID = (uint16_t *) rxData;
 178              		.loc 1 81 7 is_stmt 1 view .LVU66
 179              	.LVL17:
 112:Src/mcp.c     ****             txData = txData+1;
 113:Src/mcp.c     ****             pHandle->txLength++;
 114:Src/mcp.c     ****             txSyncFreeSpace--; /* decrement one by one no wraparound possible */
 115:Src/mcp.c     ****             retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 116:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 180              		.loc 1 116 13 view .LVU67
 111:Src/mcp.c     ****             txData = txData+1;
 181              		.loc 1 111 21 is_stmt 0 view .LVU68
 182 0080 06F8010B 		strb	r0, [r6], #1
 183              	.LVL18:
  82:Src/mcp.c     ****       rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 184              		.loc 1 82 7 is_stmt 1 view .LVU69
  83:Src/mcp.c     ****       rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 185              		.loc 1 83 7 view .LVU70
 112:Src/mcp.c     ****             pHandle->txLength++;
ARM GAS  /tmp/cc8LTqb2.s 			page 7


 186              		.loc 1 112 13 view .LVU71
 113:Src/mcp.c     ****             txSyncFreeSpace--; /* decrement one by one no wraparound possible */
 187              		.loc 1 113 13 view .LVU72
 113:Src/mcp.c     ****             txSyncFreeSpace--; /* decrement one by one no wraparound possible */
 188              		.loc 1 113 30 is_stmt 0 view .LVU73
 189 0084 B8F80E30 		ldrh	r3, [r8, #14]
  83:Src/mcp.c     ****       rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 190              		.loc 1 83 26 view .LVU74
 191 0088 023C     		subs	r4, r4, #2
 192 008a A4B2     		uxth	r4, r4
 113:Src/mcp.c     ****             txSyncFreeSpace--; /* decrement one by one no wraparound possible */
 193              		.loc 1 113 30 view .LVU75
 194 008c 0133     		adds	r3, r3, #1
  83:Src/mcp.c     ****       rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 195              		.loc 1 83 16 view .LVU76
 196 008e 0FFA84FC 		sxth	ip, r4
 197              	.LVL19:
  84:Src/mcp.c     **** 
 198              		.loc 1 84 7 is_stmt 1 view .LVU77
  86:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 199              		.loc 1 86 7 view .LVU78
 113:Src/mcp.c     ****             txSyncFreeSpace--; /* decrement one by one no wraparound possible */
 200              		.loc 1 113 30 is_stmt 0 view .LVU79
 201 0092 A8F80E30 		strh	r3, [r8, #14]	@ movhi
 114:Src/mcp.c     ****             retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 202              		.loc 1 114 13 is_stmt 1 view .LVU80
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 203              		.loc 1 115 13 view .LVU81
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 204              		.loc 1 115 20 is_stmt 0 view .LVU82
 205 0096 F0B9     		cbnz	r0, .L28
 206              	.L8:
  79:Src/mcp.c     ****     {
 207              		.loc 1 79 11 view .LVU83
 208 0098 002A     		cmp	r2, #0
 209 009a 23DD     		ble	.L29
  86:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 210              		.loc 1 86 15 view .LVU84
 211 009c 35F8023B 		ldrh	r3, [r5], #2
 212              	.LVL20:
  86:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 213              		.loc 1 86 13 view .LVU85
 214 00a0 23F00700 		bic	r0, r3, #7
 215              	.LVL21:
  87:Src/mcp.c     **** 
 216              		.loc 1 87 16 view .LVU86
 217 00a4 DBB2     		uxtb	r3, r3
  91:Src/mcp.c     ****       {
 218              		.loc 1 91 10 view .LVU87
 219 00a6 13F0060F 		tst	r3, #6
  86:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 220              		.loc 1 86 13 view .LVU88
 221 00aa 80B2     		uxth	r0, r0
 222              	.LVL22:
  87:Src/mcp.c     **** 
 223              		.loc 1 87 7 is_stmt 1 view .LVU89
  87:Src/mcp.c     **** 
ARM GAS  /tmp/cc8LTqb2.s 			page 8


 224              		.loc 1 87 14 is_stmt 0 view .LVU90
 225 00ac 03F03801 		and	r1, r3, #56
 226              	.LVL23:
  89:Src/mcp.c     **** 
 227              		.loc 1 89 7 is_stmt 1 view .LVU91
  89:Src/mcp.c     **** 
 228              		.loc 1 89 15 is_stmt 0 view .LVU92
 229 00b0 03F00702 		and	r2, r3, #7
 230              	.LVL24:
  91:Src/mcp.c     ****       {
 231              		.loc 1 91 7 is_stmt 1 view .LVU93
  91:Src/mcp.c     ****       {
 232              		.loc 1 91 10 is_stmt 0 view .LVU94
 233 00b4 CCD0     		beq	.L5
 234              	.LVL25:
 235              	.L12:
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 236              		.loc 1 115 20 view .LVU95
 237 00b6 0120     		movs	r0, #1
 238              	.L3:
 117:Src/mcp.c     ****             { /* From this point we are not able to continue to decode CMD buffer*/
 118:Src/mcp.c     ****               /* We stop the parsing */
 119:Src/mcp.c     ****               rxLength = 0;
 120:Src/mcp.c     ****             }
 121:Src/mcp.c     ****           }
 122:Src/mcp.c     ****           else
 123:Src/mcp.c     ****           {
 124:Src/mcp.c     ****             /* Stop parsing the cmd buffer as no space to answer */
 125:Src/mcp.c     ****             /* If we reach this state, chances are high the command was badly formated or received 
 126:Src/mcp.c     ****             rxLength = 0;
 127:Src/mcp.c     ****             retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 128:Src/mcp.c     ****           }
 129:Src/mcp.c     ****         }
 130:Src/mcp.c     ****       }
 131:Src/mcp.c     ****     }
 132:Src/mcp.c     ****     /* If all accesses are fine, just one global MCP_CMD_OK is required*/
 133:Src/mcp.c     ****     if (MCP_CMD_OK == retVal)
 134:Src/mcp.c     ****     {
 135:Src/mcp.c     ****       pHandle->txLength = 0;
 136:Src/mcp.c     ****     }
 137:Src/mcp.c     ****     else
 138:Src/mcp.c     ****     {
 139:Src/mcp.c     ****       /* Nothing to do */
 140:Src/mcp.c     ****     }
 239              		.loc 1 140 5 is_stmt 1 view .LVU96
 141:Src/mcp.c     ****   #ifdef NULL_PTR_CHECK_REG_INT
 142:Src/mcp.c     ****   }
 143:Src/mcp.c     **** #endif
 144:Src/mcp.c     ****   return (retVal);
 240              		.loc 1 144 3 view .LVU97
 145:Src/mcp.c     **** }
 241              		.loc 1 145 1 is_stmt 0 view .LVU98
 242 00b8 07B0     		add	sp, sp, #28
 243              	.LCFI2:
 244              		.cfi_remember_state
 245              		.cfi_def_cfa_offset 36
 246              		@ sp needed
ARM GAS  /tmp/cc8LTqb2.s 			page 9


 247 00ba BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 248              	.LVL26:
 249              	.L11:
 250              	.LCFI3:
 251              		.cfi_restore_state
 127:Src/mcp.c     ****           }
 252              		.loc 1 127 20 view .LVU99
 253 00be 0820     		movs	r0, #8
 254              	.LVL27:
 140:Src/mcp.c     ****   #ifdef NULL_PTR_CHECK_REG_INT
 255              		.loc 1 140 5 is_stmt 1 view .LVU100
 144:Src/mcp.c     **** }
 256              		.loc 1 144 3 view .LVU101
 257              		.loc 1 145 1 is_stmt 0 view .LVU102
 258 00c0 07B0     		add	sp, sp, #28
 259              	.LCFI4:
 260              		.cfi_remember_state
 261              		.cfi_def_cfa_offset 36
 262              		@ sp needed
 263 00c2 BDE8F08F 		pop	{r4, r5, r6, r7, r8, r9, r10, fp, pc}
 264              	.LVL28:
 265              	.L27:
 266              	.LCFI5:
 267              		.cfi_restore_state
 103:Src/mcp.c     ****         {
 268              		.loc 1 103 36 discriminator 1 view .LVU103
 269 00c6 002A     		cmp	r2, #0
 270 00c8 D8D1     		bne	.L6
 271              	.LVL29:
 272              	.L7:
 133:Src/mcp.c     ****     {
 273              		.loc 1 133 5 is_stmt 1 view .LVU104
 133:Src/mcp.c     ****     {
 274              		.loc 1 133 8 is_stmt 0 view .LVU105
 275 00ca 0028     		cmp	r0, #0
 276 00cc F4D1     		bne	.L3
 277              	.LVL30:
 278              	.L10:
 135:Src/mcp.c     ****     }
 279              		.loc 1 135 7 is_stmt 1 view .LVU106
 135:Src/mcp.c     ****     }
 280              		.loc 1 135 25 is_stmt 0 view .LVU107
 281 00ce 0020     		movs	r0, #0
 282 00d0 A8F80E00 		strh	r0, [r8, #14]	@ movhi
 283 00d4 F0E7     		b	.L3
 284              	.LVL31:
 285              	.L28:
 116:Src/mcp.c     ****             { /* From this point we are not able to continue to decode CMD buffer*/
 286              		.loc 1 116 16 discriminator 4 view .LVU108
 287 00d6 0728     		cmp	r0, #7
 288 00d8 EDD0     		beq	.L12
 289              	.LVL32:
 116:Src/mcp.c     ****             { /* From this point we are not able to continue to decode CMD buffer*/
 290              		.loc 1 116 59 discriminator 1 view .LVU109
 291 00da 0A28     		cmp	r0, #10
 292 00dc EBD0     		beq	.L12
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
ARM GAS  /tmp/cc8LTqb2.s 			page 10


 293              		.loc 1 115 20 view .LVU110
 294 00de 4FF0010A 		mov	r10, #1
 295 00e2 D9E7     		b	.L8
 296              	.LVL33:
 297              	.L29:
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 298              		.loc 1 115 20 view .LVU111
 299 00e4 5046     		mov	r0, r10
 300              	.LVL34:
 115:Src/mcp.c     ****             if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FOR
 301              		.loc 1 115 20 view .LVU112
 302 00e6 F0E7     		b	.L7
 303              	.L31:
 304              		.align	2
 305              	.L30:
 306 00e8 00000000 		.word	RI_SetRegisterGlobal
 307 00ec 00000000 		.word	RI_SetRegisterMotor1
 308              		.cfi_endproc
 309              	.LFE1466:
 311              		.section	.text.RI_GetRegCommandParser,"ax",%progbits
 312              		.align	1
 313              		.p2align 2,,3
 314              		.global	RI_GetRegCommandParser
 315              		.syntax unified
 316              		.thumb
 317              		.thumb_func
 318              		.fpu fpv4-sp-d16
 320              	RI_GetRegCommandParser:
 321              	.LVL35:
 322              	.LFB1467:
 146:Src/mcp.c     **** 
 147:Src/mcp.c     **** /**
 148:Src/mcp.c     ****   * @brief  Parses the payload in the received packet and call the required function in order to re
 149:Src/mcp.c     ****   *
 150:Src/mcp.c     ****   * The function called depends on the targeted motor and/or targeted register : RI_GetRegisterGlob
 151:Src/mcp.c     ****   *
 152:Src/mcp.c     ****   * @param  pHandle Handler of the current instance of the MCP component
 153:Src/mcp.c     ****   * @param  txSyncFreeSpace Space available for synchronous transmission
 154:Src/mcp.c     ****   *
 155:Src/mcp.c     ****   * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not.
 156:Src/mcp.c     ****   */
 157:Src/mcp.c     **** uint8_t RI_GetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
 158:Src/mcp.c     **** {
 323              		.loc 1 158 1 is_stmt 1 view -0
 324              		.cfi_startproc
 325              		@ args = 0, pretend = 0, frame = 16
 326              		@ frame_needed = 0, uses_anonymous_args = 0
 159:Src/mcp.c     ****   uint8_t retVal = MCP_CMD_NOK;
 327              		.loc 1 159 3 view .LVU114
 160:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
 161:Src/mcp.c     ****   if (MC_NULL == pHandle)
 162:Src/mcp.c     ****   {
 163:Src/mcp.c     ****     /* Nothing to do */
 164:Src/mcp.c     ****   }
 165:Src/mcp.c     ****   else
 166:Src/mcp.c     ****   {
 167:Src/mcp.c     **** #endif
ARM GAS  /tmp/cc8LTqb2.s 			page 11


 168:Src/mcp.c     ****     uint16_t * dataElementID;
 328              		.loc 1 168 5 view .LVU115
 169:Src/mcp.c     ****     uint8_t * rxData = pHandle->rxBuffer;
 329              		.loc 1 169 5 view .LVU116
 158:Src/mcp.c     ****   uint8_t retVal = MCP_CMD_NOK;
 330              		.loc 1 158 1 is_stmt 0 view .LVU117
 331 0000 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 332              	.LCFI6:
 333              		.cfi_def_cfa_offset 28
 334              		.cfi_offset 4, -28
 335              		.cfi_offset 5, -24
 336              		.cfi_offset 6, -20
 337              		.cfi_offset 7, -16
 338              		.cfi_offset 8, -12
 339              		.cfi_offset 9, -8
 340              		.cfi_offset 14, -4
 341 0004 87B0     		sub	sp, sp, #28
 342              	.LCFI7:
 343              		.cfi_def_cfa_offset 56
 170:Src/mcp.c     ****     uint8_t * txData = pHandle->txBuffer;
 171:Src/mcp.c     ****     uint16_t size = 0U;
 344              		.loc 1 171 14 view .LVU118
 345 0006 0023     		movs	r3, #0
 172:Src/mcp.c     ****     uint16_t rxLength = pHandle->rxLength;
 173:Src/mcp.c     ****     int16_t freeSpaceS16 = (int16_t) txSyncFreeSpace;
 174:Src/mcp.c     **** 
 175:Src/mcp.c     ****     uint16_t regID;
 176:Src/mcp.c     ****     uint8_t typeID;
 177:Src/mcp.c     ****     uint8_t motorID;
 178:Src/mcp.c     ****     uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_
 346              		.loc 1 178 15 view .LVU119
 347 0008 244A     		ldr	r2, .L40
 179:Src/mcp.c     ****     pHandle->txLength = 0;
 348              		.loc 1 179 23 view .LVU120
 349 000a C381     		strh	r3, [r0, #14]	@ movhi
 171:Src/mcp.c     ****     uint16_t rxLength = pHandle->rxLength;
 350              		.loc 1 171 14 view .LVU121
 351 000c ADF80E30 		strh	r3, [sp, #14]	@ movhi
 172:Src/mcp.c     ****     uint16_t rxLength = pHandle->rxLength;
 352              		.loc 1 172 14 view .LVU122
 353 0010 8689     		ldrh	r6, [r0, #12]
 178:Src/mcp.c     ****     pHandle->txLength = 0;
 354              		.loc 1 178 15 view .LVU123
 355 0012 234B     		ldr	r3, .L40+4
 170:Src/mcp.c     ****     uint16_t size = 0U;
 356              		.loc 1 170 15 view .LVU124
 357 0014 D0E90148 		ldrd	r4, r8, [r0, #4]
 358              	.LVL36:
 171:Src/mcp.c     ****     uint16_t rxLength = pHandle->rxLength;
 359              		.loc 1 171 5 is_stmt 1 view .LVU125
 172:Src/mcp.c     ****     int16_t freeSpaceS16 = (int16_t) txSyncFreeSpace;
 360              		.loc 1 172 5 view .LVU126
 173:Src/mcp.c     **** 
 361              		.loc 1 173 5 view .LVU127
 175:Src/mcp.c     ****     uint8_t typeID;
 362              		.loc 1 175 5 view .LVU128
 176:Src/mcp.c     ****     uint8_t motorID;
ARM GAS  /tmp/cc8LTqb2.s 			page 12


 363              		.loc 1 176 5 view .LVU129
 177:Src/mcp.c     ****     uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_
 364              		.loc 1 177 5 view .LVU130
 178:Src/mcp.c     ****     pHandle->txLength = 0;
 365              		.loc 1 178 5 view .LVU131
 178:Src/mcp.c     ****     pHandle->txLength = 0;
 366              		.loc 1 178 15 is_stmt 0 view .LVU132
 367 0018 CDE90423 		strd	r2, r3, [sp, #16]
 368              		.loc 1 179 5 is_stmt 1 view .LVU133
 180:Src/mcp.c     ****     while (rxLength > 0U)
 369              		.loc 1 180 5 view .LVU134
 370              	.LVL37:
 371              		.loc 1 180 11 is_stmt 0 view .LVU135
 372 001c 002E     		cmp	r6, #0
 373 001e 38D0     		beq	.L35
 181:Src/mcp.c     ****     {
 182:Src/mcp.c     ****       dataElementID = (uint16_t *) rxData;
 374              		.loc 1 182 7 is_stmt 1 view .LVU136
 375              	.LVL38:
 183:Src/mcp.c     ****       rxLength = rxLength - MCP_ID_SIZE;
 376              		.loc 1 183 7 view .LVU137
 184:Src/mcp.c     ****       rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID
 377              		.loc 1 184 7 view .LVU138
 185:Src/mcp.c     **** 
 186:Src/mcp.c     ****       regID = *dataElementID & REG_MASK;
 378              		.loc 1 186 7 view .LVU139
 379              		.loc 1 186 15 is_stmt 0 view .LVU140
 380 0020 2388     		ldrh	r3, [r4]
 381              	.LVL39:
 187:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 382              		.loc 1 187 7 is_stmt 1 view .LVU141
 383              		.loc 1 187 16 is_stmt 0 view .LVU142
 384 0022 DAB2     		uxtb	r2, r3
 385              	.LVL40:
 188:Src/mcp.c     **** 
 189:Src/mcp.c     ****       motorID = (uint8_t)((*dataElementID & MOTOR_MASK));
 386              		.loc 1 189 7 is_stmt 1 view .LVU143
 190:Src/mcp.c     **** 
 191:Src/mcp.c     ****       if (motorID > NBR_OF_MOTORS)
 387              		.loc 1 191 7 view .LVU144
 388              		.loc 1 191 10 is_stmt 0 view .LVU145
 389 0024 12F0060F 		tst	r2, #6
 390 0028 33D1     		bne	.L35
 183:Src/mcp.c     ****       rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID
 391              		.loc 1 183 16 view .LVU146
 392 002a 023E     		subs	r6, r6, #2
 393              	.LVL41:
 184:Src/mcp.c     **** 
 394              		.loc 1 184 14 view .LVU147
 395 002c 0234     		adds	r4, r4, #2
 396 002e 0746     		mov	r7, r0
 180:Src/mcp.c     ****     {
 397              		.loc 1 180 11 view .LVU148
 398 0030 14FA86F6 		uxtah	r6, r4, r6
 399              	.LVL42:
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 400              		.loc 1 186 13 view .LVU149
ARM GAS  /tmp/cc8LTqb2.s 			page 13


 401 0034 23F00700 		bic	r0, r3, #7
 402              	.LVL43:
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 403              		.loc 1 186 13 view .LVU150
 404 0038 0DB2     		sxth	r5, r1
 180:Src/mcp.c     ****     {
 405              		.loc 1 180 11 view .LVU151
 406 003a B6B2     		uxth	r6, r6
 187:Src/mcp.c     **** 
 407              		.loc 1 187 14 view .LVU152
 408 003c 02F03801 		and	r1, r2, #56
 409              	.LVL44:
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 410              		.loc 1 186 13 view .LVU153
 411 0040 80B2     		uxth	r0, r0
 189:Src/mcp.c     **** 
 412              		.loc 1 189 15 view .LVU154
 413 0042 02F00702 		and	r2, r2, #7
 414              	.LVL45:
 415              	.L36:
 192:Src/mcp.c     ****       {
 193:Src/mcp.c     ****         retVal = MCP_CMD_NOK;
 194:Src/mcp.c     ****         rxLength = 0;
 195:Src/mcp.c     ****       }
 196:Src/mcp.c     ****       else
 197:Src/mcp.c     ****       {
 198:Src/mcp.c     ****         retVal = GetRegFcts[motorID](regID, typeID, txData, &size, freeSpaceS16);
 416              		.loc 1 198 9 is_stmt 1 view .LVU155
 417              		.loc 1 198 28 is_stmt 0 view .LVU156
 418 0046 06AB     		add	r3, sp, #24
 419 0048 03EB8202 		add	r2, r3, r2, lsl #2
 420              	.LVL46:
 421              		.loc 1 198 18 view .LVU157
 422 004c 0095     		str	r5, [sp]
 423 004e 52F8089C 		ldr	r9, [r2, #-8]
 424 0052 0DF10E03 		add	r3, sp, #14
 425 0056 4246     		mov	r2, r8
 426 0058 C847     		blx	r9
 427              	.LVL47:
 182:Src/mcp.c     ****       rxLength = rxLength - MCP_ID_SIZE;
 428              		.loc 1 182 7 is_stmt 1 view .LVU158
 183:Src/mcp.c     ****       rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID
 429              		.loc 1 183 7 view .LVU159
 184:Src/mcp.c     **** 
 430              		.loc 1 184 7 view .LVU160
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 431              		.loc 1 186 7 view .LVU161
 199:Src/mcp.c     ****         if (retVal == MCP_CMD_OK )
 432              		.loc 1 199 9 view .LVU162
 200:Src/mcp.c     ****         {
 201:Src/mcp.c     ****           /* Prepare next data */
 202:Src/mcp.c     ****           txData = txData+size;
 433              		.loc 1 202 11 view .LVU163
 180:Src/mcp.c     ****     {
 434              		.loc 1 180 11 is_stmt 0 view .LVU164
 435 005a A1B2     		uxth	r1, r4
 199:Src/mcp.c     ****         if (retVal == MCP_CMD_OK )
ARM GAS  /tmp/cc8LTqb2.s 			page 14


 436              		.loc 1 199 12 view .LVU165
 437 005c 10B1     		cbz	r0, .L39
 438              	.LVL48:
 439              	.L34:
 203:Src/mcp.c     ****           pHandle->txLength += size;
 204:Src/mcp.c     ****           freeSpaceS16 = freeSpaceS16-size;
 205:Src/mcp.c     ****         }
 206:Src/mcp.c     ****         else
 207:Src/mcp.c     ****         {
 208:Src/mcp.c     ****           rxLength = 0;
 209:Src/mcp.c     ****         }
 210:Src/mcp.c     ****       }
 211:Src/mcp.c     ****     }
 212:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
 213:Src/mcp.c     ****   }
 214:Src/mcp.c     **** #endif
 215:Src/mcp.c     ****   return (retVal);
 440              		.loc 1 215 3 is_stmt 1 view .LVU166
 216:Src/mcp.c     **** }
 441              		.loc 1 216 1 is_stmt 0 view .LVU167
 442 005e 07B0     		add	sp, sp, #28
 443              	.LCFI8:
 444              		.cfi_remember_state
 445              		.cfi_def_cfa_offset 28
 446              		@ sp needed
 447 0060 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 448              	.LVL49:
 449              	.L39:
 450              	.LCFI9:
 451              		.cfi_restore_state
 202:Src/mcp.c     ****           pHandle->txLength += size;
 452              		.loc 1 202 26 view .LVU168
 453 0064 BDF80E20 		ldrh	r2, [sp, #14]
 203:Src/mcp.c     ****           pHandle->txLength += size;
 454              		.loc 1 203 29 view .LVU169
 455 0068 FB89     		ldrh	r3, [r7, #14]
 204:Src/mcp.c     ****         }
 456              		.loc 1 204 38 view .LVU170
 457 006a AD1A     		subs	r5, r5, r2
 458              	.LVL50:
 203:Src/mcp.c     ****           freeSpaceS16 = freeSpaceS16-size;
 459              		.loc 1 203 29 view .LVU171
 460 006c 1344     		add	r3, r3, r2
 180:Src/mcp.c     ****     {
 461              		.loc 1 180 11 view .LVU172
 462 006e 8E42     		cmp	r6, r1
 204:Src/mcp.c     ****         }
 463              		.loc 1 204 24 view .LVU173
 464 0070 2DB2     		sxth	r5, r5
 202:Src/mcp.c     ****           pHandle->txLength += size;
 465              		.loc 1 202 18 view .LVU174
 466 0072 9044     		add	r8, r8, r2
 467              	.LVL51:
 203:Src/mcp.c     ****           freeSpaceS16 = freeSpaceS16-size;
 468              		.loc 1 203 11 is_stmt 1 view .LVU175
 203:Src/mcp.c     ****           freeSpaceS16 = freeSpaceS16-size;
 469              		.loc 1 203 29 is_stmt 0 view .LVU176
ARM GAS  /tmp/cc8LTqb2.s 			page 15


 470 0074 FB81     		strh	r3, [r7, #14]	@ movhi
 204:Src/mcp.c     ****         }
 471              		.loc 1 204 11 is_stmt 1 view .LVU177
 472              	.LVL52:
 180:Src/mcp.c     ****     {
 473              		.loc 1 180 11 is_stmt 0 view .LVU178
 474 0076 F2D0     		beq	.L34
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 475              		.loc 1 186 15 view .LVU179
 476 0078 34F8023B 		ldrh	r3, [r4], #2
 477              	.LVL53:
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 478              		.loc 1 186 13 view .LVU180
 479 007c 23F00700 		bic	r0, r3, #7
 187:Src/mcp.c     **** 
 480              		.loc 1 187 16 view .LVU181
 481 0080 DBB2     		uxtb	r3, r3
 191:Src/mcp.c     ****       {
 482              		.loc 1 191 10 view .LVU182
 483 0082 13F0060F 		tst	r3, #6
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 484              		.loc 1 186 13 view .LVU183
 485 0086 80B2     		uxth	r0, r0
 486              	.LVL54:
 187:Src/mcp.c     **** 
 487              		.loc 1 187 7 is_stmt 1 view .LVU184
 187:Src/mcp.c     **** 
 488              		.loc 1 187 14 is_stmt 0 view .LVU185
 489 0088 03F03801 		and	r1, r3, #56
 490              	.LVL55:
 189:Src/mcp.c     **** 
 491              		.loc 1 189 7 is_stmt 1 view .LVU186
 189:Src/mcp.c     **** 
 492              		.loc 1 189 15 is_stmt 0 view .LVU187
 493 008c 03F00702 		and	r2, r3, #7
 494              	.LVL56:
 191:Src/mcp.c     ****       {
 495              		.loc 1 191 7 is_stmt 1 view .LVU188
 191:Src/mcp.c     ****       {
 496              		.loc 1 191 10 is_stmt 0 view .LVU189
 497 0090 D9D0     		beq	.L36
 498              	.LVL57:
 499              	.L35:
 159:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
 500              		.loc 1 159 11 view .LVU190
 501 0092 0120     		movs	r0, #1
 215:Src/mcp.c     **** }
 502              		.loc 1 215 3 is_stmt 1 view .LVU191
 503              		.loc 1 216 1 is_stmt 0 view .LVU192
 504 0094 07B0     		add	sp, sp, #28
 505              	.LCFI10:
 506              		.cfi_def_cfa_offset 28
 507              		@ sp needed
 508 0096 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 509              	.LVL58:
 510              	.L41:
 511              		.loc 1 216 1 view .LVU193
ARM GAS  /tmp/cc8LTqb2.s 			page 16


 512 009a 00BF     		.align	2
 513              	.L40:
 514 009c 00000000 		.word	RI_GetRegisterGlobal
 515 00a0 00000000 		.word	RI_GetRegisterMotor1
 516              		.cfi_endproc
 517              	.LFE1467:
 519              		.section	.text.MCP_ReceivedPacket,"ax",%progbits
 520              		.align	1
 521              		.p2align 2,,3
 522              		.global	MCP_ReceivedPacket
 523              		.syntax unified
 524              		.thumb
 525              		.thumb_func
 526              		.fpu fpv4-sp-d16
 528              	MCP_ReceivedPacket:
 529              	.LVL59:
 530              	.LFB1468:
 217:Src/mcp.c     **** 
 218:Src/mcp.c     **** /**
 219:Src/mcp.c     ****   * @brief  Parses the header from the received packet and call the required function depending on 
 220:Src/mcp.c     ****   *
 221:Src/mcp.c     ****   * @param  pHandle Handler of the current instance of the MCP component
 222:Src/mcp.c     ****   */
 223:Src/mcp.c     **** void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
 224:Src/mcp.c     **** {
 531              		.loc 1 224 1 is_stmt 1 view -0
 532              		.cfi_startproc
 533              		@ args = 0, pretend = 0, frame = 16
 534              		@ frame_needed = 0, uses_anonymous_args = 0
 225:Src/mcp.c     ****   const uint16_t *packetHeader;
 535              		.loc 1 225 3 view .LVU195
 226:Src/mcp.c     ****   uint16_t command;
 536              		.loc 1 226 3 view .LVU196
 227:Src/mcp.c     ****   int16_t txSyncFreeSpace;
 537              		.loc 1 227 3 view .LVU197
 228:Src/mcp.c     ****   uint8_t motorID;
 538              		.loc 1 228 3 view .LVU198
 229:Src/mcp.c     ****   uint8_t MCPResponse;
 539              		.loc 1 229 3 view .LVU199
 230:Src/mcp.c     ****   uint8_t userCommand=0;
 540              		.loc 1 230 3 view .LVU200
 231:Src/mcp.c     **** 
 232:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_MCP
 233:Src/mcp.c     ****   if ((MC_NULL == pHandle) || (0U == pHandle->rxLength))
 234:Src/mcp.c     ****   {
 235:Src/mcp.c     ****     /* Nothing to do, txBuffer and txLength have not been modified */
 236:Src/mcp.c     ****   }
 237:Src/mcp.c     ****   else /* Length is 0, this is a request to send back the last packet */
 238:Src/mcp.c     ****   {
 239:Src/mcp.c     **** #endif
 240:Src/mcp.c     ****     packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 541              		.loc 1 240 5 view .LVU201
 542 0000 D0E9003C 		ldrd	r3, ip, [r0]
 241:Src/mcp.c     ****     command = (uint16_t)(*packetHeader & CMD_MASK);
 543              		.loc 1 241 26 is_stmt 0 view .LVU202
 544 0004 6146     		mov	r1, ip
 224:Src/mcp.c     ****   const uint16_t *packetHeader;
ARM GAS  /tmp/cc8LTqb2.s 			page 17


 545              		.loc 1 224 1 view .LVU203
 546 0006 2DE9F043 		push	{r4, r5, r6, r7, r8, r9, lr}
 547              	.LCFI11:
 548              		.cfi_def_cfa_offset 28
 549              		.cfi_offset 4, -28
 550              		.cfi_offset 5, -24
 551              		.cfi_offset 6, -20
 552              		.cfi_offset 7, -16
 553              		.cfi_offset 8, -12
 554              		.cfi_offset 9, -8
 555              		.cfi_offset 14, -4
 556              		.loc 1 241 26 view .LVU204
 557 000a 31F8022B 		ldrh	r2, [r1], #2
 558 000e 9E89     		ldrh	r6, [r3, #12]
 559 0010 B0F80CE0 		ldrh	lr, [r0, #12]
 560 0014 013E     		subs	r6, r6, #1
 242:Src/mcp.c     **** 
 243:Src/mcp.c     ****     if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 561              		.loc 1 243 8 view .LVU205
 562 0016 02F47F48 		and	r8, r2, #65280
 563 001a B6B2     		uxth	r6, r6
 241:Src/mcp.c     **** 
 564              		.loc 1 241 13 view .LVU206
 565 001c 22F00703 		bic	r3, r2, #7
 566 0020 AEF10207 		sub	r7, lr, #2
 567              		.loc 1 243 8 view .LVU207
 568 0024 B8F5807F 		cmp	r8, #256
 224:Src/mcp.c     ****   const uint16_t *packetHeader;
 569              		.loc 1 224 1 view .LVU208
 570 0028 87B0     		sub	sp, sp, #28
 571              	.LCFI12:
 572              		.cfi_def_cfa_offset 56
 224:Src/mcp.c     ****   const uint16_t *packetHeader;
 573              		.loc 1 224 1 view .LVU209
 574 002a 0446     		mov	r4, r0
 241:Src/mcp.c     **** 
 575              		.loc 1 241 13 view .LVU210
 576 002c 9BB2     		uxth	r3, r3
 577              	.LVL60:
 578              		.loc 1 243 5 is_stmt 1 view .LVU211
 579 002e 35B2     		sxth	r5, r6
 580 0030 BFB2     		uxth	r7, r7
 581              		.loc 1 243 8 is_stmt 0 view .LVU212
 582 0032 55D0     		beq	.L78
 244:Src/mcp.c     ****     {
 245:Src/mcp.c     ****       userCommand = ((uint8_t)(command & 0xF8U) >> 3U);
 246:Src/mcp.c     ****       command = MCP_USER_CMD;
 247:Src/mcp.c     ****     }
 248:Src/mcp.c     ****     else
 249:Src/mcp.c     ****     {
 250:Src/mcp.c     ****       /* Nothing to do */
 251:Src/mcp.c     ****     }
 583              		.loc 1 251 5 is_stmt 1 view .LVU213
 252:Src/mcp.c     **** 
 253:Src/mcp.c     ****     motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 584              		.loc 1 253 5 view .LVU214
 585              	.LVL61:
ARM GAS  /tmp/cc8LTqb2.s 			page 18


 254:Src/mcp.c     ****     MCI_Handle_t *pMCI = &Mci[motorID];
 586              		.loc 1 254 5 view .LVU215
 253:Src/mcp.c     ****     MCI_Handle_t *pMCI = &Mci[motorID];
 587              		.loc 1 253 40 is_stmt 0 view .LVU216
 588 0034 013A     		subs	r2, r2, #1
 589              		.loc 1 254 19 view .LVU217
 590 0036 02F00702 		and	r2, r2, #7
 591 003a DFF8E491 		ldr	r9, .L83+12
 255:Src/mcp.c     **** 
 256:Src/mcp.c     ****     /* Removing MCP Header from RxBuffer */
 257:Src/mcp.c     ****     pHandle->rxLength = pHandle->rxLength - MCP_HEADER_SIZE;
 592              		.loc 1 257 23 view .LVU218
 593 003e 8781     		strh	r7, [r0, #12]	@ movhi
 254:Src/mcp.c     **** 
 594              		.loc 1 254 19 view .LVU219
 595 0040 02EB8202 		add	r2, r2, r2, lsl #2
 258:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 259:Src/mcp.c     **** 
 260:Src/mcp.c     ****     /* Commands requiering payload response must be aware of space available for the payload */
 261:Src/mcp.c     ****     /* Last byte is reserved for MCP response*/
 262:Src/mcp.c     ****     txSyncFreeSpace = (int16_t)pHandle->pTransportLayer->txSyncMaxPayload - 1;
 263:Src/mcp.c     **** 
 264:Src/mcp.c     ****     /* Initialization of the tx length, command which send back data has to increment the txLength
 265:Src/mcp.c     ****      * (case of Read register) */
 266:Src/mcp.c     ****     pHandle->txLength = 0U;
 596              		.loc 1 266 23 view .LVU220
 597 0044 4FF00008 		mov	r8, #0
 267:Src/mcp.c     **** 
 268:Src/mcp.c     ****     switch (command)
 598              		.loc 1 268 5 view .LVU221
 599 0048 282B     		cmp	r3, #40
 258:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 600              		.loc 1 258 23 view .LVU222
 601 004a 4160     		str	r1, [r0, #4]
 254:Src/mcp.c     **** 
 602              		.loc 1 254 19 view .LVU223
 603 004c 09EBC209 		add	r9, r9, r2, lsl #3
 604              	.LVL62:
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 605              		.loc 1 257 5 is_stmt 1 view .LVU224
 258:Src/mcp.c     **** 
 606              		.loc 1 258 5 view .LVU225
 262:Src/mcp.c     **** 
 607              		.loc 1 262 5 view .LVU226
 266:Src/mcp.c     **** 
 608              		.loc 1 266 5 view .LVU227
 266:Src/mcp.c     **** 
 609              		.loc 1 266 23 is_stmt 0 view .LVU228
 610 0050 A0F80E80 		strh	r8, [r0, #14]	@ movhi
 611              	.LVL63:
 612              		.loc 1 268 5 is_stmt 1 view .LVU229
 613 0054 00F0CC80 		beq	.L46
 614 0058 1FD8     		bhi	.L47
 615 005a 102B     		cmp	r3, #16
 616 005c 6CD0     		beq	.L48
 617 005e 11D9     		bls	.L79
 618 0060 182B     		cmp	r3, #24
ARM GAS  /tmp/cc8LTqb2.s 			page 19


 619 0062 4DD0     		beq	.L75
 620 0064 202B     		cmp	r3, #32
 621 0066 38D1     		bne	.L52
 622              	.LVL64:
 623              	.L67:
 269:Src/mcp.c     ****     {
 270:Src/mcp.c     ****       case GET_MCP_VERSION:
 271:Src/mcp.c     ****       {
 272:Src/mcp.c     ****         pHandle->txLength = 4U;
 273:Src/mcp.c     ****         *pHandle->txBuffer = MCP_VERSION;
 274:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 275:Src/mcp.c     ****         break;
 276:Src/mcp.c     ****       }
 277:Src/mcp.c     **** 
 278:Src/mcp.c     ****       case SET_DATA_ELEMENT:
 279:Src/mcp.c     ****       {
 280:Src/mcp.c     ****         MCPResponse = RI_SetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 281:Src/mcp.c     ****         break;
 282:Src/mcp.c     ****       }
 283:Src/mcp.c     **** 
 284:Src/mcp.c     ****       case GET_DATA_ELEMENT:
 285:Src/mcp.c     ****       {
 286:Src/mcp.c     ****         MCPResponse = RI_GetRegCommandParser(pHandle, (uint16_t)txSyncFreeSpace);
 287:Src/mcp.c     ****         break;
 288:Src/mcp.c     ****       }
 289:Src/mcp.c     **** 
 290:Src/mcp.c     ****       case START_MOTOR:
 291:Src/mcp.c     ****       {
 292:Src/mcp.c     ****         MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 293:Src/mcp.c     ****         break;
 294:Src/mcp.c     ****       }
 295:Src/mcp.c     **** 
 296:Src/mcp.c     ****       case STOP_MOTOR: /* Todo: Check the pertinance of return value */
 297:Src/mcp.c     ****       {
 298:Src/mcp.c     ****         (void)MCI_StopMotor(pMCI);
 299:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 300:Src/mcp.c     ****         break;
 301:Src/mcp.c     ****       }
 302:Src/mcp.c     **** 
 303:Src/mcp.c     ****       case STOP_RAMP:
 304:Src/mcp.c     ****       {
 305:Src/mcp.c     ****         if (RUN == MCI_GetSTMState(pMCI))
 306:Src/mcp.c     ****         {
 307:Src/mcp.c     ****           MCI_StopRamp(pMCI);
 308:Src/mcp.c     ****         }
 309:Src/mcp.c     ****         else
 310:Src/mcp.c     ****         {
 311:Src/mcp.c     ****           /* Nothing to do */
 312:Src/mcp.c     ****         }
 313:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 314:Src/mcp.c     ****         break;
 315:Src/mcp.c     ****       }
 316:Src/mcp.c     **** 
 317:Src/mcp.c     ****       case START_STOP:
 318:Src/mcp.c     ****       {
 319:Src/mcp.c     ****         /* Queries the STM and a command start or stop depending on the state */
 320:Src/mcp.c     ****         if (IDLE == MCI_GetSTMState(pMCI))
ARM GAS  /tmp/cc8LTqb2.s 			page 20


 321:Src/mcp.c     ****         {
 322:Src/mcp.c     ****           MCPResponse = (MCI_StartMotor(pMCI) == true) ? MCP_CMD_OK : MCP_CMD_NOK;
 323:Src/mcp.c     ****         }
 324:Src/mcp.c     ****         else
 325:Src/mcp.c     ****         {
 326:Src/mcp.c     ****           (void)MCI_StopMotor(pMCI);
 624              		.loc 1 326 11 view .LVU230
 625              		.loc 1 326 17 is_stmt 0 view .LVU231
 626 0068 4846     		mov	r0, r9
 627 006a FFF7FEFF 		bl	MCI_StopMotor
 628              	.LVL65:
 629              	.L77:
 327:Src/mcp.c     ****           MCPResponse = MCP_CMD_OK;
 630              		.loc 1 327 11 is_stmt 1 view .LVU232
 631              		.loc 1 327 11 is_stmt 0 view .LVU233
 632 006e E389     		ldrh	r3, [r4, #14]
 633 0070 A668     		ldr	r6, [r4, #8]
 634              		.loc 1 327 23 view .LVU234
 635 0072 4046     		mov	r0, r8
 636 0074 1E44     		add	r6, r6, r3
 637              	.LVL66:
 638              	.L45:
 328:Src/mcp.c     ****         }
 329:Src/mcp.c     ****         break;
 330:Src/mcp.c     ****       }
 331:Src/mcp.c     **** 
 332:Src/mcp.c     ****       case FAULT_ACK:
 333:Src/mcp.c     ****       {
 334:Src/mcp.c     ****         (void)MCI_FaultAcknowledged(pMCI);
 335:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 336:Src/mcp.c     ****         break;
 337:Src/mcp.c     ****       }
 338:Src/mcp.c     **** 
 339:Src/mcp.c     ****       case IQDREF_CLEAR:
 340:Src/mcp.c     ****       {
 341:Src/mcp.c     ****         MCI_Clear_Iqdref(pMCI);
 342:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 343:Src/mcp.c     ****         break;
 344:Src/mcp.c     ****       }
 345:Src/mcp.c     **** 
 346:Src/mcp.c     ****       case PFC_ENABLE:
 347:Src/mcp.c     ****       case PFC_DISABLE:
 348:Src/mcp.c     ****       case PFC_FAULT_ACK:
 349:Src/mcp.c     ****       {
 350:Src/mcp.c     ****         MCPResponse = MCP_CMD_UNKNOWN;
 351:Src/mcp.c     ****         break;
 352:Src/mcp.c     ****       }
 353:Src/mcp.c     **** 
 354:Src/mcp.c     ****       case PROFILER_CMD:
 355:Src/mcp.c     ****       {
 356:Src/mcp.c     ****         MCPResponse = MC_ProfilerCommand(pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pH
 357:Src/mcp.c     ****                                          pHandle->txBuffer);
 358:Src/mcp.c     ****         break;
 359:Src/mcp.c     ****       }
 360:Src/mcp.c     **** 
 361:Src/mcp.c     ****       case MCP_USER_CMD:
 362:Src/mcp.c     ****       {
ARM GAS  /tmp/cc8LTqb2.s 			page 21


 363:Src/mcp.c     ****         if ((userCommand < MCP_USER_CALLBACK_MAX) && (MCP_UserCallBack[userCommand] != NULL))
 364:Src/mcp.c     ****         {
 365:Src/mcp.c     ****           MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncF
 366:Src/mcp.c     ****                                                       &pHandle->txLength, pHandle->txBuffer);
 367:Src/mcp.c     ****         }
 368:Src/mcp.c     ****         else
 369:Src/mcp.c     ****         {
 370:Src/mcp.c     ****           MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 371:Src/mcp.c     ****         }
 372:Src/mcp.c     ****         break;
 373:Src/mcp.c     ****       }
 374:Src/mcp.c     **** 
 375:Src/mcp.c     ****       default :
 376:Src/mcp.c     ****       {
 377:Src/mcp.c     ****         MCPResponse = MCP_CMD_UNKNOWN;
 378:Src/mcp.c     ****         break;
 379:Src/mcp.c     ****       }
 380:Src/mcp.c     ****     }
 381:Src/mcp.c     ****     pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 639              		.loc 1 381 5 is_stmt 1 view .LVU235
 640              		.loc 1 381 42 is_stmt 0 view .LVU236
 641 0076 3070     		strb	r0, [r6]
 382:Src/mcp.c     ****     pHandle->txLength++;
 642              		.loc 1 382 5 is_stmt 1 view .LVU237
 643              		.loc 1 382 22 is_stmt 0 view .LVU238
 644 0078 E389     		ldrh	r3, [r4, #14]
 645 007a 0133     		adds	r3, r3, #1
 646 007c E381     		strh	r3, [r4, #14]	@ movhi
 383:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_MCP
 384:Src/mcp.c     ****   }
 385:Src/mcp.c     **** #endif
 386:Src/mcp.c     **** }
 647              		.loc 1 386 1 view .LVU239
 648 007e 07B0     		add	sp, sp, #28
 649              	.LCFI13:
 650              		.cfi_remember_state
 651              		.cfi_def_cfa_offset 28
 652              		@ sp needed
 653 0080 BDE8F083 		pop	{r4, r5, r6, r7, r8, r9, pc}
 654              	.LVL67:
 655              	.L79:
 656              	.LCFI14:
 657              		.cfi_restore_state
 268:Src/mcp.c     ****     {
 658              		.loc 1 268 5 view .LVU240
 659 0084 002B     		cmp	r3, #0
 660 0086 45D0     		beq	.L50
 661 0088 082B     		cmp	r3, #8
 662 008a 26D1     		bne	.L52
 280:Src/mcp.c     ****         break;
 663              		.loc 1 280 9 is_stmt 1 view .LVU241
 280:Src/mcp.c     ****         break;
 664              		.loc 1 280 23 is_stmt 0 view .LVU242
 665 008c 3146     		mov	r1, r6
 666 008e FFF7FEFF 		bl	RI_SetRegCommandParser
 667              	.LVL68:
 281:Src/mcp.c     ****       }
ARM GAS  /tmp/cc8LTqb2.s 			page 22


 668              		.loc 1 281 9 is_stmt 1 view .LVU243
 669 0092 E389     		ldrh	r3, [r4, #14]
 670 0094 A668     		ldr	r6, [r4, #8]
 671 0096 1E44     		add	r6, r6, r3
 672 0098 EDE7     		b	.L45
 673              	.LVL69:
 674              	.L47:
 268:Src/mcp.c     ****     {
 675              		.loc 1 268 5 is_stmt 0 view .LVU244
 676 009a 482B     		cmp	r3, #72
 677 009c 44D0     		beq	.L55
 678 009e 0BD8     		bhi	.L56
 679 00a0 302B     		cmp	r3, #48
 680 00a2 28D0     		beq	.L57
 681 00a4 382B     		cmp	r3, #56
 682 00a6 18D1     		bne	.L52
 334:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 683              		.loc 1 334 9 is_stmt 1 view .LVU245
 334:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 684              		.loc 1 334 15 is_stmt 0 view .LVU246
 685 00a8 4846     		mov	r0, r9
 686              	.LVL70:
 334:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 687              		.loc 1 334 15 view .LVU247
 688 00aa FFF7FEFF 		bl	MCI_FaultAcknowledged
 689              	.LVL71:
 335:Src/mcp.c     ****         break;
 690              		.loc 1 335 9 is_stmt 1 view .LVU248
 336:Src/mcp.c     ****       }
 691              		.loc 1 336 9 view .LVU249
 692 00ae E389     		ldrh	r3, [r4, #14]
 693 00b0 A668     		ldr	r6, [r4, #8]
 335:Src/mcp.c     ****         break;
 694              		.loc 1 335 21 is_stmt 0 view .LVU250
 695 00b2 4046     		mov	r0, r8
 696 00b4 1E44     		add	r6, r6, r3
 336:Src/mcp.c     ****       }
 697              		.loc 1 336 9 view .LVU251
 698 00b6 DEE7     		b	.L45
 699              	.LVL72:
 700              	.L56:
 268:Src/mcp.c     ****     {
 701              		.loc 1 268 5 view .LVU252
 702 00b8 682B     		cmp	r3, #104
 703 00ba 0BD1     		bne	.L80
 356:Src/mcp.c     ****                                          pHandle->txBuffer);
 704              		.loc 1 356 9 is_stmt 1 view .LVU253
 356:Src/mcp.c     ****                                          pHandle->txBuffer);
 705              		.loc 1 356 23 is_stmt 0 view .LVU254
 706 00bc 8368     		ldr	r3, [r0, #8]
 707              	.LVL73:
 356:Src/mcp.c     ****                                          pHandle->txBuffer);
 708              		.loc 1 356 23 view .LVU255
 709 00be 0093     		str	r3, [sp]
 710 00c0 2A46     		mov	r2, r5
 711 00c2 04F10E03 		add	r3, r4, #14
 712 00c6 3846     		mov	r0, r7
ARM GAS  /tmp/cc8LTqb2.s 			page 23


 713              	.LVL74:
 356:Src/mcp.c     ****                                          pHandle->txBuffer);
 714              		.loc 1 356 23 view .LVU256
 715 00c8 FFF7FEFF 		bl	MC_ProfilerCommand
 716              	.LVL75:
 358:Src/mcp.c     ****       }
 717              		.loc 1 358 9 is_stmt 1 view .LVU257
 718 00cc E389     		ldrh	r3, [r4, #14]
 719 00ce A668     		ldr	r6, [r4, #8]
 720 00d0 1E44     		add	r6, r6, r3
 721 00d2 D0E7     		b	.L45
 722              	.LVL76:
 723              	.L80:
 268:Src/mcp.c     ****     {
 724              		.loc 1 268 5 is_stmt 0 view .LVU258
 725 00d4 B3F5807F 		cmp	r3, #256
 726 00d8 78D0     		beq	.L60
 727              	.L52:
 728 00da A668     		ldr	r6, [r4, #8]
 350:Src/mcp.c     ****         break;
 729              		.loc 1 350 21 view .LVU259
 730 00dc 0220     		movs	r0, #2
 731              	.LVL77:
 350:Src/mcp.c     ****         break;
 732              		.loc 1 350 21 view .LVU260
 733 00de CAE7     		b	.L45
 734              	.LVL78:
 735              	.L78:
 245:Src/mcp.c     ****       command = MCP_USER_CMD;
 736              		.loc 1 245 7 is_stmt 1 view .LVU261
 245:Src/mcp.c     ****       command = MCP_USER_CMD;
 737              		.loc 1 245 19 is_stmt 0 view .LVU262
 738 00e0 C3F3C403 		ubfx	r3, r3, #3, #5
 739              	.LVL79:
 246:Src/mcp.c     ****     }
 740              		.loc 1 246 7 is_stmt 1 view .LVU263
 251:Src/mcp.c     **** 
 741              		.loc 1 251 5 view .LVU264
 253:Src/mcp.c     ****     MCI_Handle_t *pMCI = &Mci[motorID];
 742              		.loc 1 253 5 view .LVU265
 254:Src/mcp.c     **** 
 743              		.loc 1 254 5 view .LVU266
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 744              		.loc 1 257 5 view .LVU267
 266:Src/mcp.c     **** 
 745              		.loc 1 266 23 is_stmt 0 view .LVU268
 746 00e4 0022     		movs	r2, #0
 363:Src/mcp.c     ****         {
 747              		.loc 1 363 12 view .LVU269
 748 00e6 012B     		cmp	r3, #1
 257:Src/mcp.c     ****     pHandle->rxBuffer = pHandle->rxBuffer + MCP_HEADER_SIZE;
 749              		.loc 1 257 23 view .LVU270
 750 00e8 8781     		strh	r7, [r0, #12]	@ movhi
 258:Src/mcp.c     **** 
 751              		.loc 1 258 5 is_stmt 1 view .LVU271
 258:Src/mcp.c     **** 
 752              		.loc 1 258 23 is_stmt 0 view .LVU272
ARM GAS  /tmp/cc8LTqb2.s 			page 24


 753 00ea 4160     		str	r1, [r0, #4]
 262:Src/mcp.c     **** 
 754              		.loc 1 262 5 is_stmt 1 view .LVU273
 755              	.LVL80:
 266:Src/mcp.c     **** 
 756              		.loc 1 266 5 view .LVU274
 266:Src/mcp.c     **** 
 757              		.loc 1 266 23 is_stmt 0 view .LVU275
 758 00ec C281     		strh	r2, [r0, #14]	@ movhi
 759              	.LVL81:
 268:Src/mcp.c     ****     {
 760              		.loc 1 268 5 is_stmt 1 view .LVU276
 363:Src/mcp.c     ****         {
 761              		.loc 1 363 9 view .LVU277
 762 00ee 8668     		ldr	r6, [r0, #8]
 363:Src/mcp.c     ****         {
 763              		.loc 1 363 12 is_stmt 0 view .LVU278
 764 00f0 6ED9     		bls	.L44
 765              	.LVL82:
 766              	.L70:
 370:Src/mcp.c     ****         }
 767              		.loc 1 370 23 view .LVU279
 768 00f2 0D20     		movs	r0, #13
 769              	.LVL83:
 370:Src/mcp.c     ****         }
 770              		.loc 1 370 23 view .LVU280
 771 00f4 BFE7     		b	.L45
 772              	.LVL84:
 773              	.L57:
 320:Src/mcp.c     ****         {
 774              		.loc 1 320 9 is_stmt 1 view .LVU281
 320:Src/mcp.c     ****         {
 775              		.loc 1 320 21 is_stmt 0 view .LVU282
 776 00f6 4846     		mov	r0, r9
 777              	.LVL85:
 320:Src/mcp.c     ****         {
 778              		.loc 1 320 21 view .LVU283
 779 00f8 FFF7FEFF 		bl	MCI_GetSTMState
 780              	.LVL86:
 320:Src/mcp.c     ****         {
 781              		.loc 1 320 12 view .LVU284
 782 00fc 0028     		cmp	r0, #0
 783 00fe B3D1     		bne	.L67
 784              	.L75:
 322:Src/mcp.c     ****         }
 785              		.loc 1 322 11 is_stmt 1 view .LVU285
 322:Src/mcp.c     ****         }
 786              		.loc 1 322 26 is_stmt 0 view .LVU286
 787 0100 4846     		mov	r0, r9
 788 0102 FFF7FEFF 		bl	MCI_StartMotor
 789              	.LVL87:
 790 0106 E289     		ldrh	r2, [r4, #14]
 791 0108 A668     		ldr	r6, [r4, #8]
 322:Src/mcp.c     ****         }
 792              		.loc 1 322 69 view .LVU287
 793 010a 80F00100 		eor	r0, r0, #1
 322:Src/mcp.c     ****         }
ARM GAS  /tmp/cc8LTqb2.s 			page 25


 794              		.loc 1 322 23 view .LVU288
 795 010e C0B2     		uxtb	r0, r0
 796              	.LVL88:
 322:Src/mcp.c     ****         }
 797              		.loc 1 322 23 view .LVU289
 798 0110 1644     		add	r6, r6, r2
 799 0112 B0E7     		b	.L45
 800              	.LVL89:
 801              	.L50:
 272:Src/mcp.c     ****         *pHandle->txBuffer = MCP_VERSION;
 802              		.loc 1 272 9 is_stmt 1 view .LVU290
 273:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 803              		.loc 1 273 17 is_stmt 0 view .LVU291
 804 0114 8268     		ldr	r2, [r0, #8]
 273:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 805              		.loc 1 273 28 view .LVU292
 806 0116 0121     		movs	r1, #1
 272:Src/mcp.c     ****         *pHandle->txBuffer = MCP_VERSION;
 807              		.loc 1 272 27 view .LVU293
 808 0118 0420     		movs	r0, #4
 809              	.LVL90:
 272:Src/mcp.c     ****         *pHandle->txBuffer = MCP_VERSION;
 810              		.loc 1 272 27 view .LVU294
 811 011a E081     		strh	r0, [r4, #14]	@ movhi
 273:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 812              		.loc 1 273 9 is_stmt 1 view .LVU295
 273:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 813              		.loc 1 273 28 is_stmt 0 view .LVU296
 814 011c 1170     		strb	r1, [r2]
 274:Src/mcp.c     ****         break;
 815              		.loc 1 274 9 is_stmt 1 view .LVU297
 816              	.LVL91:
 275:Src/mcp.c     ****       }
 817              		.loc 1 275 9 view .LVU298
 818 011e E289     		ldrh	r2, [r4, #14]
 819 0120 A668     		ldr	r6, [r4, #8]
 274:Src/mcp.c     ****         break;
 820              		.loc 1 274 21 is_stmt 0 view .LVU299
 821 0122 1846     		mov	r0, r3
 822 0124 1644     		add	r6, r6, r2
 275:Src/mcp.c     ****       }
 823              		.loc 1 275 9 view .LVU300
 824 0126 A6E7     		b	.L45
 825              	.LVL92:
 826              	.L55:
 341:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 827              		.loc 1 341 9 is_stmt 1 view .LVU301
 828 0128 4846     		mov	r0, r9
 829              	.LVL93:
 341:Src/mcp.c     ****         MCPResponse = MCP_CMD_OK;
 830              		.loc 1 341 9 is_stmt 0 view .LVU302
 831 012a FFF7FEFF 		bl	MCI_Clear_Iqdref
 832              	.LVL94:
 342:Src/mcp.c     ****         break;
 833              		.loc 1 342 9 is_stmt 1 view .LVU303
 343:Src/mcp.c     ****       }
 834              		.loc 1 343 9 view .LVU304
ARM GAS  /tmp/cc8LTqb2.s 			page 26


 835 012e E389     		ldrh	r3, [r4, #14]
 836 0130 A668     		ldr	r6, [r4, #8]
 342:Src/mcp.c     ****         break;
 837              		.loc 1 342 21 is_stmt 0 view .LVU305
 838 0132 4046     		mov	r0, r8
 839 0134 1E44     		add	r6, r6, r3
 343:Src/mcp.c     ****       }
 840              		.loc 1 343 9 view .LVU306
 841 0136 9EE7     		b	.L45
 842              	.LVL95:
 843              	.L48:
 286:Src/mcp.c     ****         break;
 844              		.loc 1 286 9 is_stmt 1 view .LVU307
 845              	.LBB4:
 846              	.LBI4:
 157:Src/mcp.c     **** {
 847              		.loc 1 157 9 view .LVU308
 848              	.LBB5:
 159:Src/mcp.c     **** #ifdef NULL_PTR_CHECK_REG_INT
 849              		.loc 1 159 3 view .LVU309
 168:Src/mcp.c     ****     uint8_t * rxData = pHandle->rxBuffer;
 850              		.loc 1 168 5 view .LVU310
 169:Src/mcp.c     ****     uint8_t * txData = pHandle->txBuffer;
 851              		.loc 1 169 5 view .LVU311
 170:Src/mcp.c     ****     uint16_t size = 0U;
 852              		.loc 1 170 5 view .LVU312
 178:Src/mcp.c     ****     pHandle->txLength = 0;
 853              		.loc 1 178 15 is_stmt 0 view .LVU313
 854 0138 364A     		ldr	r2, .L83
 855 013a 374B     		ldr	r3, .L83+4
 856              	.LVL96:
 171:Src/mcp.c     ****     uint16_t rxLength = pHandle->rxLength;
 857              		.loc 1 171 14 view .LVU314
 858 013c ADF80E80 		strh	r8, [sp, #14]	@ movhi
 178:Src/mcp.c     ****     pHandle->txLength = 0;
 859              		.loc 1 178 15 view .LVU315
 860 0140 CDE90423 		strd	r2, r3, [sp, #16]
 170:Src/mcp.c     ****     uint16_t size = 0U;
 861              		.loc 1 170 15 view .LVU316
 862 0144 8668     		ldr	r6, [r0, #8]
 863              	.LVL97:
 171:Src/mcp.c     ****     uint16_t rxLength = pHandle->rxLength;
 864              		.loc 1 171 5 is_stmt 1 view .LVU317
 172:Src/mcp.c     ****     int16_t freeSpaceS16 = (int16_t) txSyncFreeSpace;
 865              		.loc 1 172 5 view .LVU318
 173:Src/mcp.c     **** 
 866              		.loc 1 173 5 view .LVU319
 175:Src/mcp.c     ****     uint8_t typeID;
 867              		.loc 1 175 5 view .LVU320
 176:Src/mcp.c     ****     uint8_t motorID;
 868              		.loc 1 176 5 view .LVU321
 177:Src/mcp.c     ****     uint8_t (*GetRegFcts[NBR_OF_MOTORS+1])(uint16_t, uint8_t, uint8_t*, uint16_t*, int16_t) = {&RI_
 869              		.loc 1 177 5 view .LVU322
 178:Src/mcp.c     ****     pHandle->txLength = 0;
 870              		.loc 1 178 5 view .LVU323
 179:Src/mcp.c     ****     while (rxLength > 0U)
 871              		.loc 1 179 5 view .LVU324
ARM GAS  /tmp/cc8LTqb2.s 			page 27


 180:Src/mcp.c     ****     {
 872              		.loc 1 180 5 view .LVU325
 180:Src/mcp.c     ****     {
 873              		.loc 1 180 11 is_stmt 0 view .LVU326
 874 0146 2FB1     		cbz	r7, .L69
 182:Src/mcp.c     ****       rxLength = rxLength - MCP_ID_SIZE;
 875              		.loc 1 182 7 is_stmt 1 view .LVU327
 876              	.LVL98:
 183:Src/mcp.c     ****       rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID
 877              		.loc 1 183 7 view .LVU328
 184:Src/mcp.c     **** 
 878              		.loc 1 184 7 view .LVU329
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 879              		.loc 1 186 7 view .LVU330
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 880              		.loc 1 186 15 is_stmt 0 view .LVU331
 881 0148 BCF80200 		ldrh	r0, [ip, #2]
 882              	.LVL99:
 187:Src/mcp.c     **** 
 883              		.loc 1 187 7 is_stmt 1 view .LVU332
 187:Src/mcp.c     **** 
 884              		.loc 1 187 16 is_stmt 0 view .LVU333
 885 014c C2B2     		uxtb	r2, r0
 886              	.LVL100:
 189:Src/mcp.c     **** 
 887              		.loc 1 189 7 is_stmt 1 view .LVU334
 191:Src/mcp.c     ****       {
 888              		.loc 1 191 7 view .LVU335
 191:Src/mcp.c     ****       {
 889              		.loc 1 191 10 is_stmt 0 view .LVU336
 890 014e 12F0060F 		tst	r2, #6
 891 0152 01D0     		beq	.L81
 892              	.LVL101:
 893              	.L69:
 193:Src/mcp.c     ****         rxLength = 0;
 894              		.loc 1 193 16 view .LVU337
 895 0154 0120     		movs	r0, #1
 215:Src/mcp.c     **** }
 896              		.loc 1 215 3 is_stmt 1 view .LVU338
 897              	.LVL102:
 215:Src/mcp.c     **** }
 898              		.loc 1 215 3 is_stmt 0 view .LVU339
 899              	.LBE5:
 900              	.LBE4:
 287:Src/mcp.c     ****       }
 901              		.loc 1 287 9 is_stmt 1 view .LVU340
 902 0156 8EE7     		b	.L45
 903              	.LVL103:
 904              	.L81:
 905              	.LBB7:
 906              	.LBB6:
 183:Src/mcp.c     ****       rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID
 907              		.loc 1 183 16 is_stmt 0 view .LVU341
 908 0158 AEF10407 		sub	r7, lr, #4
 184:Src/mcp.c     **** 
 909              		.loc 1 184 14 view .LVU342
 910 015c 0CF10408 		add	r8, ip, #4
ARM GAS  /tmp/cc8LTqb2.s 			page 28


 180:Src/mcp.c     ****     {
 911              		.loc 1 180 11 view .LVU343
 912 0160 18FA87F7 		uxtah	r7, r8, r7
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 913              		.loc 1 186 13 view .LVU344
 914 0164 20F00700 		bic	r0, r0, #7
 915              	.LVL104:
 187:Src/mcp.c     **** 
 916              		.loc 1 187 14 view .LVU345
 917 0168 02F03801 		and	r1, r2, #56
 180:Src/mcp.c     ****     {
 918              		.loc 1 180 11 view .LVU346
 919 016c BFB2     		uxth	r7, r7
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 920              		.loc 1 186 13 view .LVU347
 921 016e 80B2     		uxth	r0, r0
 189:Src/mcp.c     **** 
 922              		.loc 1 189 15 view .LVU348
 923 0170 02F00702 		and	r2, r2, #7
 924              	.LVL105:
 925              	.L63:
 198:Src/mcp.c     ****         if (retVal == MCP_CMD_OK )
 926              		.loc 1 198 9 is_stmt 1 view .LVU349
 198:Src/mcp.c     ****         if (retVal == MCP_CMD_OK )
 927              		.loc 1 198 28 is_stmt 0 view .LVU350
 928 0174 06AB     		add	r3, sp, #24
 929 0176 03EB8202 		add	r2, r3, r2, lsl #2
 930              	.LVL106:
 198:Src/mcp.c     ****         if (retVal == MCP_CMD_OK )
 931              		.loc 1 198 18 view .LVU351
 932 017a 0095     		str	r5, [sp]
 933 017c 52F8089C 		ldr	r9, [r2, #-8]
 934 0180 0DF10E03 		add	r3, sp, #14
 935 0184 3246     		mov	r2, r6
 936 0186 C847     		blx	r9
 937              	.LVL107:
 182:Src/mcp.c     ****       rxLength = rxLength - MCP_ID_SIZE;
 938              		.loc 1 182 7 is_stmt 1 view .LVU352
 183:Src/mcp.c     ****       rxData = rxData + MCP_ID_SIZE; // Shift buffer to the next MCP_ID
 939              		.loc 1 183 7 view .LVU353
 184:Src/mcp.c     **** 
 940              		.loc 1 184 7 view .LVU354
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 941              		.loc 1 186 7 view .LVU355
 199:Src/mcp.c     ****         {
 942              		.loc 1 199 9 view .LVU356
 202:Src/mcp.c     ****           pHandle->txLength += size;
 943              		.loc 1 202 11 view .LVU357
 180:Src/mcp.c     ****     {
 944              		.loc 1 180 11 is_stmt 0 view .LVU358
 945 0188 1FFA88F2 		uxth	r2, r8
 199:Src/mcp.c     ****         {
 946              		.loc 1 199 12 view .LVU359
 947 018c 60BB     		cbnz	r0, .L76
 202:Src/mcp.c     ****           pHandle->txLength += size;
 948              		.loc 1 202 26 view .LVU360
 949 018e BDF80E30 		ldrh	r3, [sp, #14]
ARM GAS  /tmp/cc8LTqb2.s 			page 29


 203:Src/mcp.c     ****           freeSpaceS16 = freeSpaceS16-size;
 950              		.loc 1 203 29 view .LVU361
 951 0192 B4F80EC0 		ldrh	ip, [r4, #14]
 952 0196 9C44     		add	ip, ip, r3
 204:Src/mcp.c     ****         }
 953              		.loc 1 204 38 view .LVU362
 954 0198 ED1A     		subs	r5, r5, r3
 955              	.LVL108:
 203:Src/mcp.c     ****           freeSpaceS16 = freeSpaceS16-size;
 956              		.loc 1 203 29 view .LVU363
 957 019a 1FFA8CFC 		uxth	ip, ip
 180:Src/mcp.c     ****     {
 958              		.loc 1 180 11 view .LVU364
 959 019e 9742     		cmp	r7, r2
 204:Src/mcp.c     ****         }
 960              		.loc 1 204 24 view .LVU365
 961 01a0 2DB2     		sxth	r5, r5
 202:Src/mcp.c     ****           pHandle->txLength += size;
 962              		.loc 1 202 18 view .LVU366
 963 01a2 1E44     		add	r6, r6, r3
 964              	.LVL109:
 203:Src/mcp.c     ****           freeSpaceS16 = freeSpaceS16-size;
 965              		.loc 1 203 11 is_stmt 1 view .LVU367
 203:Src/mcp.c     ****           freeSpaceS16 = freeSpaceS16-size;
 966              		.loc 1 203 29 is_stmt 0 view .LVU368
 967 01a4 A4F80EC0 		strh	ip, [r4, #14]	@ movhi
 204:Src/mcp.c     ****         }
 968              		.loc 1 204 11 is_stmt 1 view .LVU369
 969              	.LVL110:
 180:Src/mcp.c     ****     {
 970              		.loc 1 180 11 is_stmt 0 view .LVU370
 971 01a8 30D0     		beq	.L82
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 972              		.loc 1 186 15 view .LVU371
 973 01aa 38F8023B 		ldrh	r3, [r8], #2
 974              	.LVL111:
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 975              		.loc 1 186 13 view .LVU372
 976 01ae 23F00700 		bic	r0, r3, #7
 187:Src/mcp.c     **** 
 977              		.loc 1 187 16 view .LVU373
 978 01b2 DBB2     		uxtb	r3, r3
 191:Src/mcp.c     ****       {
 979              		.loc 1 191 10 view .LVU374
 980 01b4 13F0060F 		tst	r3, #6
 186:Src/mcp.c     ****       typeID = (uint8_t)*dataElementID & TYPE_MASK;
 981              		.loc 1 186 13 view .LVU375
 982 01b8 80B2     		uxth	r0, r0
 983              	.LVL112:
 187:Src/mcp.c     **** 
 984              		.loc 1 187 7 is_stmt 1 view .LVU376
 187:Src/mcp.c     **** 
 985              		.loc 1 187 14 is_stmt 0 view .LVU377
 986 01ba 03F03801 		and	r1, r3, #56
 987              	.LVL113:
 189:Src/mcp.c     **** 
 988              		.loc 1 189 7 is_stmt 1 view .LVU378
ARM GAS  /tmp/cc8LTqb2.s 			page 30


 189:Src/mcp.c     **** 
 989              		.loc 1 189 15 is_stmt 0 view .LVU379
 990 01be 03F00702 		and	r2, r3, #7
 991              	.LVL114:
 191:Src/mcp.c     ****       {
 992              		.loc 1 191 7 is_stmt 1 view .LVU380
 191:Src/mcp.c     ****       {
 993              		.loc 1 191 10 is_stmt 0 view .LVU381
 994 01c2 D7D0     		beq	.L63
 995 01c4 A668     		ldr	r6, [r4, #8]
 996              	.LVL115:
 193:Src/mcp.c     ****         rxLength = 0;
 997              		.loc 1 193 16 view .LVU382
 998 01c6 0120     		movs	r0, #1
 999              	.LVL116:
 193:Src/mcp.c     ****         rxLength = 0;
 1000              		.loc 1 193 16 view .LVU383
 1001 01c8 6644     		add	r6, r6, ip
 1002 01ca 54E7     		b	.L45
 1003              	.LVL117:
 1004              	.L60:
 193:Src/mcp.c     ****         rxLength = 0;
 1005              		.loc 1 193 16 view .LVU384
 1006 01cc 8668     		ldr	r6, [r0, #8]
 1007              	.LBE6:
 1008              	.LBE7:
 230:Src/mcp.c     **** 
 1009              		.loc 1 230 11 view .LVU385
 1010 01ce 4346     		mov	r3, r8
 1011              	.LVL118:
 1012              	.L44:
 363:Src/mcp.c     ****         {
 1013              		.loc 1 363 71 discriminator 1 view .LVU386
 1014 01d0 124A     		ldr	r2, .L83+8
 1015 01d2 52F82380 		ldr	r8, [r2, r3, lsl #2]
 363:Src/mcp.c     ****         {
 1016              		.loc 1 363 51 discriminator 1 view .LVU387
 1017 01d6 B8F1000F 		cmp	r8, #0
 1018 01da 8AD0     		beq	.L70
 365:Src/mcp.c     ****                                                       &pHandle->txLength, pHandle->txBuffer);
 1019              		.loc 1 365 11 is_stmt 1 view .LVU388
 365:Src/mcp.c     ****                                                       &pHandle->txLength, pHandle->txBuffer);
 1020              		.loc 1 365 25 is_stmt 0 view .LVU389
 1021 01dc 0096     		str	r6, [sp]
 1022 01de 2A46     		mov	r2, r5
 1023 01e0 3846     		mov	r0, r7
 1024              	.LVL119:
 365:Src/mcp.c     ****                                                       &pHandle->txLength, pHandle->txBuffer);
 1025              		.loc 1 365 25 view .LVU390
 1026 01e2 04F10E03 		add	r3, r4, #14
 1027 01e6 C047     		blx	r8
 1028              	.LVL120:
 1029              	.L76:
 365:Src/mcp.c     ****                                                       &pHandle->txLength, pHandle->txBuffer);
 1030              		.loc 1 365 25 view .LVU391
 1031 01e8 E389     		ldrh	r3, [r4, #14]
 1032 01ea A668     		ldr	r6, [r4, #8]
ARM GAS  /tmp/cc8LTqb2.s 			page 31


 1033 01ec 1E44     		add	r6, r6, r3
 365:Src/mcp.c     ****                                                       &pHandle->txLength, pHandle->txBuffer);
 1034              		.loc 1 365 23 view .LVU392
 1035 01ee 42E7     		b	.L45
 1036              	.LVL121:
 1037              	.L46:
 305:Src/mcp.c     ****         {
 1038              		.loc 1 305 9 is_stmt 1 view .LVU393
 305:Src/mcp.c     ****         {
 1039              		.loc 1 305 20 is_stmt 0 view .LVU394
 1040 01f0 4846     		mov	r0, r9
 1041              	.LVL122:
 305:Src/mcp.c     ****         {
 1042              		.loc 1 305 20 view .LVU395
 1043 01f2 FFF7FEFF 		bl	MCI_GetSTMState
 1044              	.LVL123:
 305:Src/mcp.c     ****         {
 1045              		.loc 1 305 12 view .LVU396
 1046 01f6 0628     		cmp	r0, #6
 1047 01f8 7FF439AF 		bne	.L77
 307:Src/mcp.c     ****         }
 1048              		.loc 1 307 11 is_stmt 1 view .LVU397
 1049 01fc 4846     		mov	r0, r9
 1050 01fe FFF7FEFF 		bl	MCI_StopRamp
 1051              	.LVL124:
 1052 0202 E389     		ldrh	r3, [r4, #14]
 1053 0204 A668     		ldr	r6, [r4, #8]
 313:Src/mcp.c     ****         break;
 1054              		.loc 1 313 21 is_stmt 0 view .LVU398
 1055 0206 4046     		mov	r0, r8
 1056 0208 1E44     		add	r6, r6, r3
 1057 020a 34E7     		b	.L45
 1058              	.LVL125:
 1059              	.L82:
 313:Src/mcp.c     ****         break;
 1060              		.loc 1 313 21 view .LVU399
 1061 020c A668     		ldr	r6, [r4, #8]
 1062              	.LVL126:
 313:Src/mcp.c     ****         break;
 1063              		.loc 1 313 21 view .LVU400
 1064 020e 6644     		add	r6, r6, ip
 1065 0210 31E7     		b	.L45
 1066              	.L84:
 1067 0212 00BF     		.align	2
 1068              	.L83:
 1069 0214 00000000 		.word	RI_GetRegisterGlobal
 1070 0218 00000000 		.word	RI_GetRegisterMotor1
 1071 021c 00000000 		.word	MCP_UserCallBack
 1072 0220 00000000 		.word	Mci
 1073              		.cfi_endproc
 1074              	.LFE1468:
 1076              		.section	.text.MCP_RegisterCallBack,"ax",%progbits
 1077              		.align	1
 1078              		.p2align 2,,3
 1079              		.global	MCP_RegisterCallBack
 1080              		.syntax unified
 1081              		.thumb
ARM GAS  /tmp/cc8LTqb2.s 			page 32


 1082              		.thumb_func
 1083              		.fpu fpv4-sp-d16
 1085              	MCP_RegisterCallBack:
 1086              	.LVL127:
 1087              	.LFB1469:
 387:Src/mcp.c     **** 
 388:Src/mcp.c     **** /**
 389:Src/mcp.c     ****   * @brief  Stores user's MCP function to be later called as MCP function.
 390:Src/mcp.c     ****   *
 391:Src/mcp.c     ****   * @param  callBackID: ID used to get to the stored @p fctCB function
 392:Src/mcp.c     ****   * @param  fctCB: User call back function structure
 393:Src/mcp.c     ****   *
 394:Src/mcp.c     ****   * @retval Returns #MCP_CMD_OK if the command is acknowledged and #MCP_CMD_NOK if not
 395:Src/mcp.c     ****   */
 396:Src/mcp.c     **** uint8_t MCP_RegisterCallBack (uint8_t callBackID, MCP_user_cb_t fctCB)
 397:Src/mcp.c     **** {
 1088              		.loc 1 397 1 is_stmt 1 view -0
 1089              		.cfi_startproc
 1090              		@ args = 0, pretend = 0, frame = 0
 1091              		@ frame_needed = 0, uses_anonymous_args = 0
 1092              		@ link register save eliminated.
 398:Src/mcp.c     ****   uint8_t result;
 1093              		.loc 1 398 3 view .LVU402
 399:Src/mcp.c     **** 
 400:Src/mcp.c     ****   if (callBackID < MCP_USER_CALLBACK_MAX)
 1094              		.loc 1 400 3 view .LVU403
 1095              		.loc 1 400 6 is_stmt 0 view .LVU404
 1096 0000 0128     		cmp	r0, #1
 401:Src/mcp.c     ****   {
 402:Src/mcp.c     ****     MCP_UserCallBack[callBackID] = fctCB;
 1097              		.loc 1 402 5 is_stmt 1 view .LVU405
 397:Src/mcp.c     ****   uint8_t result;
 1098              		.loc 1 397 1 is_stmt 0 view .LVU406
 1099 0002 0346     		mov	r3, r0
 1100              		.loc 1 402 34 view .LVU407
 1101 0004 9DBF     		ittte	ls
 1102 0006 034A     		ldrls	r2, .L88
 403:Src/mcp.c     ****     result = MCP_CMD_OK;
 1103              		.loc 1 403 12 view .LVU408
 1104 0008 0020     		movls	r0, #0
 1105              	.LVL128:
 402:Src/mcp.c     ****     result = MCP_CMD_OK;
 1106              		.loc 1 402 34 view .LVU409
 1107 000a 42F82310 		strls	r1, [r2, r3, lsl #2]
 1108              		.loc 1 403 5 is_stmt 1 view .LVU410
 1109              	.LVL129:
 404:Src/mcp.c     ****   }
 405:Src/mcp.c     ****   else
 406:Src/mcp.c     ****   {
 407:Src/mcp.c     ****     result = MCP_CMD_NOK;
 1110              		.loc 1 407 12 is_stmt 0 view .LVU411
 1111 000e 0120     		movhi	r0, #1
 1112              	.LVL130:
 408:Src/mcp.c     ****   }
 409:Src/mcp.c     ****   return (result);
 1113              		.loc 1 409 3 is_stmt 1 view .LVU412
 410:Src/mcp.c     **** }
ARM GAS  /tmp/cc8LTqb2.s 			page 33


 1114              		.loc 1 410 1 is_stmt 0 view .LVU413
 1115 0010 7047     		bx	lr
 1116              	.L89:
 1117 0012 00BF     		.align	2
 1118              	.L88:
 1119 0014 00000000 		.word	MCP_UserCallBack
 1120              		.cfi_endproc
 1121              	.LFE1469:
 1123              		.text
 1124              	.Letext0:
 1125              		.file 2 "/usr/lib/gcc/arm-none-eabi/8.3.1/include/stdint.h"
 1126              		.file 3 "Drivers/CMSIS/Include/core_cm4.h"
 1127              		.file 4 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/system_stm32g4xx.h"
 1128              		.file 5 "Drivers/CMSIS/Device/ST/STM32G4xx/Include/stm32g431xx.h"
 1129              		.file 6 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_def.h"
 1130              		.file 7 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_flash.h"
 1131              		.file 8 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal_uart.h"
 1132              		.file 9 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_hal.h"
 1133              		.file 10 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_tim.h"
 1134              		.file 11 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_usart.h"
 1135              		.file 12 "Drivers/STM32G4xx_HAL_Driver/Inc/stm32g4xx_ll_dma.h"
 1136              		.file 13 "Inc/mc_type.h"
 1137              		.file 14 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcptl.h"
 1138              		.file 15 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcp.h"
 1139              		.file 16 "Inc/pwm_curr_fdbk.h"
 1140              		.file 17 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pid_regulator.h"
 1141              		.file 18 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_pos_fdbk.h"
 1142              		.file 19 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/speed_torq_ctrl.h"
 1143              		.file 20 "Inc/mc_interface.h"
 1144              		.file 21 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/esc.h"
 1145              		.file 22 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/G4xx/Inc/r3_2_g4xx_pwm_curr_fdbk.h"
 1146              		.file 23 "Inc/mc_parameters.h"
 1147              		.file 24 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/virtual_speed_sensor.h"
 1148              		.file 25 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_speed_pos_fdbk.h"
 1149              		.file 26 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/revup_ctrl.h"
 1150              		.file 27 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/ntc_temperature_sensor.h"
 1151              		.file 28 "Inc/mc_configuration_registers.h"
 1152              		.file 29 "Inc/regular_conversion_manager.h"
 1153              		.file 30 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/bus_voltage_sensor.h"
 1154              		.file 31 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/r_divider_bus_voltage_sensor.h"
 1155              		.file 32 "Inc/mc_config_common.h"
 1156              		.file 33 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/pqd_motor_power_measurement.h"
 1157              		.file 34 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/ramp_ext_mngr.h"
 1158              		.file 35 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/circle_limitation.h"
 1159              		.file 36 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/sto_pll_speed_pos_fdbk.h"
 1160              		.file 37 "Inc/mc_config.h"
 1161              		.file 38 "Inc/aspep.h"
 1162              		.file 39 "MCSDK_v6.3.0-Full/MotorControl/MCSDK/MCLib/Any/Inc/mcpa.h"
 1163              		.file 40 "Inc/mcp_config.h"
 1164              		.file 41 "Inc/mc_api.h"
ARM GAS  /tmp/cc8LTqb2.s 			page 34


DEFINED SYMBOLS
                            *ABS*:0000000000000000 mcp.c
     /tmp/cc8LTqb2.s:18     .text.RI_SetRegCommandParser:0000000000000000 $t
     /tmp/cc8LTqb2.s:27     .text.RI_SetRegCommandParser:0000000000000000 RI_SetRegCommandParser
     /tmp/cc8LTqb2.s:306    .text.RI_SetRegCommandParser:00000000000000e8 $d
     /tmp/cc8LTqb2.s:312    .text.RI_GetRegCommandParser:0000000000000000 $t
     /tmp/cc8LTqb2.s:320    .text.RI_GetRegCommandParser:0000000000000000 RI_GetRegCommandParser
     /tmp/cc8LTqb2.s:514    .text.RI_GetRegCommandParser:000000000000009c $d
     /tmp/cc8LTqb2.s:520    .text.MCP_ReceivedPacket:0000000000000000 $t
     /tmp/cc8LTqb2.s:528    .text.MCP_ReceivedPacket:0000000000000000 MCP_ReceivedPacket
     /tmp/cc8LTqb2.s:1069   .text.MCP_ReceivedPacket:0000000000000214 $d
     /tmp/cc8LTqb2.s:1077   .text.MCP_RegisterCallBack:0000000000000000 $t
     /tmp/cc8LTqb2.s:1085   .text.MCP_RegisterCallBack:0000000000000000 MCP_RegisterCallBack
     /tmp/cc8LTqb2.s:1119   .text.MCP_RegisterCallBack:0000000000000014 $d

UNDEFINED SYMBOLS
RI_SetRegisterGlobal
RI_SetRegisterMotor1
RI_GetRegisterGlobal
RI_GetRegisterMotor1
MCI_StopMotor
MCI_FaultAcknowledged
MC_ProfilerCommand
MCI_GetSTMState
MCI_StartMotor
MCI_Clear_Iqdref
MCI_StopRamp
MCP_UserCallBack
Mci
