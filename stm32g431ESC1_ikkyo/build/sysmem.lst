ARM GAS  /tmp/ccIJ1Edz.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 2
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"sysmem.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._sbrk,"ax",%progbits
  18              		.align	1
  19              		.p2align 2,,3
  20              		.global	_sbrk
  21              		.arch armv7e-m
  22              		.syntax unified
  23              		.thumb
  24              		.thumb_func
  25              		.fpu fpv4-sp-d16
  27              	_sbrk:
  28              	.LVL0:
  29              	.LFB0:
  30              		.file 1 "Src/sysmem.c"
   1:Src/sysmem.c  **** /**
   2:Src/sysmem.c  ****  ******************************************************************************
   3:Src/sysmem.c  ****  * @file      sysmem.c
   4:Src/sysmem.c  ****  * @author    Generated by STM32CubeMX
   5:Src/sysmem.c  ****  * @brief     System Memory calls file
   6:Src/sysmem.c  ****  *
   7:Src/sysmem.c  ****  *            For more information about which C functions
   8:Src/sysmem.c  ****  *            need which of these lowlevel functions
   9:Src/sysmem.c  ****  *            please consult the newlib libc manual
  10:Src/sysmem.c  ****  ******************************************************************************
  11:Src/sysmem.c  ****  * @attention
  12:Src/sysmem.c  ****  *
  13:Src/sysmem.c  ****  * Copyright (c) 2024 STMicroelectronics.
  14:Src/sysmem.c  ****  * All rights reserved.
  15:Src/sysmem.c  ****  *
  16:Src/sysmem.c  ****  * This software is licensed under terms that can be found in the LICENSE file
  17:Src/sysmem.c  ****  * in the root directory of this software component.
  18:Src/sysmem.c  ****  * If no LICENSE file comes with this software, it is provided AS-IS.
  19:Src/sysmem.c  ****  *
  20:Src/sysmem.c  ****  ******************************************************************************
  21:Src/sysmem.c  ****  */
  22:Src/sysmem.c  **** 
  23:Src/sysmem.c  **** /* Includes */
  24:Src/sysmem.c  **** #include <errno.h>
  25:Src/sysmem.c  **** #include <stdint.h>
  26:Src/sysmem.c  **** 
  27:Src/sysmem.c  **** /**
  28:Src/sysmem.c  ****  * Pointer to the current high watermark of the heap usage
ARM GAS  /tmp/ccIJ1Edz.s 			page 2


  29:Src/sysmem.c  ****  */
  30:Src/sysmem.c  **** static uint8_t *__sbrk_heap_end = NULL;
  31:Src/sysmem.c  **** 
  32:Src/sysmem.c  **** /**
  33:Src/sysmem.c  ****  * @brief _sbrk() allocates memory to the newlib heap and is used by malloc
  34:Src/sysmem.c  ****  *        and others from the C library
  35:Src/sysmem.c  ****  *
  36:Src/sysmem.c  ****  * @verbatim
  37:Src/sysmem.c  ****  * ############################################################################
  38:Src/sysmem.c  ****  * #  .data  #  .bss  #       newlib heap       #          MSP stack          #
  39:Src/sysmem.c  ****  * #         #        #                         # Reserved by _Min_Stack_Size #
  40:Src/sysmem.c  ****  * ############################################################################
  41:Src/sysmem.c  ****  * ^-- RAM start      ^-- _end                             _estack, RAM end --^
  42:Src/sysmem.c  ****  * @endverbatim
  43:Src/sysmem.c  ****  *
  44:Src/sysmem.c  ****  * This implementation starts allocating at the '_end' linker symbol
  45:Src/sysmem.c  ****  * The '_Min_Stack_Size' linker symbol reserves a memory for the MSP stack
  46:Src/sysmem.c  ****  * The implementation considers '_estack' linker symbol to be RAM end
  47:Src/sysmem.c  ****  * NOTE: If the MSP stack, at any point during execution, grows larger than the
  48:Src/sysmem.c  ****  * reserved size, please increase the '_Min_Stack_Size'.
  49:Src/sysmem.c  ****  *
  50:Src/sysmem.c  ****  * @param incr Memory size
  51:Src/sysmem.c  ****  * @return Pointer to allocated memory
  52:Src/sysmem.c  ****  */
  53:Src/sysmem.c  **** void *_sbrk(ptrdiff_t incr)
  54:Src/sysmem.c  **** {
  31              		.loc 1 54 1 view -0
  32              		.cfi_startproc
  33              		@ args = 0, pretend = 0, frame = 0
  34              		@ frame_needed = 0, uses_anonymous_args = 0
  55:Src/sysmem.c  ****   extern uint8_t _end; /* Symbol defined in the linker script */
  35              		.loc 1 55 3 view .LVU1
  56:Src/sysmem.c  ****   extern uint8_t _estack; /* Symbol defined in the linker script */
  36              		.loc 1 56 3 view .LVU2
  57:Src/sysmem.c  ****   extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  37              		.loc 1 57 3 view .LVU3
  58:Src/sysmem.c  ****   const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  38              		.loc 1 58 3 view .LVU4
  59:Src/sysmem.c  ****   const uint8_t *max_heap = (uint8_t *)stack_limit;
  39              		.loc 1 59 3 view .LVU5
  60:Src/sysmem.c  ****   uint8_t *prev_heap_end;
  61:Src/sysmem.c  **** 
  62:Src/sysmem.c  ****   /* Initialize heap end at first call */
  63:Src/sysmem.c  ****   if (NULL == __sbrk_heap_end)
  40              		.loc 1 63 12 is_stmt 0 view .LVU6
  41 0000 0C49     		ldr	r1, .L9
  58:Src/sysmem.c  ****   const uint8_t *max_heap = (uint8_t *)stack_limit;
  42              		.loc 1 58 18 view .LVU7
  43 0002 0D4A     		ldr	r2, .L9+4
  44              		.loc 1 63 12 view .LVU8
  45 0004 0B68     		ldr	r3, [r1]
  54:Src/sysmem.c  ****   extern uint8_t _end; /* Symbol defined in the linker script */
  46              		.loc 1 54 1 view .LVU9
  47 0006 10B5     		push	{r4, lr}
  48              	.LCFI0:
  49              		.cfi_def_cfa_offset 8
  50              		.cfi_offset 4, -8
ARM GAS  /tmp/ccIJ1Edz.s 			page 3


  51              		.cfi_offset 14, -4
  58:Src/sysmem.c  ****   const uint8_t *max_heap = (uint8_t *)stack_limit;
  52              		.loc 1 58 18 view .LVU10
  53 0008 0C4C     		ldr	r4, .L9+8
  54 000a 121B     		subs	r2, r2, r4
  55              	.LVL1:
  60:Src/sysmem.c  ****   uint8_t *prev_heap_end;
  56              		.loc 1 60 3 is_stmt 1 view .LVU11
  57              		.loc 1 63 3 view .LVU12
  58              		.loc 1 63 6 is_stmt 0 view .LVU13
  59 000c 2BB1     		cbz	r3, .L7
  64:Src/sysmem.c  ****   {
  65:Src/sysmem.c  ****     __sbrk_heap_end = &_end;
  66:Src/sysmem.c  ****   }
  67:Src/sysmem.c  **** 
  68:Src/sysmem.c  ****   /* Protect heap from growing into the reserved MSP stack */
  69:Src/sysmem.c  ****   if (__sbrk_heap_end + incr > max_heap)
  60              		.loc 1 69 3 is_stmt 1 view .LVU14
  61              		.loc 1 69 23 is_stmt 0 view .LVU15
  62 000e 1844     		add	r0, r0, r3
  63              	.LVL2:
  64              		.loc 1 69 6 view .LVU16
  65 0010 9042     		cmp	r0, r2
  66 0012 07D8     		bhi	.L8
  67              	.L3:
  70:Src/sysmem.c  ****   {
  71:Src/sysmem.c  ****     errno = ENOMEM;
  72:Src/sysmem.c  ****     return (void *)-1;
  73:Src/sysmem.c  ****   }
  74:Src/sysmem.c  **** 
  75:Src/sysmem.c  ****   prev_heap_end = __sbrk_heap_end;
  68              		.loc 1 75 3 is_stmt 1 view .LVU17
  69              	.LVL3:
  76:Src/sysmem.c  ****   __sbrk_heap_end += incr;
  70              		.loc 1 76 3 view .LVU18
  71              		.loc 1 76 19 is_stmt 0 view .LVU19
  72 0014 0860     		str	r0, [r1]
  73              	.LVL4:
  77:Src/sysmem.c  **** 
  78:Src/sysmem.c  ****   return (void *)prev_heap_end;
  74              		.loc 1 78 3 is_stmt 1 view .LVU20
  79:Src/sysmem.c  **** }
  75              		.loc 1 79 1 is_stmt 0 view .LVU21
  76 0016 1846     		mov	r0, r3
  77 0018 10BD     		pop	{r4, pc}
  78              	.LVL5:
  79              	.L7:
  65:Src/sysmem.c  ****   }
  80              		.loc 1 65 5 is_stmt 1 view .LVU22
  65:Src/sysmem.c  ****   }
  81              		.loc 1 65 21 is_stmt 0 view .LVU23
  82 001a 094B     		ldr	r3, .L9+12
  83 001c 0B60     		str	r3, [r1]
  69:Src/sysmem.c  ****   {
  84              		.loc 1 69 3 is_stmt 1 view .LVU24
  69:Src/sysmem.c  ****   {
  85              		.loc 1 69 23 is_stmt 0 view .LVU25
ARM GAS  /tmp/ccIJ1Edz.s 			page 4


  86 001e 1844     		add	r0, r0, r3
  87              	.LVL6:
  69:Src/sysmem.c  ****   {
  88              		.loc 1 69 6 view .LVU26
  89 0020 9042     		cmp	r0, r2
  90 0022 F7D9     		bls	.L3
  91              	.L8:
  71:Src/sysmem.c  ****     return (void *)-1;
  92              		.loc 1 71 5 is_stmt 1 view .LVU27
  93 0024 FFF7FEFF 		bl	__errno
  94              	.LVL7:
  71:Src/sysmem.c  ****     return (void *)-1;
  95              		.loc 1 71 11 is_stmt 0 view .LVU28
  96 0028 0C23     		movs	r3, #12
  97 002a 0360     		str	r3, [r0]
  72:Src/sysmem.c  ****   }
  98              		.loc 1 72 5 is_stmt 1 view .LVU29
  72:Src/sysmem.c  ****   }
  99              		.loc 1 72 12 is_stmt 0 view .LVU30
 100 002c 4FF0FF33 		mov	r3, #-1
 101              		.loc 1 79 1 view .LVU31
 102 0030 1846     		mov	r0, r3
 103 0032 10BD     		pop	{r4, pc}
 104              	.L10:
 105              		.align	2
 106              	.L9:
 107 0034 00000000 		.word	.LANCHOR0
 108 0038 00000000 		.word	_estack
 109 003c 00000000 		.word	_Min_Stack_Size
 110 0040 00000000 		.word	_end
 111              		.cfi_endproc
 112              	.LFE0:
 114              		.section	.bss.__sbrk_heap_end,"aw",%nobits
 115              		.align	2
 116              		.set	.LANCHOR0,. + 0
 119              	__sbrk_heap_end:
 120 0000 00000000 		.space	4
 121              		.text
 122              	.Letext0:
 123              		.file 2 "/usr/lib/gcc/arm-none-eabi/8.3.1/include/stddef.h"
 124              		.file 3 "/usr/include/newlib/sys/_types.h"
 125              		.file 4 "/usr/include/newlib/sys/reent.h"
 126              		.file 5 "/usr/include/newlib/sys/lock.h"
 127              		.file 6 "/usr/include/newlib/sys/errno.h"
 128              		.file 7 "/usr/lib/gcc/arm-none-eabi/8.3.1/include/stdint.h"
ARM GAS  /tmp/ccIJ1Edz.s 			page 5


DEFINED SYMBOLS
                            *ABS*:0000000000000000 sysmem.c
     /tmp/ccIJ1Edz.s:18     .text._sbrk:0000000000000000 $t
     /tmp/ccIJ1Edz.s:27     .text._sbrk:0000000000000000 _sbrk
     /tmp/ccIJ1Edz.s:107    .text._sbrk:0000000000000034 $d
     /tmp/ccIJ1Edz.s:115    .bss.__sbrk_heap_end:0000000000000000 $d
     /tmp/ccIJ1Edz.s:119    .bss.__sbrk_heap_end:0000000000000000 __sbrk_heap_end

UNDEFINED SYMBOLS
__errno
_estack
_Min_Stack_Size
_end
